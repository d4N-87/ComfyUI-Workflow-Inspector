{
  "KSampler": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The model used for denoising the input latent."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "The number of steps used in the denoising process."
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01,
            "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."
          }
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "tooltip": "The scheduler controls how noise is gradually removed to form the image."
          }
        ],
        "positive": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to include in the image."
          }
        ],
        "negative": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to exclude from the image."
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "The latent image to denoise."
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler",
    "display_name": "KSampler",
    "description": "Uses the provided model, positive and negative conditioning to denoise the latent image.",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false,
    "output_tooltips": [
      "The denoised latent."
    ]
  },
  "CheckpointLoaderSimple": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderSimple",
    "display_name": "Load Checkpoint",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "CLIPTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncode",
    "display_name": "CLIP Text Encode (Prompt)",
    "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "CLIPSetLastLayer": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "stop_at_clip_layer": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "stop_at_clip_layer"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPSetLastLayer",
    "display_name": "CLIP Set Last Layer",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "VAEDecode": {
    "input": {
      "required": {
        "samples": [
          "LATENT",
          {
            "tooltip": "The latent to be decoded."
          }
        ],
        "vae": [
          "VAE",
          {
            "tooltip": "The VAE model used for decoding the latent."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecode",
    "display_name": "VAE Decode",
    "description": "Decodes latent images back into pixel space images.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The decoded image."
    ]
  },
  "VAEEncode": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncode",
    "display_name": "VAE Encode",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "VAEEncodeForInpaint": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "mask": [
          "MASK"
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "mask",
        "grow_mask_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeForInpaint",
    "display_name": "VAE Encode (for Inpainting)",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "VAELoader": {
    "input": {
      "required": {
        "vae_name": [
          [
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "VAE"
    ],
    "name": "VAELoader",
    "display_name": "Load VAE",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The width of the latent images in pixels."
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The height of the latent images in pixels."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentImage",
    "display_name": "Empty Latent Image",
    "description": "Create a new batch of empty latent images to be denoised via sampling.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The empty latent image batch."
    ]
  },
  "LatentUpscale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscale",
    "display_name": "Upscale Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentUpscaleBy": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.01,
            "max": 8,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleBy",
    "display_name": "Upscale Latent By",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentFromBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 63
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFromBatch",
    "display_name": "Latent From Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "RepeatLatentBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "amount"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "RepeatLatentBatch",
    "display_name": "Repeat Latent Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "SaveImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImage",
    "display_name": "Save Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "PreviewImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewImage",
    "display_name": "Preview Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "LoadImage": {
    "input": {
      "required": {
        "image": [
          [
            "489997193_10232281832206775_7649528775188436456_n.jpg",
            "ComfyUI_00018_.png",
            "Screenshot 2025-07-19 110607.png",
            "example.png"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImage",
    "display_name": "Load Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "LoadImageMask": {
    "input": {
      "required": {
        "image": [
          [
            "489997193_10232281832206775_7649528775188436456_n.jpg",
            "ComfyUI_00018_.png",
            "Screenshot 2025-07-19 110607.png",
            "example.png"
          ],
          {
            "image_upload": true
          }
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "LoadImageMask",
    "display_name": "Load Image (as Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "mask",
    "output_node": false
  },
  "LoadImageOutput": {
    "input": {
      "required": {
        "image": [
          "COMBO",
          {
            "image_upload": true,
            "image_folder": "output",
            "remote": {
              "route": "/internal/files/output",
              "refresh_button": true,
              "control_after_refresh": "first"
            }
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImageOutput",
    "display_name": "Load Image (from Outputs)",
    "description": "Load an image from the output folder. When the refresh button is clicked, the node will update the image list and automatically select the first image, allowing for easy iteration.",
    "python_module": "nodes",
    "category": "image",
    "output_node": false,
    "experimental": true
  },
  "ImageScale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScale",
    "display_name": "Upscale Image",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageScaleBy": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 8,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleBy",
    "display_name": "Upscale Image By",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageInvert": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageInvert",
    "display_name": "Invert Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImageBatch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatch",
    "display_name": "Batch Images",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 40,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaint",
    "display_name": "Pad Image for Outpainting",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "EmptyImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "EmptyImage",
    "display_name": "EmptyImage",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ConditioningAverage": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ],
        "conditioning_to_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from",
        "conditioning_to_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningAverage",
    "display_name": "ConditioningAverage",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningCombine": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombine",
    "display_name": "Conditioning (Combine)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningConcat": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningConcat",
    "display_name": "Conditioning (Concat)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetArea": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetArea",
    "display_name": "Conditioning (Set Area)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaPercentage": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentage",
    "display_name": "Conditioning (Set Area with Percentage)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaStrength": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaStrength",
    "display_name": "ConditioningSetAreaStrength",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetMask": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "mask",
        "strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetMask",
    "display_name": "Conditioning (Set Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "KSamplerAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerAdvanced",
    "display_name": "KSampler (Advanced)",
    "description": "",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false
  },
  "SetLatentNoiseMask": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "SetLatentNoiseMask",
    "display_name": "Set Latent Noise Mask",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "LatentComposite": {
    "input": {
      "required": {
        "samples_to": [
          "LATENT"
        ],
        "samples_from": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feather": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples_to",
        "samples_from",
        "x",
        "y",
        "feather"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentComposite",
    "display_name": "Latent Composite",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentBlend": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "blend_factor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBlend",
    "display_name": "Latent Blend",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "LatentRotate": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "rotation": [
          [
            "none",
            "90 degrees",
            "180 degrees",
            "270 degrees"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "rotation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentRotate",
    "display_name": "Rotate Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentFlip": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "flip_method": [
          [
            "x-axis: vertically",
            "y-axis: horizontally"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "flip_method"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFlip",
    "display_name": "Flip Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentCrop": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCrop",
    "display_name": "Crop Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "LoraLoader",
    "display_name": "Load LoRA",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CLIPLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "type": [
          [
            "stable_diffusion",
            "stable_cascade",
            "sd3",
            "stable_audio",
            "mochi",
            "ltxv",
            "pixart",
            "cosmos",
            "lumina2",
            "wan",
            "hidream",
            "chroma",
            "ace",
            "omnigen2"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPLoader",
    "display_name": "Load CLIP",
    "description": "[Recipes]\n\nstable_diffusion: clip-l\nstable_cascade: clip-g\nsd3: t5 xxl/ clip-g / clip-l\nstable_audio: t5 base\nmochi: t5 xxl\ncosmos: old t5 xxl\nlumina2: gemma 2 2B\nwan: umt5 xxl\n hidream: llama-3.1 (Recommend) or t5\nomnigen2: qwen vl 2.5 3B",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "UNETLoader": {
    "input": {
      "required": {
        "unet_name": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ]
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "weight_dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "UNETLoader",
    "display_name": "Load Diffusion Model",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "DualCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "type": [
          [
            "sdxl",
            "sd3",
            "flux",
            "hunyuan_video",
            "hidream"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "DualCLIPLoader",
    "display_name": "DualCLIPLoader",
    "description": "[Recipes]\n\nsdxl: clip-l, clip-g\nsd3: clip-l, clip-g / clip-l, t5 / clip-g, t5\nflux: clip-l, t5\nhidream: at least one of t5 or llama, recommended t5 and llama",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "CLIPVisionEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image": [
          "IMAGE"
        ],
        "crop": [
          [
            "center",
            "none"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image",
        "crop"
      ]
    },
    "output": [
      "CLIP_VISION_OUTPUT"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP_VISION_OUTPUT"
    ],
    "name": "CLIPVisionEncode",
    "display_name": "CLIP Vision Encode",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "StyleModelApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "strength_type": [
          [
            "multiply",
            "attn_bias"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output",
        "strength",
        "strength_type"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApply",
    "display_name": "Apply Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/style_model",
    "output_node": false
  },
  "unCLIPConditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "clip_vision_output",
        "strength",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "unCLIPConditioning",
    "display_name": "unCLIPConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ControlNetApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ControlNetApply",
    "display_name": "Apply ControlNet (OLD)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "ControlNetApplyAdvanced": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "vae"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplyAdvanced",
    "display_name": "Apply ControlNet",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetLoader": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ControlNetLoader",
    "display_name": "Load ControlNet Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "DiffControlNetLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "DiffControlNetLoader",
    "display_name": "Load ControlNet Model (diff)",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "StyleModelLoader": {
    "input": {
      "required": {
        "style_model_name": [
          [
            "FLUX.1_Tools\\FLUX.1_Redux_Dev.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style_model_name"
      ]
    },
    "output": [
      "STYLE_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "STYLE_MODEL"
    ],
    "name": "StyleModelLoader",
    "display_name": "Load Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "CLIPVisionLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "CLIP_Vision_H.safetensors",
            "Llava_Llama_3_Vision.safetensors",
            "SigCLIP_Vision_Patch14_384.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIPVisionLoader",
    "display_name": "Load CLIP Vision",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "VAEDecodeTiled": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 32
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to decode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecodeTiled",
    "display_name": "VAE Decode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "VAEEncodeTiled": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeTiled",
    "display_name": "VAE Encode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "unCLIPCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "name": "unCLIPCheckpointLoader",
    "display_name": "unCLIPCheckpointLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENLoader": {
    "input": {
      "required": {
        "gligen_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "gligen_name"
      ]
    },
    "output": [
      "GLIGEN"
    ],
    "output_is_list": [false],
    "output_name": [
      "GLIGEN"
    ],
    "name": "GLIGENLoader",
    "display_name": "GLIGENLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENTextBoxApply": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "clip",
        "gligen_textbox_model",
        "text",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "GLIGENTextBoxApply",
    "display_name": "GLIGENTextBoxApply",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/gligen",
    "output_node": false
  },
  "InpaintModelConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels",
        "mask",
        "noise_mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InpaintModelConditioning",
    "display_name": "InpaintModelConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "CheckpointLoader": {
    "input": {
      "required": {
        "config_name": [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ]
        ],
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoader",
    "display_name": "Load Checkpoint With Config (DEPRECATED)",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false,
    "deprecated": true
  },
  "DiffusersLoader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "DiffusersLoader",
    "display_name": "DiffusersLoader",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders/deprecated",
    "output_node": false
  },
  "LoadLatent": {
    "input": {
      "required": {
        "latent": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LoadLatent",
    "display_name": "LoadLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "SaveLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "latents/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveLatent",
    "display_name": "SaveLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": true
  },
  "ConditioningZeroOut": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningZeroOut",
    "display_name": "ConditioningZeroOut",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ConditioningSetTimestepRange": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "start",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetTimestepRange",
    "display_name": "ConditioningSetTimestepRange",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "LoraLoaderModelOnly": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "strength_model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "LoraLoaderModelOnly",
    "display_name": "LoraLoaderModelOnly",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "LatentAdd": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentAdd",
    "display_name": "LatentAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentSubtract": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentSubtract",
    "display_name": "LatentSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentMultiply": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "multiplier"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentMultiply",
    "display_name": "LatentMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentInterpolate": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "ratio"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentInterpolate",
    "display_name": "LatentInterpolate",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentBatch": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatch",
    "display_name": "LatentBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/batch",
    "output_node": false
  },
  "LatentBatchSeedBehavior": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "seed_behavior": [
          [
            "random",
            "fixed"
          ],
          {
            "default": "fixed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "seed_behavior"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatchSeedBehavior",
    "display_name": "LatentBatchSeedBehavior",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentApplyOperation": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "operation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentApplyOperation",
    "display_name": "LatentApplyOperation",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentApplyOperationCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "operation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "LatentApplyOperationCFG",
    "display_name": "LatentApplyOperationCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationTonemapReinhard": {
    "input": {
      "required": {
        "multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "multiplier"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationTonemapReinhard",
    "display_name": "LatentOperationTonemapReinhard",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationSharpen": {
    "input": {
      "required": {
        "sharpen_radius": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 10,
            "step": 0.1
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationSharpen",
    "display_name": "LatentOperationSharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "HypernetworkLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "hypernetwork_name": [
          []
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hypernetwork_name",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "HypernetworkLoader",
    "display_name": "HypernetworkLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_hypernetwork",
    "category": "loaders",
    "output_node": false
  },
  "UpscaleModelLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x_Nomos_2_HQ_DRCT-L.pth",
            "4x_Nomos_8k_SCHAT-L.pth",
            "realSR_BSRGAN_DFO_s64w8_SwinIR-M_x2_GAN.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "UpscaleModelLoader",
    "display_name": "Load Upscale Model",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "loaders",
    "output_node": false
  },
  "ImageUpscaleWithModel": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModel",
    "display_name": "Upscale Image (using Model)",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageBlend": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blend_mode": [
          [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "difference"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "blend_factor",
        "blend_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageBlur": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "blur_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 10,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "blur_radius",
        "sigma"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlur",
    "display_name": "Image Blur",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageQuantize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "none",
            "floyd-steinberg",
            "bayer-2",
            "bayer-4",
            "bayer-8",
            "bayer-16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "dither"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageQuantize",
    "display_name": "Image Quantize",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageSharpen": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 10,
            "step": 0.01
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSharpen",
    "display_name": "Image Sharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageScaleToTotalPixels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "megapixels": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 16,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "megapixels"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleToTotalPixels",
    "display_name": "Scale Image to Total Pixels",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/upscaling",
    "output_node": false
  },
  "LatentCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "LATENT"
        ],
        "source": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCompositeMasked",
    "display_name": "LatentCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "latent",
    "output_node": false
  },
  "ImageCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeMasked",
    "display_name": "ImageCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "image",
    "output_node": false
  },
  "MaskToImage": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "MaskToImage",
    "display_name": "Convert Mask to Image",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue",
            "alpha"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ImageToMask",
    "display_name": "Convert Image to Mask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageColorToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ImageColorToMask",
    "display_name": "ImageColorToMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "SolidMask": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "SolidMask",
    "display_name": "SolidMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "InvertMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "InvertMask",
    "display_name": "InvertMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "CropMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "CropMask",
    "display_name": "CropMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "MaskComposite": {
    "input": {
      "required": {
        "destination": [
          "MASK"
        ],
        "source": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "operation": [
          [
            "multiply",
            "add",
            "subtract",
            "and",
            "or",
            "xor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "operation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskComposite",
    "display_name": "MaskComposite",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "FeatherMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "left",
        "top",
        "right",
        "bottom"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "FeatherMask",
    "display_name": "FeatherMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "GrowMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "tapered_corners"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "GrowMask",
    "display_name": "GrowMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ThresholdMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "value": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "value"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ThresholdMask",
    "display_name": "ThresholdMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "MaskPreview": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "MaskPreview",
    "display_name": "MaskPreview",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": true
  },
  "PorterDuffImageComposite": {
    "input": {
      "required": {
        "source": [
          "IMAGE"
        ],
        "source_alpha": [
          "MASK"
        ],
        "destination": [
          "IMAGE"
        ],
        "destination_alpha": [
          "MASK"
        ],
        "mode": [
          [
            "ADD",
            "CLEAR",
            "DARKEN",
            "DST",
            "DST_ATOP",
            "DST_IN",
            "DST_OUT",
            "DST_OVER",
            "LIGHTEN",
            "MULTIPLY",
            "OVERLAY",
            "SCREEN",
            "SRC",
            "SRC_ATOP",
            "SRC_IN",
            "SRC_OUT",
            "SRC_OVER",
            "XOR"
          ],
          {
            "default": "DST"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "source_alpha",
        "destination",
        "destination_alpha",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "PorterDuffImageComposite",
    "display_name": "Porter-Duff Image Composite",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "SplitImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SplitImageWithAlpha",
    "display_name": "Split Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "JoinImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "alpha": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JoinImageWithAlpha",
    "display_name": "Join Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "RebatchLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [true],
    "output_name": [
      "LATENT"
    ],
    "name": "RebatchLatents",
    "display_name": "Rebatch Latents",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "latent/batch",
    "output_node": false
  },
  "RebatchImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "batch_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [true],
    "output_name": [
      "IMAGE"
    ],
    "name": "RebatchImages",
    "display_name": "Rebatch Images",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "image/batch",
    "output_node": false
  },
  "ModelMergeSimple": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSimple",
    "display_name": "ModelMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeBlocks": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "input": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "input",
        "middle",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeBlocks",
    "display_name": "ModelMergeBlocks",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeSubtract": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSubtract",
    "display_name": "ModelMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeAdd": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAdd",
    "display_name": "ModelMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CheckpointSave",
    "display_name": "Save Checkpoint",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "CLIPMergeSimple": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "ratio"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSimple",
    "display_name": "CLIPMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeSubtract": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "multiplier"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSubtract",
    "display_name": "CLIPMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeAdd": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeAdd",
    "display_name": "CLIPMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPSave": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "clip/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "clip",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CLIPSave",
    "display_name": "CLIPSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "VAESave": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "vae/ComfyUI_vae"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VAESave",
    "display_name": "VAESave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ModelSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSave",
    "display_name": "ModelSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "TomePatchModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TomePatchModel",
    "display_name": "TomePatchModel",
    "description": "",
    "python_module": "comfy_extras.nodes_tomesd",
    "category": "model_patches/unet",
    "output_node": false
  },
  "CLIPTextEncodeSDXLRefiner": {
    "input": {
      "required": {
        "ascore": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "ascore",
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXLRefiner",
    "display_name": "CLIPTextEncodeSDXLRefiner",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeSDXL": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "text_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "text_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height",
        "text_g",
        "text_l"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL",
    "display_name": "CLIPTextEncodeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "Canny": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "low_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ],
        "high_threshold": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "low_threshold",
        "high_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Canny",
    "display_name": "Canny",
    "description": "",
    "python_module": "comfy_extras.nodes_canny",
    "category": "image/preprocessors",
    "output_node": false
  },
  "FreeU": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU",
    "display_name": "FreeU",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "FreeU_V2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.3,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.4,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU_V2",
    "display_name": "FreeU_V2",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "SamplerCustom": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "cfg",
        "positive",
        "negative",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustom",
    "display_name": "SamplerCustom",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "BasicScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scheduler",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BasicScheduler",
    "display_name": "BasicScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KarrasScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 7,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "KarrasScheduler",
    "display_name": "KarrasScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "ExponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "ExponentialScheduler",
    "display_name": "ExponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "PolyexponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "PolyexponentialScheduler",
    "display_name": "PolyexponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LaplaceScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "mu": [
          "FLOAT",
          {
            "default": 0,
            "min": -10,
            "max": 10,
            "step": 0.1,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 10,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "mu",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LaplaceScheduler",
    "display_name": "LaplaceScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "VPScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "beta_d": [
          "FLOAT",
          {
            "default": 19.9,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_min": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 5000,
            "step": 0.01,
            "round": false
          }
        ],
        "eps_s": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0,
            "max": 1,
            "step": 0.0001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "beta_d",
        "beta_min",
        "eps_s"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "VPScheduler",
    "display_name": "VPScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "BetaSamplingScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 50,
            "step": 0.01,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 50,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "alpha",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BetaSamplingScheduler",
    "display_name": "BetaSamplingScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SDTurboScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SDTurboScheduler",
    "display_name": "SDTurboScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KSamplerSelect": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "KSamplerSelect",
    "display_name": "KSamplerSelect",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestral",
    "display_name": "SamplerEulerAncestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestralCFGPP": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestralCFGPP",
    "display_name": "SamplerEulerAncestralCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerLMS": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLMS",
    "display_name": "SamplerLMS",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_3M_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_3M_SDE",
    "display_name": "SamplerDPMPP_3M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2M_SDE": {
    "input": {
      "required": {
        "solver_type": [
          [
            "midpoint",
            "heun"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "solver_type",
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2M_SDE",
    "display_name": "SamplerDPMPP_2M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "r": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "r",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_SDE",
    "display_name": "SamplerDPMPP_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2S_Ancestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2S_Ancestral",
    "display_name": "SamplerDPMPP_2S_Ancestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMAdaptative": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 3,
            "min": 2,
            "max": 3
          }
        ],
        "rtol": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "atol": [
          "FLOAT",
          {
            "default": 0.0078,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "h_init": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "pcoeff": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "icoeff": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "dcoeff": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "accept_safety": [
          "FLOAT",
          {
            "default": 0.81,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "eta": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order",
        "rtol",
        "atol",
        "h_init",
        "pcoeff",
        "icoeff",
        "dcoeff",
        "accept_safety",
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMAdaptative",
    "display_name": "SamplerDPMAdaptative",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerER_SDE": {
    "input": {
      "required": {
        "solver_type": [
          "COMBO",
          {
            "options": [
              "ER-SDE",
              "Reverse-time SDE",
              "ODE"
            ]
          }
        ],
        "max_stage": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 3
          }
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false,
            "tooltip": "Stochastic strength of reverse-time SDE.\nWhen eta=0, it reduces to deterministic ODE. This setting doesn't apply to ER-SDE solver type."
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "solver_type",
        "max_stage",
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerER_SDE",
    "display_name": "SamplerER_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerSASolver": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {

          }
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "round": false
          }
        ],
        "sde_start_percent": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "sde_end_percent": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "predictor_order": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 6
          }
        ],
        "corrector_order": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 6
          }
        ],
        "use_pece": [
          "BOOLEAN",
          {

          }
        ],
        "simple_order_2": [
          "BOOLEAN",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "eta",
        "sde_start_percent",
        "sde_end_percent",
        "s_noise",
        "predictor_order",
        "corrector_order",
        "use_pece",
        "simple_order_2"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerSASolver",
    "display_name": "SamplerSASolver",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SplitSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "step"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmas",
    "display_name": "SplitSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SplitSigmasDenoise": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmasDenoise",
    "display_name": "SplitSigmasDenoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "FlipSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FlipSigmas",
    "display_name": "FlipSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SetFirstSigma": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 136,
            "min": 0,
            "max": 20000,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "sigma"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SetFirstSigma",
    "display_name": "SetFirstSigma",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "ExtendIntermediateSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "steps": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 100
          }
        ],
        "start_at_sigma": [
          "FLOAT",
          {
            "default": -1,
            "min": -1,
            "max": 20000,
            "step": 0.01,
            "round": false
          }
        ],
        "end_at_sigma": [
          "FLOAT",
          {
            "default": 12,
            "min": 0,
            "max": 20000,
            "step": 0.01,
            "round": false
          }
        ],
        "spacing": [
          [
            "linear",
            "cosine",
            "sine"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "steps",
        "start_at_sigma",
        "end_at_sigma",
        "spacing"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "ExtendIntermediateSigmas",
    "display_name": "ExtendIntermediateSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SamplingPercentToSigma": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {

          }
        ],
        "sampling_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.0001
          }
        ],
        "return_actual_sigma": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Return the actual sigma value instead of the value used for interval checks.\nThis only affects results at 0.0 and 1.0."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling_percent",
        "return_actual_sigma"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "sigma_value"
    ],
    "name": "SamplingPercentToSigma",
    "display_name": "SamplingPercentToSigma",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "CFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "cfg"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [false],
    "output_name": [
      "GUIDER"
    ],
    "name": "CFGGuider",
    "display_name": "CFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "DualCFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond1": [
          "CONDITIONING"
        ],
        "cond2": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg_conds": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "cfg_cond2_negative": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "style": [
          [
            "regular",
            "nested"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond1",
        "cond2",
        "negative",
        "cfg_conds",
        "cfg_cond2_negative",
        "style"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [false],
    "output_name": [
      "GUIDER"
    ],
    "name": "DualCFGGuider",
    "display_name": "DualCFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "BasicGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [false],
    "output_name": [
      "GUIDER"
    ],
    "name": "BasicGuider",
    "display_name": "BasicGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "RandomNoise": {
    "input": {
      "required": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "noise_seed"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [false],
    "output_name": [
      "NOISE"
    ],
    "name": "RandomNoise",
    "display_name": "RandomNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "DisableNoise": {
    "input": {
      "required": {

      }
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [false],
    "output_name": [
      "NOISE"
    ],
    "name": "DisableNoise",
    "display_name": "DisableNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "AddNoise": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "noise": [
          "NOISE"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "noise",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "AddNoise",
    "display_name": "AddNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "_for_testing/custom_sampling/noise",
    "output_node": false
  },
  "SamplerCustomAdvanced": {
    "input": {
      "required": {
        "noise": [
          "NOISE"
        ],
        "guider": [
          "GUIDER"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "noise",
        "guider",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustomAdvanced",
    "display_name": "SamplerCustomAdvanced",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "HyperTile": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "tile_size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 2048
          }
        ],
        "swap_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 128
          }
        ],
        "max_depth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10
          }
        ],
        "scale_depth": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tile_size",
        "swap_size",
        "max_depth",
        "scale_depth"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "HyperTile",
    "display_name": "HyperTile",
    "description": "",
    "python_module": "comfy_extras.nodes_hypertile",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ModelSamplingDiscrete": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "eps",
            "v_prediction",
            "lcm",
            "x0",
            "img_to_img"
          ]
        ],
        "zsnr": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "zsnr"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingDiscrete",
    "display_name": "ModelSamplingDiscrete",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousEDM": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction",
            "edm",
            "edm_playground_v2.5",
            "eps",
            "cosmos_rflow"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 120,
            "min": 0,
            "max": 1000,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.002,
            "min": 0,
            "max": 1000,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousEDM",
    "display_name": "ModelSamplingContinuousEDM",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 500,
            "min": 0,
            "max": 1000,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.03,
            "min": 0,
            "max": 1000,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousV",
    "display_name": "ModelSamplingContinuousV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingStableCascade": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingStableCascade",
    "display_name": "ModelSamplingStableCascade",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3",
    "display_name": "ModelSamplingSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingAuraFlow": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 1.73,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingAuraFlow",
    "display_name": "ModelSamplingAuraFlow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingFlux": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 1.15,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift",
        "width",
        "height"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingFlux",
    "display_name": "ModelSamplingFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "RescaleCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "RescaleCFG",
    "display_name": "RescaleCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelComputeDtype": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "dtype": [
          [
            "default",
            "fp32",
            "fp16",
            "bf16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelComputeDtype",
    "display_name": "ModelComputeDtype",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/debug/model",
    "output_node": false
  },
  "PatchModelAddDownscale": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "block_number": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 32,
            "step": 1
          }
        ],
        "downscale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.1,
            "max": 9,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "downscale_after_skip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "upscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "block_number",
        "downscale_factor",
        "start_percent",
        "end_percent",
        "downscale_after_skip",
        "downscale_method",
        "upscale_method"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelAddDownscale",
    "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)",
    "description": "",
    "python_module": "comfy_extras.nodes_model_downscale",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ImageCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCrop",
    "display_name": "Image Crop",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "RepeatImageBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RepeatImageBatch",
    "display_name": "RepeatImageBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "ImageFromBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4095
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch",
    "display_name": "ImageFromBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "ImageAddNoise": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "seed",
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageAddNoise",
    "display_name": "ImageAddNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image",
    "output_node": false
  },
  "SaveAnimatedWEBP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6,
            "min": 0.01,
            "max": 1000,
            "step": 0.01
          }
        ],
        "lossless": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "quality": [
          "INT",
          {
            "default": 80,
            "min": 0,
            "max": 100
          }
        ],
        "method": [
          [
            "default",
            "fastest",
            "slowest"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "lossless",
        "quality",
        "method"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedWEBP",
    "display_name": "SaveAnimatedWEBP",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "SaveAnimatedPNG": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6,
            "min": 0.01,
            "max": 1000,
            "step": 0.01
          }
        ],
        "compress_level": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "compress_level"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedPNG",
    "display_name": "SaveAnimatedPNG",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "SaveSVGNode": {
    "input": {
      "required": {
        "svg": [
          "SVG"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "svg/ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "svg",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveSVGNode",
    "display_name": "SaveSVGNode",
    "description": "Save SVG files on disk.",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/save",
    "output_node": true
  },
  "ImageStitch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "spacing_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024,
            "step": 2
          }
        ],
        "spacing_color": [
          [
            "white",
            "black",
            "red",
            "green",
            "blue"
          ],
          {
            "default": "white"
          }
        ]
      },
      "optional": {
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "direction",
        "match_image_size",
        "spacing_width",
        "spacing_color"
      ],
      "optional": [
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageStitch",
    "display_name": "Image Stitch",
    "description": "\nStitches image2 to image1 in the specified direction.\nIf image2 is not provided, returns image1 unchanged.\nOptional spacing can be added between images.\n",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "ResizeAndPadImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "target_width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "padding_color": [
          [
            "white",
            "black"
          ]
        ],
        "interpolation": [
          [
            "area",
            "bicubic",
            "nearest-exact",
            "bilinear",
            "lanczos"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "target_width",
        "target_height",
        "padding_color",
        "interpolation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ResizeAndPadImage",
    "display_name": "ResizeAndPadImage",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "GetImageSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "width",
      "height",
      "batch_size"
    ],
    "name": "GetImageSize",
    "display_name": "Get Image Size",
    "description": "Returns width and height of the image, and passes it through unchanged.",
    "python_module": "comfy_extras.nodes_images",
    "category": "image",
    "output_node": false
  },
  "ImageRotate": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rotation": [
          [
            "none",
            "90 degrees",
            "180 degrees",
            "270 degrees"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rotation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRotate",
    "display_name": "ImageRotate",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "ImageFlip": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "flip_method": [
          [
            "x-axis: vertically",
            "y-axis: horizontally"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "flip_method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFlip",
    "display_name": "ImageFlip",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "ImageOnlyCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "name": "ImageOnlyCheckpointLoader",
    "display_name": "Image Only Checkpoint Loader (img2vid model)",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "loaders/video_models",
    "output_node": false
  },
  "SVD_img2vid_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 14,
            "min": 1,
            "max": 4096
          }
        ],
        "motion_bucket_id": [
          "INT",
          {
            "default": 127,
            "min": 1,
            "max": 1023
          }
        ],
        "fps": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 1024
          }
        ],
        "augmentation_level": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "motion_bucket_id",
        "fps",
        "augmentation_level"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SVD_img2vid_Conditioning",
    "display_name": "SVD_img2vid_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VideoLinearCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoLinearCFGGuidance",
    "display_name": "VideoLinearCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "VideoTriangleCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoTriangleCFGGuidance",
    "display_name": "VideoTriangleCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "ImageOnlyCheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImageOnlyCheckpointSave",
    "display_name": "ImageOnlyCheckpointSave",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ConditioningSetAreaPercentageVideo": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "temporal": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "z": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "temporal",
        "x",
        "y",
        "z",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentageVideo",
    "display_name": "ConditioningSetAreaPercentageVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning",
    "output_node": false
  },
  "TrainLoraNode": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The model to train the LoRA on."
          }
        ],
        "latents": [
          "LATENT",
          {
            "tooltip": "The Latents to use for training, serve as dataset/input of the model."
          }
        ],
        "positive": [
          "CONDITIONING",
          {
            "tooltip": "The positive conditioning to use for training."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000,
            "step": 1,
            "tooltip": "The batch size to use for training."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 100000,
            "tooltip": "The number of steps to train the LoRA for."
          }
        ],
        "learning_rate": [
          "FLOAT",
          {
            "default": 0.0005,
            "min": 1e-7,
            "max": 1,
            "step": 0.000001,
            "tooltip": "The learning rate to use for training."
          }
        ],
        "rank": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 128,
            "tooltip": "The rank of the LoRA layers."
          }
        ],
        "optimizer": [
          [
            "AdamW",
            "Adam",
            "SGD",
            "RMSprop"
          ],
          {
            "default": "AdamW",
            "tooltip": "The optimizer to use for training."
          }
        ],
        "loss_function": [
          [
            "MSE",
            "L1",
            "Huber",
            "SmoothL1"
          ],
          {
            "default": "MSE",
            "tooltip": "The loss function to use for training."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "tooltip": "The seed to use for training (used in generator for LoRA weight initialization and noise sampling)"
          }
        ],
        "training_dtype": [
          [
            "bf16",
            "fp32"
          ],
          {
            "default": "bf16",
            "tooltip": "The dtype to use for training."
          }
        ],
        "lora_dtype": [
          [
            "bf16",
            "fp32"
          ],
          {
            "default": "bf16",
            "tooltip": "The dtype to use for lora."
          }
        ],
        "existing_lora": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors",
            "[None]"
          ],
          {
            "default": "[None]",
            "tooltip": "The existing LoRA to append to. Set to None for new LoRA."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latents",
        "positive",
        "batch_size",
        "steps",
        "learning_rate",
        "rank",
        "optimizer",
        "loss_function",
        "seed",
        "training_dtype",
        "lora_dtype",
        "existing_lora"
      ]
    },
    "output": [
      "MODEL",
      "LORA_MODEL",
      "LOSS_MAP",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "model_with_lora",
      "lora",
      "loss",
      "steps"
    ],
    "name": "TrainLoraNode",
    "display_name": "Train LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_train",
    "category": "training",
    "output_node": false,
    "experimental": true
  },
  "SaveLoRANode": {
    "input": {
      "required": {
        "lora": [
          "LORA_MODEL",
          {
            "tooltip": "The LoRA model to save. Do not use the model with LoRA layers."
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "loras/ComfyUI_trained_lora",
            "tooltip": "The prefix to use for the saved LoRA file."
          }
        ]
      },
      "optional": {
        "steps": [
          "INT",
          {
            "forceInput": true,
            "tooltip": "Optional: The number of steps to LoRA has been trained for, used to name the saved file."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "lora",
        "prefix"
      ],
      "optional": [
        "steps"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveLoRANode",
    "display_name": "Save LoRA Weights",
    "description": "",
    "python_module": "comfy_extras.nodes_train",
    "category": "loaders",
    "output_node": true,
    "experimental": true
  },
  "LoraModelLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "lora": [
          "LORA_MODEL",
          {
            "tooltip": "The LoRA model to apply to the diffusion model."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora",
        "strength_model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "LoraModelLoader",
    "display_name": "Load LoRA Model",
    "description": "Load Trained LoRA weights from Train LoRA node.",
    "python_module": "comfy_extras.nodes_train",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model."
    ],
    "experimental": true
  },
  "LoadImageSetFromFolderNode": {
    "input": {
      "required": {
        "folder": [
          [
            "3d",
            "clipspace"
          ],
          {
            "tooltip": "The folder to load images from."
          }
        ]
      },
      "optional": {
        "resize_method": [
          [
            "None",
            "Stretch",
            "Crop",
            "Pad"
          ],
          {
            "default": "None"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "folder"
      ],
      "optional": [
        "resize_method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "LoadImageSetFromFolderNode",
    "display_name": "Load Image Dataset from Folder",
    "description": "Loads a batch of images from a directory for training.",
    "python_module": "comfy_extras.nodes_train",
    "category": "loaders",
    "output_node": false,
    "experimental": true
  },
  "LoadImageTextSetFromFolderNode": {
    "input": {
      "required": {
        "folder": [
          [
            "3d",
            "clipspace"
          ],
          {
            "tooltip": "The folder to load images from."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      },
      "optional": {
        "resize_method": [
          [
            "None",
            "Stretch",
            "Crop",
            "Pad"
          ],
          {
            "default": "None"
          }
        ],
        "width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 10000,
            "step": 1,
            "tooltip": "The width to resize the images to. -1 means use the original width."
          }
        ],
        "height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 10000,
            "step": 1,
            "tooltip": "The height to resize the images to. -1 means use the original height."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "folder",
        "clip"
      ],
      "optional": [
        "resize_method",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "CONDITIONING"
    ],
    "name": "LoadImageTextSetFromFolderNode",
    "display_name": "Load Image and Text Dataset from Folder",
    "description": "Loads a batch of images and caption from a directory for training.",
    "python_module": "comfy_extras.nodes_train",
    "category": "loaders",
    "output_node": false,
    "experimental": true
  },
  "LossGraphNode": {
    "input": {
      "required": {
        "loss": [
          "LOSS_MAP",
          {
            "default": {

            }
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "loss_graph"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "loss",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LossGraphNode",
    "display_name": "Plot Loss Graph",
    "description": "Plots the loss graph and saves it to the output directory.",
    "python_module": "comfy_extras.nodes_train",
    "category": "training",
    "output_node": true,
    "experimental": true
  },
  "SelfAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -2,
            "max": 5,
            "step": 0.01
          }
        ],
        "blur_sigma": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale",
        "blur_sigma"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "SelfAttentionGuidance",
    "display_name": "Self-Attention Guidance",
    "description": "",
    "python_module": "comfy_extras.nodes_sag",
    "category": "_for_testing",
    "output_node": false
  },
  "PerpNeg": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "empty_conditioning",
        "neg_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "PerpNeg",
    "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false,
    "deprecated": true
  },
  "PerpNegGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "empty_conditioning",
        "cfg",
        "neg_scale"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [false],
    "output_name": [
      "GUIDER"
    ],
    "name": "PerpNegGuider",
    "display_name": "PerpNegGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false
  },
  "StableZero123_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning",
    "display_name": "StableZero123_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "StableZero123_Conditioning_Batched": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 0.1,
            "round": false
          }
        ],
        "elevation_batch_increment": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth_batch_increment": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth",
        "elevation_batch_increment",
        "azimuth_batch_increment"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning_Batched",
    "display_name": "StableZero123_Conditioning_Batched",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SV3D_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0,
            "min": -90,
            "max": 90,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "elevation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_Conditioning",
    "display_name": "SV3D_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SD_4XUpscale_Conditioning": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "scale_ratio": [
          "FLOAT",
          {
            "default": 4,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "positive",
        "negative",
        "scale_ratio",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SD_4XUpscale_Conditioning",
    "display_name": "SD_4XUpscale_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_sdupscale",
    "category": "conditioning/upscale_diffusion",
    "output_node": false
  },
  "PhotoMakerLoader": {
    "input": {
      "required": {
        "photomaker_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker_model_name"
      ]
    },
    "output": [
      "PHOTOMAKER"
    ],
    "output_is_list": [false],
    "output_name": [
      "PHOTOMAKER"
    ],
    "name": "PhotoMakerLoader",
    "display_name": "PhotoMakerLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "PhotoMakerEncode": {
    "input": {
      "required": {
        "photomaker": [
          "PHOTOMAKER"
        ],
        "image": [
          "IMAGE"
        ],
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "photograph of photomaker"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker",
        "image",
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "PhotoMakerEncode",
    "display_name": "PhotoMakerEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "CLIPTextEncodePixArtAlpha": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodePixArtAlpha",
    "display_name": "CLIPTextEncodePixArtAlpha",
    "description": "Encodes text and sets the resolution conditioning for PixArt Alpha. Does not apply to PixArt Sigma.",
    "python_module": "comfy_extras.nodes_pixart",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeControlnet": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "conditioning",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeControlnet",
    "display_name": "CLIPTextEncodeControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_cond",
    "category": "_for_testing/conditioning",
    "output_node": false
  },
  "T5TokenizerOptions": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "min_padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "min_length": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "min_padding",
        "min_length"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "T5TokenizerOptions",
    "display_name": "T5TokenizerOptions",
    "description": "",
    "python_module": "comfy_extras.nodes_cond",
    "category": "_for_testing/conditioning",
    "output_node": false
  },
  "Morphology": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "operation": [
          [
            "erode",
            "dilate",
            "open",
            "close",
            "gradient",
            "bottom_hat",
            "top_hat"
          ]
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 3,
            "max": 999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "operation",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Morphology",
    "display_name": "ImageMorphology",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageRGBToYUV": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "Y",
      "U",
      "V"
    ],
    "name": "ImageRGBToYUV",
    "display_name": "ImageRGBToYUV",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/batch",
    "output_node": false
  },
  "ImageYUVToRGB": {
    "input": {
      "required": {
        "Y": [
          "IMAGE"
        ],
        "U": [
          "IMAGE"
        ],
        "V": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Y",
        "U",
        "V"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageYUVToRGB",
    "display_name": "ImageYUVToRGB",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/batch",
    "output_node": false
  },
  "StableCascade_EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "compression",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_EmptyLatentImage",
    "display_name": "StableCascade_EmptyLatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageB_Conditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "stage_c": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "stage_c"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StableCascade_StageB_Conditioning",
    "display_name": "StableCascade_StageB_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "conditioning/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageC_VAEEncode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae",
        "compression"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_StageC_VAEEncode",
    "display_name": "StableCascade_StageC_VAEEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_SuperResolutionControlnet": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "controlnet_input",
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_SuperResolutionControlnet",
    "display_name": "StableCascade_SuperResolutionControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "_for_testing/stable_cascade",
    "output_node": false,
    "experimental": true
  },
  "DifferentialDiffusion": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "DifferentialDiffusion",
    "display_name": "Differential Diffusion",
    "description": "",
    "python_module": "comfy_extras.nodes_differential_diffusion",
    "category": "_for_testing",
    "output_node": false
  },
  "InstructPixToPixConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InstructPixToPixConditioning",
    "display_name": "InstructPixToPixConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_ip2p",
    "category": "conditioning/instructpix2pix",
    "output_node": false
  },
  "ModelMergeSD1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD1",
    "display_name": "ModelMergeSD1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD2": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD2",
    "display_name": "ModelMergeSD2",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSDXL": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.0": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.3": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.4": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.5": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.6": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.7": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "input_blocks.8": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.0": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "middle_block.2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.0": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.3": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.4": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.5": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.6": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.7": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "output_blocks.8": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0",
        "input_blocks.1",
        "input_blocks.2",
        "input_blocks.3",
        "input_blocks.4",
        "input_blocks.5",
        "input_blocks.6",
        "input_blocks.7",
        "input_blocks.8",
        "middle_block.0",
        "middle_block.1",
        "middle_block.2",
        "output_blocks.0",
        "output_blocks.1",
        "output_blocks.2",
        "output_blocks.3",
        "output_blocks.4",
        "output_blocks.5",
        "output_blocks.6",
        "output_blocks.7",
        "output_blocks.8",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSDXL",
    "display_name": "ModelMergeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD3_2B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD3_2B",
    "display_name": "ModelMergeSD3_2B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeAuraflow": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "init_x_linear.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "positional_encoding": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cond_seq_linear.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "register_tokens": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_layers.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_layers.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_layers.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_layers.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.28.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.29.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.30.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_layers.31.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "modF.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_linear.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "init_x_linear.",
        "positional_encoding",
        "cond_seq_linear.",
        "register_tokens",
        "t_embedder.",
        "double_layers.0.",
        "double_layers.1.",
        "double_layers.2.",
        "double_layers.3.",
        "single_layers.0.",
        "single_layers.1.",
        "single_layers.2.",
        "single_layers.3.",
        "single_layers.4.",
        "single_layers.5.",
        "single_layers.6.",
        "single_layers.7.",
        "single_layers.8.",
        "single_layers.9.",
        "single_layers.10.",
        "single_layers.11.",
        "single_layers.12.",
        "single_layers.13.",
        "single_layers.14.",
        "single_layers.15.",
        "single_layers.16.",
        "single_layers.17.",
        "single_layers.18.",
        "single_layers.19.",
        "single_layers.20.",
        "single_layers.21.",
        "single_layers.22.",
        "single_layers.23.",
        "single_layers.24.",
        "single_layers.25.",
        "single_layers.26.",
        "single_layers.27.",
        "single_layers.28.",
        "single_layers.29.",
        "single_layers.30.",
        "single_layers.31.",
        "modF.",
        "final_linear."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAuraflow",
    "display_name": "ModelMergeAuraflow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeFlux1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "img_in.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "time_in.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "guidance_in": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "vector_in.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "txt_in.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "img_in.",
        "time_in.",
        "guidance_in",
        "vector_in.",
        "txt_in.",
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeFlux1",
    "display_name": "ModelMergeFlux1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD35_Large": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.28.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.29.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.30.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.31.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.32.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.33.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.34.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.35.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.36.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "joint_blocks.37.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "joint_blocks.24.",
        "joint_blocks.25.",
        "joint_blocks.26.",
        "joint_blocks.27.",
        "joint_blocks.28.",
        "joint_blocks.29.",
        "joint_blocks.30.",
        "joint_blocks.31.",
        "joint_blocks.32.",
        "joint_blocks.33.",
        "joint_blocks.34.",
        "joint_blocks.35.",
        "joint_blocks.36.",
        "joint_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD35_Large",
    "display_name": "ModelMergeSD35_Large",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeMochiPreview": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_frequencies.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t5_y_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t5_yproj.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.40.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.41.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.42.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.43.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.44.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.45.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.46.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.47.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_frequencies.",
        "t_embedder.",
        "t5_y_embedder.",
        "t5_yproj.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39.",
        "blocks.40.",
        "blocks.41.",
        "blocks.42.",
        "blocks.43.",
        "blocks.44.",
        "blocks.45.",
        "blocks.46.",
        "blocks.47.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeMochiPreview",
    "display_name": "ModelMergeMochiPreview",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeLTXV": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "patchify_proj.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "adaln_single.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "caption_projection.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "transformer_blocks.27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "scale_shift_table": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "proj_out.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "patchify_proj.",
        "adaln_single.",
        "caption_projection.",
        "transformer_blocks.0.",
        "transformer_blocks.1.",
        "transformer_blocks.2.",
        "transformer_blocks.3.",
        "transformer_blocks.4.",
        "transformer_blocks.5.",
        "transformer_blocks.6.",
        "transformer_blocks.7.",
        "transformer_blocks.8.",
        "transformer_blocks.9.",
        "transformer_blocks.10.",
        "transformer_blocks.11.",
        "transformer_blocks.12.",
        "transformer_blocks.13.",
        "transformer_blocks.14.",
        "transformer_blocks.15.",
        "transformer_blocks.16.",
        "transformer_blocks.17.",
        "transformer_blocks.18.",
        "transformer_blocks.19.",
        "transformer_blocks.20.",
        "transformer_blocks.21.",
        "transformer_blocks.22.",
        "transformer_blocks.23.",
        "transformer_blocks.24.",
        "transformer_blocks.25.",
        "transformer_blocks.26.",
        "transformer_blocks.27.",
        "scale_shift_table",
        "proj_out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeLTXV",
    "display_name": "ModelMergeLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmos7B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "extra_pos_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "affline_norm.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "extra_pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "affline_norm.",
        "blocks.block0.",
        "blocks.block1.",
        "blocks.block2.",
        "blocks.block3.",
        "blocks.block4.",
        "blocks.block5.",
        "blocks.block6.",
        "blocks.block7.",
        "blocks.block8.",
        "blocks.block9.",
        "blocks.block10.",
        "blocks.block11.",
        "blocks.block12.",
        "blocks.block13.",
        "blocks.block14.",
        "blocks.block15.",
        "blocks.block16.",
        "blocks.block17.",
        "blocks.block18.",
        "blocks.block19.",
        "blocks.block20.",
        "blocks.block21.",
        "blocks.block22.",
        "blocks.block23.",
        "blocks.block24.",
        "blocks.block25.",
        "blocks.block26.",
        "blocks.block27.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmos7B",
    "display_name": "ModelMergeCosmos7B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmos14B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "extra_pos_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "affline_norm.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block28.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block29.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block30.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block31.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block32.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block33.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block34.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.block35.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "extra_pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "affline_norm.",
        "blocks.block0.",
        "blocks.block1.",
        "blocks.block2.",
        "blocks.block3.",
        "blocks.block4.",
        "blocks.block5.",
        "blocks.block6.",
        "blocks.block7.",
        "blocks.block8.",
        "blocks.block9.",
        "blocks.block10.",
        "blocks.block11.",
        "blocks.block12.",
        "blocks.block13.",
        "blocks.block14.",
        "blocks.block15.",
        "blocks.block16.",
        "blocks.block17.",
        "blocks.block18.",
        "blocks.block19.",
        "blocks.block20.",
        "blocks.block21.",
        "blocks.block22.",
        "blocks.block23.",
        "blocks.block24.",
        "blocks.block25.",
        "blocks.block26.",
        "blocks.block27.",
        "blocks.block28.",
        "blocks.block29.",
        "blocks.block30.",
        "blocks.block31.",
        "blocks.block32.",
        "blocks.block33.",
        "blocks.block34.",
        "blocks.block35.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmos14B",
    "display_name": "ModelMergeCosmos14B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeWAN2_1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "patch_embedding.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "time_embedding.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "time_projection.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "text_embedding.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "img_emb.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "head.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "patch_embedding.",
        "time_embedding.",
        "time_projection.",
        "text_embedding.",
        "img_emb.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39.",
        "head."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeWAN2_1",
    "display_name": "ModelMergeWAN2_1",
    "description": "1.3B model has 30 blocks, 14B model has 40 blocks. Image to video model has the extra img_emb.",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmosPredict2_2B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedding_norm.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "t_embedding_norm.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmosPredict2_2B",
    "display_name": "ModelMergeCosmosPredict2_2B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmosPredict2_14B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "t_embedding_norm.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "t_embedding_norm.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmosPredict2_14B",
    "display_name": "ModelMergeCosmosPredict2_14B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "PerturbedAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "PerturbedAttentionGuidance",
    "display_name": "PerturbedAttentionGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_pag",
    "category": "model_patches/unet",
    "output_node": false
  },
  "AlignYourStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "SD1",
            "SDXL",
            "SVD"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "AlignYourStepsScheduler",
    "display_name": "AlignYourStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_align_your_steps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "UNetSelfAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetSelfAttentionMultiply",
    "display_name": "UNetSelfAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetCrossAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetCrossAttentionMultiply",
    "display_name": "UNetCrossAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "CLIPAttentionMultiply": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPAttentionMultiply",
    "display_name": "CLIPAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetTemporalAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "self_structural": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "self_temporal": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "cross_structural": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "cross_temporal": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "self_structural",
        "self_temporal",
        "cross_structural",
        "cross_temporal"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetTemporalAttentionMultiply",
    "display_name": "UNetTemporalAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "SamplerLCMUpscale": {
    "input": {
      "required": {
        "scale_ratio": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 20,
            "step": 0.01
          }
        ],
        "scale_steps": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1000,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "bislerp",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_ratio",
        "scale_steps",
        "upscale_method"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLCMUpscale",
    "display_name": "SamplerLCMUpscale",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerCFGpp": {
    "input": {
      "required": {
        "version": [
          [
            "regular",
            "alternative"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "version"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerCFGpp",
    "display_name": "SamplerEulerCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "_for_testing",
    "output_node": false
  },
  "WebcamCapture": {
    "input": {
      "required": {
        "image": [
          "WEBCAM",
          {

          }
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "capture_on_queue": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "capture_on_queue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "WebcamCapture",
    "display_name": "Webcam Capture",
    "description": "",
    "python_module": "comfy_extras.nodes_webcam",
    "category": "image",
    "output_node": false
  },
  "EmptyLatentAudio": {
    "input": {
      "required": {
        "seconds": [
          "FLOAT",
          {
            "default": 47.6,
            "min": 1,
            "max": 1000,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seconds",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentAudio",
    "display_name": "Empty Latent Audio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEEncodeAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeAudio",
    "display_name": "VAE Encode Audio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEDecodeAudio": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "AUDIO"
    ],
    "name": "VAEDecodeAudio",
    "display_name": "VAE Decode Audio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "SaveAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "audio/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAudio",
    "display_name": "Save Audio (FLAC)",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "SaveAudioMP3": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "audio/ComfyUI"
          }
        ],
        "quality": [
          [
            "V0",
            "128k",
            "320k"
          ],
          {
            "default": "V0"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "filename_prefix",
        "quality"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAudioMP3",
    "display_name": "Save Audio (MP3)",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "SaveAudioOpus": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "audio/ComfyUI"
          }
        ],
        "quality": [
          [
            "64k",
            "96k",
            "128k",
            "192k",
            "320k"
          ],
          {
            "default": "128k"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "filename_prefix",
        "quality"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAudioOpus",
    "display_name": "Save Audio (Opus)",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "LoadAudio": {
    "input": {
      "required": {
        "audio": [
          [],
          {
            "audio_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "AUDIO"
    ],
    "name": "LoadAudio",
    "display_name": "Load Audio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": false
  },
  "PreviewAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAudio",
    "display_name": "Preview Audio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "ConditioningStableAudio": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seconds_start": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.1
          }
        ],
        "seconds_total": [
          "FLOAT",
          {
            "default": 47,
            "min": 0,
            "max": 1000,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "seconds_start",
        "seconds_total"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ConditioningStableAudio",
    "display_name": "ConditioningStableAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "conditioning",
    "output_node": false
  },
  "TripleCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "clip_name3": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "TripleCLIPLoader",
    "display_name": "TripleCLIPLoader",
    "description": "[Recipes]\n\nsd3: clip-l, clip-g, t5",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/loaders",
    "output_node": false
  },
  "EmptySD3LatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptySD3LatentImage",
    "display_name": "EmptySD3LatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "latent/sd3",
    "output_node": false
  },
  "CLIPTextEncodeSD3": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "empty_padding": [
          [
            "none",
            "empty_prompt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "clip_g",
        "t5xxl",
        "empty_padding"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSD3",
    "display_name": "CLIPTextEncodeSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ControlNetApplySD3": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplySD3",
    "display_name": "Apply Controlnet with VAE",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "SkipLayerGuidanceSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3,
            "min": 0,
            "max": 10,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "layers",
        "scale",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceSD3",
    "display_name": "SkipLayerGuidanceSD3",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "GITSScheduler": {
    "input": {
      "required": {
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coeff",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "GITSScheduler",
    "display_name": "GITSScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_gits",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SetUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/anime_lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "repaint"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetUnionControlNetType",
    "display_name": "SetUnionControlNetType",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetInpaintingAliMamaApply": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "mask",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetInpaintingAliMamaApply",
    "display_name": "ControlNetInpaintingAliMamaApply",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "CLIPTextEncodeHunyuanDiT": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "bert": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "mt5xl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "bert",
        "mt5xl"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeHunyuanDiT",
    "display_name": "CLIPTextEncodeHunyuanDiT",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "TextEncodeHunyuanVideo_ImageToVideo": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "image_interleave": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 512,
            "tooltip": "How much the image influences things vs the text prompt. Higher number means more influence from the text prompt."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_vision_output",
        "prompt",
        "image_interleave"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TextEncodeHunyuanVideo_ImageToVideo",
    "display_name": "TextEncodeHunyuanVideo_ImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "EmptyHunyuanLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyHunyuanLatentVideo",
    "display_name": "EmptyHunyuanLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "latent/video",
    "output_node": false
  },
  "HunyuanImageToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 53,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "guidance_type": [
          [
            "v1 (concat)",
            "v2 (replace)",
            "custom"
          ]
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "vae",
        "width",
        "height",
        "length",
        "batch_size",
        "guidance_type"
      ],
      "optional": [
        "start_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "latent"
    ],
    "name": "HunyuanImageToVideo",
    "display_name": "HunyuanImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "CLIPTextEncodeFlux": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "t5xxl",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeFlux",
    "display_name": "CLIPTextEncodeFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxGuidance",
    "display_name": "FluxGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxDisableGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxDisableGuidance",
    "display_name": "FluxDisableGuidance",
    "description": "This node completely disables the guidance embed on Flux and Flux like models",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxKontextImageScale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FluxKontextImageScale",
    "display_name": "FluxKontextImageScale",
    "description": "This node resizes the image to one that is more optimal for flux kontext.",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "LoraSave": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "loras/ComfyUI_extracted_lora"
          }
        ],
        "rank": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "lora_type": [
          [
            "standard",
            "full_diff"
          ]
        ],
        "bias_diff": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "model_diff": [
          "MODEL",
          {
            "tooltip": "The ModelSubtract output to be converted to a lora."
          }
        ],
        "text_encoder_diff": [
          "CLIP",
          {
            "tooltip": "The CLIPSubtract output to be converted to a lora."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix",
        "rank",
        "lora_type",
        "bias_diff"
      ],
      "optional": [
        "model_diff",
        "text_encoder_diff"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LoraSave",
    "display_name": "Extract and Save Lora",
    "description": "",
    "python_module": "comfy_extras.nodes_lora_extract",
    "category": "_for_testing",
    "output_node": true
  },
  "TorchCompileModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModel",
    "display_name": "TorchCompileModel",
    "description": "",
    "python_module": "comfy_extras.nodes_torch_compile",
    "category": "_for_testing",
    "output_node": false,
    "experimental": true
  },
  "EmptyMochiLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 7,
            "max": 16384,
            "step": 6
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyMochiLatentVideo",
    "display_name": "EmptyMochiLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_mochi",
    "category": "latent/video",
    "output_node": false
  },
  "SkipLayerGuidanceDiT": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "double_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "single_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3,
            "min": 0,
            "max": 10,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "rescaling_scale": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "double_layers",
        "single_layers",
        "scale",
        "start_percent",
        "end_percent",
        "rescaling_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceDiT",
    "display_name": "SkipLayerGuidanceDiT",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_slg",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "SkipLayerGuidanceDiTSimple": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "double_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "single_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "double_layers",
        "single_layers",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceDiTSimple",
    "display_name": "SkipLayerGuidanceDiTSimple",
    "description": "Simple version of the SkipLayerGuidanceDiT node that only modifies the uncond pass.",
    "python_module": "comfy_extras.nodes_slg",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "Mahiro": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "patched_model"
    ],
    "name": "Mahiro",
    "display_name": "Mahiro is so cute that she deserves a better guidance function!! (。・ω・。)",
    "description": "Modify the guidance to scale more on the 'direction' of the positive prompt rather than the difference between the negative prompt.",
    "python_module": "comfy_extras.nodes_mahiro",
    "category": "_for_testing",
    "output_node": false
  },
  "EmptyLTXVLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLTXVLatentVideo",
    "display_name": "EmptyLTXVLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "latent/video/ltxv",
    "output_node": false
  },
  "LTXVImgToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 9,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "image",
        "width",
        "height",
        "length",
        "batch_size",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVImgToVideo",
    "display_name": "LTXVImgToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "ModelSamplingLTXV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingLTXV",
    "display_name": "ModelSamplingLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "advanced/model",
    "output_node": false
  },
  "LTXVConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "frame_rate": [
          "FLOAT",
          {
            "default": 25,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "frame_rate"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "LTXVConditioning",
    "display_name": "LTXVConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "stretch": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Stretch the sigmas to be in the range [terminal, 1]."
          }
        ],
        "terminal": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 0.99,
            "step": 0.01,
            "tooltip": "The terminal value of the sigmas after stretching."
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "max_shift",
        "base_shift",
        "stretch",
        "terminal"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LTXVScheduler",
    "display_name": "LTXVScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LTXVAddGuide": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "latent": [
          "LATENT"
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "Image or video to condition the latent video on. Must be 8*n + 1 frames.If the video is not 8*n + 1 frames, it will be cropped to the nearest 8*n + 1 frames."
          }
        ],
        "frame_idx": [
          "INT",
          {
            "default": 0,
            "min": -9999,
            "max": 9999,
            "tooltip": "Frame index to start the conditioning at. For single-frame images or videos with 1-8 frames, any frame_idx value is acceptable. For videos with 9+ frames, frame_idx must be divisible by 8, otherwise it will be rounded down to the nearest multiple of 8. Negative values are counted from the end of the video."
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "latent",
        "image",
        "frame_idx",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVAddGuide",
    "display_name": "LTXVAddGuide",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVPreprocess": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "img_compression": [
          "INT",
          {
            "default": 35,
            "min": 0,
            "max": 100,
            "tooltip": "Amount of compression to apply on image."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "img_compression"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "output_image"
    ],
    "name": "LTXVPreprocess",
    "display_name": "LTXVPreprocess",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "image",
    "output_node": false
  },
  "LTXVCropGuides": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "latent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVCropGuides",
    "display_name": "LTXVCropGuides",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "CreateHookLora": {
    "input": {
      "required": {
        "lora_name": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLora",
    "display_name": "Create Hook LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookLoraModelOnly": {
    "input": {
      "required": {
        "lora_name": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLoraModelOnly",
    "display_name": "Create Hook LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLora": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLora",
    "display_name": "Create Hook Model as LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLoraModelOnly": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLoraModelOnly",
    "display_name": "Create Hook Model as LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "SetHookKeyframes": {
    "input": {
      "required": {
        "hooks": [
          "HOOKS"
        ]
      },
      "optional": {
        "hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "hooks"
      ],
      "optional": [
        "hook_kf"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOKS"
    ],
    "name": "SetHookKeyframes",
    "display_name": "Set Hook Keyframes",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframe": {
    "input": {
      "required": {
        "strength_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_mult",
        "start_percent"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframe",
    "display_name": "Create Hook Keyframe",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesInterpolated": {
    "input": {
      "required": {
        "strength_start": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "strength_end": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "keyframes_count": [
          "INT",
          {
            "default": 5,
            "min": 2,
            "max": 100,
            "step": 1
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_start",
        "strength_end",
        "interpolation",
        "start_percent",
        "end_percent",
        "keyframes_count",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesInterpolated",
    "display_name": "Create Hook Keyframes Interp.",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesFromFloats": {
    "input": {
      "required": {
        "floats_strength": [
          "FLOATS",
          {
            "default": -1,
            "min": -1,
            "step": 0.001,
            "forceInput": true
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats_strength",
        "start_percent",
        "end_percent",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesFromFloats",
    "display_name": "Create Hook Keyframes From Floats",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks2": {
    "input": {
      "required": {

      },
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks2",
    "display_name": "Combine Hooks [2]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks4": {
    "input": {
      "required": {

      },
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks4",
    "display_name": "Combine Hooks [4]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks8": {
    "input": {
      "required": {

      },
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ],
        "hooks_E": [
          "HOOKS"
        ],
        "hooks_F": [
          "HOOKS"
        ],
        "hooks_G": [
          "HOOKS"
        ],
        "hooks_H": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D",
        "hooks_E",
        "hooks_F",
        "hooks_G",
        "hooks_H"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks8",
    "display_name": "Combine Hooks [8]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetProperties": {
    "input": {
      "required": {
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetProperties",
    "display_name": "Cond Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetPropertiesAndCombine",
    "display_name": "Cond Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetProperties": {
    "input": {
      "required": {
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetProperties",
    "display_name": "Cond Pair Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetPropertiesAndCombine",
    "display_name": "Cond Pair Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetDefaultCombine",
    "display_name": "Cond Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_DEFAULT": [
          "CONDITIONING"
        ],
        "negative_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_DEFAULT",
        "negative_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetDefaultCombine",
    "display_name": "Cond Pair Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningCombine": {
    "input": {
      "required": {
        "positive_A": [
          "CONDITIONING"
        ],
        "negative_A": [
          "CONDITIONING"
        ],
        "positive_B": [
          "CONDITIONING"
        ],
        "negative_B": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_A",
        "negative_A",
        "positive_B",
        "negative_B"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningCombine",
    "display_name": "Cond Pair Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "SetClipHooks": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_conds": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "schedule_clip": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_conds",
        "schedule_clip"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "SetClipHooks",
    "display_name": "Set CLIP Hooks",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/clip",
    "output_node": false,
    "experimental": true
  },
  "ConditioningTimestepsRange": {
    "input": {
      "required": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "TIMESTEPS_RANGE",
      "BEFORE_RANGE",
      "AFTER_RANGE"
    ],
    "name": "ConditioningTimestepsRange",
    "display_name": "Timesteps Range",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks",
    "output_node": false,
    "experimental": true
  },
  "Load3D": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D",
          {

          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "IMAGE",
      "IMAGE",
      "LOAD3D_CAMERA",
      "VIDEO"
    ],
    "output_is_list": [false, false, false, false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "mesh_path",
      "normal",
      "lineart",
      "camera_info",
      "recording_video"
    ],
    "name": "Load3D",
    "display_name": "Load 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Load3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D_ANIMATION",
          {

          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "IMAGE",
      "LOAD3D_CAMERA",
      "VIDEO"
    ],
    "output_is_list": [false, false, false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "mesh_path",
      "normal",
      "camera_info",
      "recording_video"
    ],
    "name": "Load3DAnimation",
    "display_name": "Load 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Preview3D": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "camera_info": [
          "LOAD3D_CAMERA",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file"
      ],
      "optional": [
        "camera_info"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3D",
    "display_name": "Preview 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "Preview3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "camera_info": [
          "LOAD3D_CAMERA",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file"
      ],
      "optional": [
        "camera_info"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3DAnimation",
    "display_name": "Preview 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "EmptyCosmosLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyCosmosLatentVideo",
    "display_name": "EmptyCosmosLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "latent/video",
    "output_node": false
  },
  "CosmosImageToVideoLatent": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "CosmosImageToVideoLatent",
    "display_name": "CosmosImageToVideoLatent",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "CosmosPredict2ImageToVideoLatent": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 93,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "CosmosPredict2ImageToVideoLatent",
    "display_name": "CosmosPredict2ImageToVideoLatent",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "SaveWEBM": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "codec": [
          [
            "vp9",
            "av1"
          ]
        ],
        "fps": [
          "FLOAT",
          {
            "default": 24,
            "min": 0.01,
            "max": 1000,
            "step": 0.01
          }
        ],
        "crf": [
          "FLOAT",
          {
            "default": 32,
            "min": 0,
            "max": 63,
            "step": 1,
            "tooltip": "Higher crf means lower quality with a smaller file size, lower crf means higher quality higher filesize."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "codec",
        "fps",
        "crf"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveWEBM",
    "display_name": "SaveWEBM",
    "description": "",
    "python_module": "comfy_extras.nodes_video",
    "category": "image/video",
    "output_node": true,
    "experimental": true
  },
  "SaveVideo": {
    "input": {
      "required": {
        "video": [
          "VIDEO",
          {
            "tooltip": "The video to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "video/ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ],
        "format": [
          [
            "auto",
            "mp4"
          ],
          {
            "default": "auto",
            "tooltip": "The format to save the video as."
          }
        ],
        "codec": [
          [
            "auto",
            "h264"
          ],
          {
            "default": "auto",
            "tooltip": "The codec to use for the video."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "video",
        "filename_prefix",
        "format",
        "codec"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveVideo",
    "display_name": "Save Video",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "comfy_extras.nodes_video",
    "category": "image/video",
    "output_node": true
  },
  "CreateVideo": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to create a video from."
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 30,
            "min": 1,
            "max": 120,
            "step": 1
          }
        ]
      },
      "optional": {
        "audio": [
          "AUDIO",
          {
            "tooltip": "The audio to add to the video."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "fps"
      ],
      "optional": [
        "audio"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "CreateVideo",
    "display_name": "Create Video",
    "description": "Create a video from images.",
    "python_module": "comfy_extras.nodes_video",
    "category": "image/video",
    "output_node": false
  },
  "GetVideoComponents": {
    "input": {
      "required": {
        "video": [
          "VIDEO",
          {
            "tooltip": "The video to extract components from."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "video"
      ]
    },
    "output": [
      "IMAGE",
      "AUDIO",
      "FLOAT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "images",
      "audio",
      "fps"
    ],
    "name": "GetVideoComponents",
    "display_name": "Get Video Components",
    "description": "Extracts all components from a video: frames, audio, and framerate.",
    "python_module": "comfy_extras.nodes_video",
    "category": "image/video",
    "output_node": false
  },
  "LoadVideo": {
    "input": {
      "required": {
        "file": [
          [],
          {
            "video_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "LoadVideo",
    "display_name": "Load Video",
    "description": "",
    "python_module": "comfy_extras.nodes_video",
    "category": "image/video",
    "output_node": false
  },
  "CLIPTextEncodeLumina2": {
    "input": {
      "required": {
        "system_prompt": [
          [
            "superior",
            "alignment"
          ],
          {
            "tooltip": "Lumina2 provide two types of system prompts:Superior: You are an assistant designed to generate superior images with the superior degree of image-text alignment based on textual prompts or user prompts. Alignment: You are an assistant designed to generate high-quality images with the highest degree of image-text alignment based on textual prompts."
          }
        ],
        "user_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "system_prompt",
        "user_prompt",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeLumina2",
    "display_name": "CLIP Text Encode for Lumina2",
    "description": "Encodes a system prompt and a user prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "comfy_extras.nodes_lumina2",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "RenormCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cfg_trunc": [
          "FLOAT",
          {
            "default": 100,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "renorm_cfg": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cfg_trunc",
        "renorm_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "RenormCFG",
    "display_name": "RenormCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_lumina2",
    "category": "advanced/model",
    "output_node": false
  },
  "WanImageToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanImageToVideo",
    "display_name": "WanImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanFunControlToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "control_video": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image",
        "control_video"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanFunControlToVideo",
    "display_name": "WanFunControlToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanFunInpaintToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanFunInpaintToVideo",
    "display_name": "WanFunInpaintToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanFirstLastFrameToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_start_image": [
          "CLIP_VISION_OUTPUT"
        ],
        "clip_vision_end_image": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_start_image",
        "clip_vision_end_image",
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanFirstLastFrameToVideo",
    "display_name": "WanFirstLastFrameToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanVaceToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "control_video": [
          "IMAGE"
        ],
        "control_masks": [
          "MASK"
        ],
        "reference_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size",
        "strength"
      ],
      "optional": [
        "control_video",
        "control_masks",
        "reference_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent",
      "trim_latent"
    ],
    "name": "WanVaceToVideo",
    "display_name": "WanVaceToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false,
    "experimental": true
  },
  "TrimVideoLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "trim_amount": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "trim_amount"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "TrimVideoLatent",
    "display_name": "TrimVideoLatent",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "latent/video",
    "output_node": false,
    "experimental": true
  },
  "WanCameraImageToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "camera_conditions": [
          "WAN_CAMERA_EMBEDDING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image",
        "camera_conditions"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanCameraImageToVideo",
    "display_name": "WanCameraImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanPhantomSubjectToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "images"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "positive",
      "negative_text",
      "negative_img_text",
      "latent"
    ],
    "name": "WanPhantomSubjectToVideo",
    "display_name": "WanPhantomSubjectToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LotusConditioning": {
    "input": {
      "required": {

      }
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "conditioning"
    ],
    "name": "LotusConditioning",
    "display_name": "LotusConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_lotus",
    "category": "conditioning/lotus",
    "output_node": false
  },
  "EmptyLatentHunyuan3Dv2": {
    "input": {
      "required": {
        "resolution": [
          "INT",
          {
            "default": 3072,
            "min": 1,
            "max": 8192
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentHunyuan3Dv2",
    "display_name": "EmptyLatentHunyuan3Dv2",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "latent/3d",
    "output_node": false
  },
  "Hunyuan3Dv2Conditioning": {
    "input": {
      "required": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision_output"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "Hunyuan3Dv2Conditioning",
    "display_name": "Hunyuan3Dv2Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "Hunyuan3Dv2ConditioningMultiView": {
    "input": {
      "required": {

      },
      "optional": {
        "front": [
          "CLIP_VISION_OUTPUT"
        ],
        "left": [
          "CLIP_VISION_OUTPUT"
        ],
        "back": [
          "CLIP_VISION_OUTPUT"
        ],
        "right": [
          "CLIP_VISION_OUTPUT"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "front",
        "left",
        "back",
        "right"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "Hunyuan3Dv2ConditioningMultiView",
    "display_name": "Hunyuan3Dv2ConditioningMultiView",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VAEDecodeHunyuan3D": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "num_chunks": [
          "INT",
          {
            "default": 8000,
            "min": 1000,
            "max": 500000
          }
        ],
        "octree_resolution": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 512
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "num_chunks",
        "octree_resolution"
      ]
    },
    "output": [
      "VOXEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "VOXEL"
    ],
    "name": "VAEDecodeHunyuan3D",
    "display_name": "VAEDecodeHunyuan3D",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "latent/3d",
    "output_node": false
  },
  "VoxelToMeshBasic": {
    "input": {
      "required": {
        "voxel": [
          "VOXEL"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.6,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "voxel",
        "threshold"
      ]
    },
    "output": [
      "MESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "MESH"
    ],
    "name": "VoxelToMeshBasic",
    "display_name": "VoxelToMeshBasic",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": false
  },
  "VoxelToMesh": {
    "input": {
      "required": {
        "voxel": [
          "VOXEL"
        ],
        "algorithm": [
          [
            "surface net",
            "basic"
          ]
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.6,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "voxel",
        "algorithm",
        "threshold"
      ]
    },
    "output": [
      "MESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "MESH"
    ],
    "name": "VoxelToMesh",
    "display_name": "VoxelToMesh",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": false
  },
  "SaveGLB": {
    "input": {
      "required": {
        "mesh": [
          "MESH"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "mesh/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mesh",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveGLB",
    "display_name": "SaveGLB",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": true
  },
  "PrimitiveString": {
    "input": {
      "required": {
        "value": [
          "STRING",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "PrimitiveString",
    "display_name": "String",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveStringMultiline": {
    "input": {
      "required": {
        "value": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "PrimitiveStringMultiline",
    "display_name": "String (Multiline)",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveInt": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "min": -9.223372036854776e+18,
            "max": 9.223372036854776e+18,
            "control_after_generate": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "PrimitiveInt",
    "display_name": "Int",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveFloat": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "min": -9.223372036854776e+18,
            "max": 9.223372036854776e+18
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "PrimitiveFloat",
    "display_name": "Float",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveBoolean": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "PrimitiveBoolean",
    "display_name": "Boolean",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "CFGZeroStar": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "patched_model"
    ],
    "name": "CFGZeroStar",
    "display_name": "CFGZeroStar",
    "description": "",
    "python_module": "comfy_extras.nodes_cfg",
    "category": "advanced/guidance",
    "output_node": false
  },
  "CFGNorm": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "patched_model"
    ],
    "name": "CFGNorm",
    "display_name": "CFGNorm",
    "description": "",
    "python_module": "comfy_extras.nodes_cfg",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "OptimalStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "FLUX",
            "Wan",
            "Chroma"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 3,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "OptimalStepsScheduler",
    "display_name": "OptimalStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_optimalsteps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "QuadrupleCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "clip_name3": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "clip_name4": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3",
        "clip_name4"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "QuadrupleCLIPLoader",
    "display_name": "QuadrupleCLIPLoader",
    "description": "[Recipes]\n\nhidream: long clip-l, long clip-g, t5xxl, llama_8b_3.1_instruct",
    "python_module": "comfy_extras.nodes_hidream",
    "category": "advanced/loaders",
    "output_node": false
  },
  "CLIPTextEncodeHiDream": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "llama": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "clip_g",
        "t5xxl",
        "llama"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeHiDream",
    "display_name": "CLIPTextEncodeHiDream",
    "description": "",
    "python_module": "comfy_extras.nodes_hidream",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "FreSca": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale_low": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "tooltip": "Scaling factor for low-frequency components"
          }
        ],
        "scale_high": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "tooltip": "Scaling factor for high-frequency components"
          }
        ],
        "freq_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1,
            "tooltip": "Number of frequency indices around center to consider as low-frequency"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale_low",
        "scale_high",
        "freq_cutoff"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "FreSca",
    "display_name": "FreSca",
    "description": "Applies frequency-dependent scaling to the guidance",
    "python_module": "comfy_extras.nodes_fresca",
    "category": "_for_testing",
    "output_node": false
  },
  "APG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01,
            "tooltip": "Controls the scale of the parallel guidance vector. Default CFG behavior at a setting of 1."
          }
        ],
        "norm_threshold": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 50,
            "step": 0.1,
            "tooltip": "Normalize guidance vector to this value, normalization disable at a setting of 0."
          }
        ],
        "momentum": [
          "FLOAT",
          {
            "default": 0,
            "min": -5,
            "max": 1,
            "step": 0.01,
            "tooltip": "Controls a running average of guidance during diffusion, disabled at a setting of 0."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "eta",
        "norm_threshold",
        "momentum"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "APG",
    "display_name": "Adaptive Projected Guidance",
    "description": "",
    "python_module": "comfy_extras.nodes_apg",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "PreviewAny": {
    "input": {
      "required": {
        "source": [
          "*",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAny",
    "display_name": "Preview Any",
    "description": "",
    "python_module": "comfy_extras.nodes_preview_any",
    "category": "utils",
    "output_node": true
  },
  "TextEncodeAceStepAudio": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "tags": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "lyrics": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "lyrics_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "tags",
        "lyrics",
        "lyrics_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TextEncodeAceStepAudio",
    "display_name": "TextEncodeAceStepAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_ace",
    "category": "conditioning",
    "output_node": false
  },
  "EmptyAceStepLatentAudio": {
    "input": {
      "required": {
        "seconds": [
          "FLOAT",
          {
            "default": 120,
            "min": 1,
            "max": 1000,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seconds",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyAceStepLatentAudio",
    "display_name": "EmptyAceStepLatentAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_ace",
    "category": "latent/audio",
    "output_node": false
  },
  "StringConcatenate": {
    "input": {
      "required": {
        "string_a": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "string_b": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string_a",
        "string_b",
        "delimiter"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "StringConcatenate",
    "display_name": "Concatenate",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "StringSubstring": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "start": [
          "INT",
          {

          }
        ],
        "end": [
          "INT",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "start",
        "end"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "StringSubstring",
    "display_name": "Substring",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "StringLength": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "length"
    ],
    "name": "StringLength",
    "display_name": "Length",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "CaseConverter": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "mode": [
          "COMBO",
          {
            "options": [
              "UPPERCASE",
              "lowercase",
              "Capitalize",
              "Title Case"
            ]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "mode"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "CaseConverter",
    "display_name": "Case Converter",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "StringTrim": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "mode": [
          "COMBO",
          {
            "options": [
              "Both",
              "Left",
              "Right"
            ]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "mode"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "StringTrim",
    "display_name": "Trim",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "StringReplace": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "find": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "replace": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "StringReplace",
    "display_name": "Replace",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "StringContains": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "substring": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "case_sensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "substring",
        "case_sensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "contains"
    ],
    "name": "StringContains",
    "display_name": "Contains",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "StringCompare": {
    "input": {
      "required": {
        "string_a": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "string_b": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "mode": [
          "COMBO",
          {
            "options": [
              "Starts With",
              "Ends With",
              "Equal"
            ]
          }
        ],
        "case_sensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string_a",
        "string_b",
        "mode",
        "case_sensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "StringCompare",
    "display_name": "Compare",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "RegexMatch": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "regex_pattern": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "case_insensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "multiline": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dotall": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "regex_pattern",
        "case_insensitive",
        "multiline",
        "dotall"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "matches"
    ],
    "name": "RegexMatch",
    "display_name": "Regex Match",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "RegexExtract": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "regex_pattern": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "mode": [
          "COMBO",
          {
            "options": [
              "First Match",
              "All Matches",
              "First Group",
              "All Groups"
            ]
          }
        ],
        "case_insensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "multiline": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dotall": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "group_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "regex_pattern",
        "mode",
        "case_insensitive",
        "multiline",
        "dotall",
        "group_index"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "RegexExtract",
    "display_name": "Regex Extract",
    "description": "",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "RegexReplace": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "regex_pattern": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "replace": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "optional": {
        "case_insensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "multiline": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dotall": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "When enabled, the dot (.) character will match any character including newline characters. When disabled, dots won't match newlines."
          }
        ],
        "count": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "tooltip": "Maximum number of replacements to make. Set to 0 to replace all occurrences (default). Set to 1 to replace only the first match, 2 for the first two matches, etc."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "regex_pattern",
        "replace"
      ],
      "optional": [
        "case_insensitive",
        "multiline",
        "dotall",
        "count"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "RegexReplace",
    "display_name": "Regex Replace",
    "description": "Find and replace text using regex patterns.",
    "python_module": "comfy_extras.nodes_string",
    "category": "utils/string",
    "output_node": false
  },
  "WanCameraEmbedding": {
    "input": {
      "required": {
        "camera_pose": [
          [
            "Static",
            "Pan Up",
            "Pan Down",
            "Pan Left",
            "Pan Right",
            "Zoom In",
            "Zoom Out",
            "Anti Clockwise (ACW)",
            "ClockWise (CW)"
          ],
          {
            "default": "Static"
          }
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ]
      },
      "optional": {
        "speed": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.1
          }
        ],
        "fx": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 1e-9
          }
        ],
        "fy": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 1e-9
          }
        ],
        "cx": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cy": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_pose",
        "width",
        "height",
        "length"
      ],
      "optional": [
        "speed",
        "fx",
        "fy",
        "cx",
        "cy"
      ]
    },
    "output": [
      "WAN_CAMERA_EMBEDDING",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "camera_embedding",
      "width",
      "height",
      "length"
    ],
    "name": "WanCameraEmbedding",
    "display_name": "WanCameraEmbedding",
    "description": "",
    "python_module": "comfy_extras.nodes_camera_trajectory",
    "category": "camera",
    "output_node": false
  },
  "ReferenceLatent": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ReferenceLatent",
    "display_name": "ReferenceLatent",
    "description": "This node sets the guiding latent for an edit model. If the model supports it you can chain multiple to set multiple reference images.",
    "python_module": "comfy_extras.nodes_edit_model",
    "category": "advanced/conditioning/edit_models",
    "output_node": false
  },
  "TCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "patched_model"
    ],
    "name": "TCFG",
    "display_name": "Tangential Damping CFG",
    "description": "TCFG – Tangential Damping CFG (2503.18137)\n\nRefine the uncond (negative) to align with the cond (positive) for improving quality.",
    "python_module": "comfy_extras.nodes_tcfg",
    "category": "advanced/guidance",
    "output_node": false
  },
  "IdeogramV1": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "turbo": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to use turbo mode (faster generation, potentially lower quality)"
          }
        ]
      },
      "optional": {
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "1:1",
              "4:3",
              "3:4",
              "16:9",
              "9:16",
              "2:1",
              "1:2",
              "3:2",
              "2:3",
              "4:5",
              "5:4"
            ],
            "default": "1:1",
            "tooltip": "The aspect ratio for image generation."
          }
        ],
        "magic_prompt_option": [
          "COMBO",
          {
            "options": [
              "AUTO",
              "ON",
              "OFF"
            ],
            "default": "AUTO",
            "tooltip": "Determine if MagicPrompt should be used in generation"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "control_after_generate": true,
            "display": "number"
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Description of what to exclude from the image"
          }
        ],
        "num_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1,
            "display": "number"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "turbo"
      ],
      "optional": [
        "aspect_ratio",
        "magic_prompt_option",
        "seed",
        "negative_prompt",
        "num_images"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "IdeogramV1",
    "display_name": "Ideogram V1",
    "description": "Generates images using the Ideogram V1 model.",
    "python_module": "comfy_api_nodes.nodes_ideogram",
    "category": "api node/image/Ideogram",
    "output_node": false,
    "api_node": true
  },
  "IdeogramV2": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "turbo": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to use turbo mode (faster generation, potentially lower quality)"
          }
        ]
      },
      "optional": {
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "1:1",
              "4:3",
              "3:4",
              "16:9",
              "9:16",
              "2:1",
              "1:2",
              "3:2",
              "2:3",
              "4:5",
              "5:4"
            ],
            "default": "1:1",
            "tooltip": "The aspect ratio for image generation. Ignored if resolution is not set to AUTO."
          }
        ],
        "resolution": [
          "COMBO",
          {
            "options": [
              "Auto",
              "512 x 1536",
              "576 x 1408",
              "576 x 1472",
              "576 x 1536",
              "640 x 1024",
              "640 x 1344",
              "640 x 1408",
              "640 x 1472",
              "640 x 1536",
              "704 x 1152",
              "704 x 1216",
              "704 x 1280",
              "704 x 1344",
              "704 x 1408",
              "704 x 1472",
              "720 x 1280",
              "736 x 1312",
              "768 x 1024",
              "768 x 1088",
              "768 x 1152",
              "768 x 1216",
              "768 x 1232",
              "768 x 1280",
              "768 x 1344",
              "832 x 960",
              "832 x 1024",
              "832 x 1088",
              "832 x 1152",
              "832 x 1216",
              "832 x 1248",
              "864 x 1152",
              "896 x 960",
              "896 x 1024",
              "896 x 1088",
              "896 x 1120",
              "896 x 1152",
              "960 x 832",
              "960 x 896",
              "960 x 1024",
              "960 x 1088",
              "1024 x 640",
              "1024 x 768",
              "1024 x 832",
              "1024 x 896",
              "1024 x 960",
              "1024 x 1024",
              "1088 x 768",
              "1088 x 832",
              "1088 x 896",
              "1088 x 960",
              "1120 x 896",
              "1152 x 704",
              "1152 x 768",
              "1152 x 832",
              "1152 x 864",
              "1152 x 896",
              "1216 x 704",
              "1216 x 768",
              "1216 x 832",
              "1232 x 768",
              "1248 x 832",
              "1280 x 704",
              "1280 x 720",
              "1280 x 768",
              "1280 x 800",
              "1312 x 736",
              "1344 x 640",
              "1344 x 704",
              "1344 x 768",
              "1408 x 576",
              "1408 x 640",
              "1408 x 704",
              "1472 x 576",
              "1472 x 640",
              "1472 x 704",
              "1536 x 512",
              "1536 x 576",
              "1536 x 640"
            ],
            "default": "Auto",
            "tooltip": "The resolution for image generation. If not set to AUTO, this overrides the aspect_ratio setting."
          }
        ],
        "magic_prompt_option": [
          "COMBO",
          {
            "options": [
              "AUTO",
              "ON",
              "OFF"
            ],
            "default": "AUTO",
            "tooltip": "Determine if MagicPrompt should be used in generation"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "control_after_generate": true,
            "display": "number"
          }
        ],
        "style_type": [
          "COMBO",
          {
            "options": [
              "AUTO",
              "GENERAL",
              "REALISTIC",
              "DESIGN",
              "RENDER_3D",
              "ANIME"
            ],
            "default": "NONE",
            "tooltip": "Style type for generation (V2 only)"
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Description of what to exclude from the image"
          }
        ],
        "num_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1,
            "display": "number"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "turbo"
      ],
      "optional": [
        "aspect_ratio",
        "resolution",
        "magic_prompt_option",
        "seed",
        "style_type",
        "negative_prompt",
        "num_images"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "IdeogramV2",
    "display_name": "Ideogram V2",
    "description": "Generates images using the Ideogram V2 model.",
    "python_module": "comfy_api_nodes.nodes_ideogram",
    "category": "api node/image/Ideogram",
    "output_node": false,
    "api_node": true
  },
  "IdeogramV3": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation or editing"
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Optional reference image for image editing."
          }
        ],
        "mask": [
          "MASK",
          {
            "default": null,
            "tooltip": "Optional mask for inpainting (white areas will be replaced)"
          }
        ],
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "1:3",
              "3:1",
              "1:2",
              "2:1",
              "9:16",
              "16:9",
              "10:16",
              "16:10",
              "2:3",
              "3:2",
              "3:4",
              "4:3",
              "4:5",
              "5:4",
              "1:1"
            ],
            "default": "1:1",
            "tooltip": "The aspect ratio for image generation. Ignored if resolution is not set to Auto."
          }
        ],
        "resolution": [
          "COMBO",
          {
            "options": [
              "Auto",
              "512x1536",
              "576x1408",
              "576x1472",
              "576x1536",
              "640x1344",
              "640x1408",
              "640x1472",
              "640x1536",
              "704x1152",
              "704x1216",
              "704x1280",
              "704x1344",
              "704x1408",
              "704x1472",
              "736x1312",
              "768x1088",
              "768x1216",
              "768x1280",
              "768x1344",
              "800x1280",
              "832x960",
              "832x1024",
              "832x1088",
              "832x1152",
              "832x1216",
              "832x1248",
              "864x1152",
              "896x960",
              "896x1024",
              "896x1088",
              "896x1120",
              "896x1152",
              "960x832",
              "960x896",
              "960x1024",
              "960x1088",
              "1024x832",
              "1024x896",
              "1024x960",
              "1024x1024",
              "1088x768",
              "1088x832",
              "1088x896",
              "1088x960",
              "1120x896",
              "1152x704",
              "1152x832",
              "1152x864",
              "1152x896",
              "1216x704",
              "1216x768",
              "1216x832",
              "1248x832",
              "1280x704",
              "1280x768",
              "1280x800",
              "1312x736",
              "1344x640",
              "1344x704",
              "1344x768",
              "1408x576",
              "1408x640",
              "1408x704",
              "1472x576",
              "1472x640",
              "1472x704",
              "1536x512",
              "1536x576",
              "1536x640"
            ],
            "default": "Auto",
            "tooltip": "The resolution for image generation. If not set to Auto, this overrides the aspect_ratio setting."
          }
        ],
        "magic_prompt_option": [
          "COMBO",
          {
            "options": [
              "AUTO",
              "ON",
              "OFF"
            ],
            "default": "AUTO",
            "tooltip": "Determine if MagicPrompt should be used in generation"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "control_after_generate": true,
            "display": "number"
          }
        ],
        "num_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1,
            "display": "number"
          }
        ],
        "rendering_speed": [
          "COMBO",
          {
            "options": [
              "BALANCED",
              "TURBO",
              "QUALITY"
            ],
            "default": "BALANCED",
            "tooltip": "Controls the trade-off between generation speed and quality"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "image",
        "mask",
        "aspect_ratio",
        "resolution",
        "magic_prompt_option",
        "seed",
        "num_images",
        "rendering_speed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "IdeogramV3",
    "display_name": "Ideogram V3",
    "description": "Generates images using the Ideogram V3 model. Supports both regular image generation from text prompts and image editing with mask.",
    "python_module": "comfy_api_nodes.nodes_ideogram",
    "category": "api node/image/Ideogram",
    "output_node": false,
    "api_node": true
  },
  "OpenAIDalle2": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text prompt for DALL·E"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "display": "number",
            "control_after_generate": true,
            "tooltip": "not implemented yet in backend"
          }
        ],
        "size": [
          "COMBO",
          {
            "options": [
              "256x256",
              "512x512",
              "1024x1024"
            ],
            "default": "1024x1024",
            "tooltip": "Image size"
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1,
            "display": "number",
            "tooltip": "How many images to generate"
          }
        ],
        "image": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Optional reference image for image editing."
          }
        ],
        "mask": [
          "MASK",
          {
            "default": null,
            "tooltip": "Optional mask for inpainting (white areas will be replaced)"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "seed",
        "size",
        "n",
        "image",
        "mask"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "OpenAIDalle2",
    "display_name": "OpenAI DALL·E 2",
    "description": "Generates images synchronously via OpenAI's DALL·E 2 endpoint.",
    "python_module": "comfy_api_nodes.nodes_openai",
    "category": "api node/image/OpenAI",
    "output_node": false,
    "api_node": true
  },
  "OpenAIDalle3": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text prompt for DALL·E"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "display": "number",
            "control_after_generate": true,
            "tooltip": "not implemented yet in backend"
          }
        ],
        "quality": [
          "COMBO",
          {
            "options": [
              "standard",
              "hd"
            ],
            "default": "standard",
            "tooltip": "Image quality"
          }
        ],
        "style": [
          "COMBO",
          {
            "options": [
              "natural",
              "vivid"
            ],
            "default": "natural",
            "tooltip": "Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images."
          }
        ],
        "size": [
          "COMBO",
          {
            "options": [
              "1024x1024",
              "1024x1792",
              "1792x1024"
            ],
            "default": "1024x1024",
            "tooltip": "Image size"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "seed",
        "quality",
        "style",
        "size"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "OpenAIDalle3",
    "display_name": "OpenAI DALL·E 3",
    "description": "Generates images synchronously via OpenAI's DALL·E 3 endpoint.",
    "python_module": "comfy_api_nodes.nodes_openai",
    "category": "api node/image/OpenAI",
    "output_node": false,
    "api_node": true
  },
  "OpenAIGPTImage1": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text prompt for GPT Image 1"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "display": "number",
            "control_after_generate": true,
            "tooltip": "not implemented yet in backend"
          }
        ],
        "quality": [
          "COMBO",
          {
            "options": [
              "low",
              "medium",
              "high"
            ],
            "default": "low",
            "tooltip": "Image quality, affects cost and generation time."
          }
        ],
        "background": [
          "COMBO",
          {
            "options": [
              "opaque",
              "transparent"
            ],
            "default": "opaque",
            "tooltip": "Return image with or without background"
          }
        ],
        "size": [
          "COMBO",
          {
            "options": [
              "auto",
              "1024x1024",
              "1024x1536",
              "1536x1024"
            ],
            "default": "auto",
            "tooltip": "Image size"
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1,
            "display": "number",
            "tooltip": "How many images to generate"
          }
        ],
        "image": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Optional reference image for image editing."
          }
        ],
        "mask": [
          "MASK",
          {
            "default": null,
            "tooltip": "Optional mask for inpainting (white areas will be replaced)"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "seed",
        "quality",
        "background",
        "size",
        "n",
        "image",
        "mask"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "OpenAIGPTImage1",
    "display_name": "OpenAI GPT Image 1",
    "description": "Generates images synchronously via OpenAI's GPT Image 1 endpoint.",
    "python_module": "comfy_api_nodes.nodes_openai",
    "category": "api node/image/OpenAI",
    "output_node": false,
    "api_node": true
  },
  "OpenAIChatNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text inputs to the model, used to generate a response."
          }
        ],
        "persist_context": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Persist chat context between calls (multi-turn conversation)"
          }
        ],
        "model": [
          "COMBO",
          {
            "options": [
              "o4-mini",
              "o1",
              "o3",
              "o1-pro",
              "gpt-4o",
              "gpt-4.1",
              "gpt-4.1-mini",
              "gpt-4.1-nano"
            ],
            "default": null,
            "tooltip": "The model used to generate the response"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Optional image(s) to use as context for the model. To include multiple images, you can use the Batch Images node."
          }
        ],
        "files": [
          "OPENAI_INPUT_FILES",
          {
            "default": null,
            "tooltip": "Optional file(s) to use as context for the model. Accepts inputs from the OpenAI Chat Input Files node."
          }
        ],
        "advanced_options": [
          "OPENAI_CHAT_CONFIG",
          {
            "default": null,
            "tooltip": "Optional configuration for the model. Accepts inputs from the OpenAI Chat Advanced Options node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "persist_context",
        "model"
      ],
      "optional": [
        "images",
        "files",
        "advanced_options"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "OpenAIChatNode",
    "display_name": "OpenAI Chat",
    "description": "Generate text responses from an OpenAI model.",
    "python_module": "comfy_api_nodes.nodes_openai",
    "category": "api node/text/OpenAI",
    "output_node": false,
    "api_node": true
  },
  "OpenAIInputFiles": {
    "input": {
      "required": {
        "file": [
          "COMBO",
          {
            "tooltip": "Input files to include as context for the model. Only accepts text (.txt) and PDF (.pdf) files for now.",
            "options": [],
            "default": null
          }
        ]
      },
      "optional": {
        "OPENAI_INPUT_FILES": [
          "OPENAI_INPUT_FILES",
          {
            "tooltip": "An optional additional file(s) to batch together with the file loaded from this node. Allows chaining of input files so that a single message can include multiple input files.",
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file"
      ],
      "optional": [
        "OPENAI_INPUT_FILES"
      ]
    },
    "output": [
      "OPENAI_INPUT_FILES"
    ],
    "output_is_list": [false],
    "output_name": [
      "OPENAI_INPUT_FILES"
    ],
    "name": "OpenAIInputFiles",
    "display_name": "OpenAI Chat Input Files",
    "description": "Loads and prepares input files (text, pdf, etc.) to include as inputs for the OpenAI Chat Node. The files will be read by the OpenAI model when generating a response. 🛈 TIP: Can be chained together with other OpenAI Input File nodes.",
    "python_module": "comfy_api_nodes.nodes_openai",
    "category": "api node/text/OpenAI",
    "output_node": false
  },
  "OpenAIChatConfig": {
    "input": {
      "required": {
        "truncation": [
          "COMBO",
          {
            "options": [
              "auto",
              "disabled"
            ],
            "default": "auto",
            "tooltip": "The truncation strategy to use for the model response. auto: If the context of this response and previous ones exceeds the model's context window size, the model will truncate the response to fit the context window by dropping input items in the middle of the conversation.disabled: If a model response will exceed the context window size for a model, the request will fail with a 400 error"
          }
        ]
      },
      "optional": {
        "max_output_tokens": [
          "INT",
          {
            "default": 4096,
            "tooltip": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens",
            "min": 16,
            "max": 16384
          }
        ],
        "instructions": [
          "STRING",
          {
            "default": null,
            "tooltip": "Instructions for the model on how to generate the response",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "truncation"
      ],
      "optional": [
        "max_output_tokens",
        "instructions"
      ]
    },
    "output": [
      "OPENAI_CHAT_CONFIG"
    ],
    "output_is_list": [false],
    "output_name": [
      "OPENAI_CHAT_CONFIG"
    ],
    "name": "OpenAIChatConfig",
    "display_name": "OpenAI Chat Advanced Options",
    "description": "Allows specifying advanced configuration options for the OpenAI Chat Nodes.",
    "python_module": "comfy_api_nodes.nodes_openai",
    "category": "api node/text/OpenAI",
    "output_node": false
  },
  "MinimaxTextToVideoNode": {
    "input": {
      "required": {
        "prompt_text": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text prompt to guide the video generation"
          }
        ],
        "model": [
          [
            "T2V-01",
            "T2V-01-Director"
          ],
          {
            "default": "T2V-01",
            "tooltip": "Model to use for video generation"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt_text",
        "model"
      ],
      "optional": [
        "seed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "MinimaxTextToVideoNode",
    "display_name": "MiniMax Text to Video",
    "description": "Generates videos from prompts using MiniMax's API",
    "python_module": "comfy_api_nodes.nodes_minimax",
    "category": "api node/video/MiniMax",
    "output_node": true,
    "api_node": true
  },
  "MinimaxImageToVideoNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "Image to use as first frame of video generation"
          }
        ],
        "prompt_text": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text prompt to guide the video generation"
          }
        ],
        "model": [
          [
            "I2V-01-Director",
            "I2V-01",
            "I2V-01-live"
          ],
          {
            "default": "I2V-01",
            "tooltip": "Model to use for video generation"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt_text",
        "model"
      ],
      "optional": [
        "seed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "MinimaxImageToVideoNode",
    "display_name": "MiniMax Image to Video",
    "description": "Generates videos from an image and prompts using MiniMax's API",
    "python_module": "comfy_api_nodes.nodes_minimax",
    "category": "api node/video/MiniMax",
    "output_node": true,
    "api_node": true
  },
  "VeoVideoGenerationNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text description of the video"
          }
        ],
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "16:9",
              "9:16"
            ],
            "default": "16:9",
            "tooltip": "Aspect ratio of the output video"
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Negative text prompt to guide what to avoid in the video"
          }
        ],
        "duration_seconds": [
          "INT",
          {
            "default": 5,
            "min": 5,
            "max": 8,
            "step": 1,
            "display": "number",
            "tooltip": "Duration of the output video in seconds"
          }
        ],
        "enhance_prompt": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Whether to enhance the prompt with AI assistance"
          }
        ],
        "person_generation": [
          "COMBO",
          {
            "options": [
              "ALLOW",
              "BLOCK"
            ],
            "default": "ALLOW",
            "tooltip": "Whether to allow generating people in the video"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967295,
            "step": 1,
            "display": "number",
            "control_after_generate": true,
            "tooltip": "Seed for video generation (0 for random)"
          }
        ],
        "image": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Optional reference image to guide video generation"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "aspect_ratio"
      ],
      "optional": [
        "negative_prompt",
        "duration_seconds",
        "enhance_prompt",
        "person_generation",
        "seed",
        "image"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "VeoVideoGenerationNode",
    "display_name": "Google Veo2 Video Generation",
    "description": "Generates videos from text prompts using Google's Veo API",
    "python_module": "comfy_api_nodes.nodes_veo2",
    "category": "api node/video/Veo",
    "output_node": false,
    "api_node": true
  },
  "KlingCameraControls": {
    "input": {
      "required": {
        "camera_control_type": [
          "COMBO",
          {
            "options": [
              "simple",
              "down_back",
              "forward_up",
              "right_turn_forward",
              "left_turn_forward"
            ],
            "default": null
          }
        ],
        "horizontal_movement": [
          "FLOAT",
          {
            "default": 0,
            "min": -10,
            "max": 10,
            "step": 0.25,
            "display": "slider",
            "tooltip": "Controls camera's movement along horizontal axis (x-axis). Negative indicates left, positive indicates right"
          }
        ],
        "vertical_movement": [
          "FLOAT",
          {
            "default": 0,
            "min": -10,
            "max": 10,
            "step": 0.25,
            "display": "slider",
            "tooltip": "Controls camera's movement along vertical axis (y-axis). Negative indicates downward, positive indicates upward."
          }
        ],
        "pan": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -10,
            "max": 10,
            "step": 0.25,
            "display": "slider",
            "tooltip": "Controls camera's rotation in vertical plane (x-axis). Negative indicates downward rotation, positive indicates upward rotation."
          }
        ],
        "tilt": [
          "FLOAT",
          {
            "default": 0,
            "min": -10,
            "max": 10,
            "step": 0.25,
            "display": "slider",
            "tooltip": "Controls camera's rotation in horizontal plane (y-axis). Negative indicates left rotation, positive indicates right rotation."
          }
        ],
        "roll": [
          "FLOAT",
          {
            "default": 0,
            "min": -10,
            "max": 10,
            "step": 0.25,
            "display": "slider",
            "tooltip": "Controls camera's rolling amount (z-axis). Negative indicates counterclockwise, positive indicates clockwise."
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 0,
            "min": -10,
            "max": 10,
            "step": 0.25,
            "display": "slider",
            "tooltip": "Controls change in camera's focal length. Negative indicates narrower field of view, positive indicates wider field of view."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_control_type",
        "horizontal_movement",
        "vertical_movement",
        "pan",
        "tilt",
        "roll",
        "zoom"
      ]
    },
    "output": [
      "CAMERA_CONTROL"
    ],
    "output_is_list": [false],
    "output_name": [
      "camera_control"
    ],
    "name": "KlingCameraControls",
    "display_name": "Kling Camera Controls",
    "description": "Allows specifying configuration options for Kling Camera Controls and motion control effects.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": false
  },
  "KlingTextToVideoNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Positive text prompt",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Negative text prompt",
            "multiline": true
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1
          }
        ],
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "16:9",
              "9:16",
              "1:1"
            ],
            "default": "16:9"
          }
        ],
        "mode": [
          [
            "standard mode / 5s duration / kling-v1",
            "standard mode / 10s duration / kling-v1",
            "pro mode / 5s duration / kling-v1",
            "pro mode / 10s duration / kling-v1",
            "standard mode / 5s duration / kling-v1-6",
            "standard mode / 10s duration / kling-v1-6",
            "pro mode / 5s duration / kling-v2-master",
            "pro mode / 10s duration / kling-v2-master",
            "standard mode / 5s duration / kling-v2-master",
            "standard mode / 10s duration / kling-v2-master"
          ],
          {
            "default": "standard mode / 5s duration / kling-v1-6",
            "tooltip": "The configuration to use for the video generation following the format: mode / duration / model_name."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "negative_prompt",
        "cfg_scale",
        "aspect_ratio",
        "mode"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingTextToVideoNode",
    "display_name": "Kling Text to Video",
    "description": "Kling Text to Video Node",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingImage2VideoNode": {
    "input": {
      "required": {
        "start_frame": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "The reference image used to generate the video."
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Positive text prompt",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Negative text prompt",
            "multiline": true
          }
        ],
        "model_name": [
          "COMBO",
          {
            "options": [
              "kling-v1",
              "kling-v1-5",
              "kling-v1-6",
              "kling-v2-master"
            ],
            "default": "kling-v2-master"
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1
          }
        ],
        "mode": [
          "COMBO",
          {
            "options": [
              "std",
              "pro"
            ],
            "default": "std"
          }
        ],
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "16:9",
              "9:16",
              "1:1"
            ],
            "default": "16:9"
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [
              "5",
              "10"
            ],
            "default": "5"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "start_frame",
        "prompt",
        "negative_prompt",
        "model_name",
        "cfg_scale",
        "mode",
        "aspect_ratio",
        "duration"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingImage2VideoNode",
    "display_name": "Kling Image to Video",
    "description": "Kling Image to Video Node",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingCameraControlI2VNode": {
    "input": {
      "required": {
        "start_frame": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Reference Image - URL or Base64 encoded string, cannot exceed 10MB, resolution not less than 300*300px, aspect ratio between 1:2.5 ~ 2.5:1. Base64 should not include data:image prefix."
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Positive text prompt",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Negative text prompt",
            "multiline": true
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0,
            "max": 1
          }
        ],
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "16:9",
              "9:16",
              "1:1"
            ],
            "default": "16:9"
          }
        ],
        "camera_control": [
          "CAMERA_CONTROL",
          {
            "tooltip": "Can be created using the Kling Camera Controls node. Controls the camera movement and motion during the video generation."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "start_frame",
        "prompt",
        "negative_prompt",
        "cfg_scale",
        "aspect_ratio",
        "camera_control"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingCameraControlI2VNode",
    "display_name": "Kling Image to Video (Camera Control)",
    "description": "Transform still images into cinematic videos with professional camera movements that simulate real-world cinematography. Control virtual camera actions including zoom, rotation, pan, tilt, and first-person view, while maintaining focus on your original image.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingCameraControlT2VNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Positive text prompt",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Negative text prompt",
            "multiline": true
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0,
            "max": 1
          }
        ],
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "16:9",
              "9:16",
              "1:1"
            ],
            "default": "16:9"
          }
        ],
        "camera_control": [
          "CAMERA_CONTROL",
          {
            "tooltip": "Can be created using the Kling Camera Controls node. Controls the camera movement and motion during the video generation."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "negative_prompt",
        "cfg_scale",
        "aspect_ratio",
        "camera_control"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingCameraControlT2VNode",
    "display_name": "Kling Text to Video (Camera Control)",
    "description": "Transform text into cinematic videos with professional camera movements that simulate real-world cinematography. Control virtual camera actions including zoom, rotation, pan, tilt, and first-person view, while maintaining focus on your original text.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingStartEndFrameNode": {
    "input": {
      "required": {
        "start_frame": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Reference Image - URL or Base64 encoded string, cannot exceed 10MB, resolution not less than 300*300px, aspect ratio between 1:2.5 ~ 2.5:1. Base64 should not include data:image prefix."
          }
        ],
        "end_frame": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Reference Image - End frame control. URL or Base64 encoded string, cannot exceed 10MB, resolution not less than 300*300px. Base64 should not include data:image prefix."
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Positive text prompt",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Negative text prompt",
            "multiline": true
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1
          }
        ],
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "16:9",
              "9:16",
              "1:1"
            ],
            "default": "16:9"
          }
        ],
        "mode": [
          [
            "standard mode / 5s duration / kling-v1",
            "pro mode / 5s duration / kling-v1",
            "pro mode / 5s duration / kling-v1-5",
            "pro mode / 10s duration / kling-v1-5",
            "pro mode / 5s duration / kling-v1-6",
            "pro mode / 10s duration / kling-v1-6"
          ],
          {
            "default": "pro mode / 5s duration / kling-v1-5",
            "tooltip": "The configuration to use for the video generation following the format: mode / duration / model_name."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "start_frame",
        "end_frame",
        "prompt",
        "negative_prompt",
        "cfg_scale",
        "aspect_ratio",
        "mode"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingStartEndFrameNode",
    "display_name": "Kling Start-End Frame to Video",
    "description": "Generate a video sequence that transitions between your provided start and end images. The node creates all frames in between, producing a smooth transformation from the first frame to the last.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingVideoExtendNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Positive text prompt for guiding the video extension",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Negative text prompt for elements to avoid in the extended video",
            "multiline": true
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1
          }
        ],
        "video_id": [
          "STRING",
          {
            "default": null,
            "tooltip": "The ID of the video to be extended. Supports videos generated by text-to-video, image-to-video, and previous video extension operations. Cannot exceed 3 minutes total duration after extension.",
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "negative_prompt",
        "cfg_scale",
        "video_id"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingVideoExtendNode",
    "display_name": "Kling Video Extend",
    "description": "Kling Video Extend Node. Extend videos made by other Kling nodes. The video_id is created by using other Kling Nodes.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingLipSyncAudioToVideoNode": {
    "input": {
      "required": {
        "video": [
          "VIDEO",
          {

          }
        ],
        "audio": [
          "AUDIO",
          {

          }
        ],
        "voice_language": [
          "COMBO",
          {
            "options": [
              "zh",
              "en"
            ],
            "default": "en"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "audio",
        "voice_language"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingLipSyncAudioToVideoNode",
    "display_name": "Kling Lip Sync Video with Audio",
    "description": "Kling Lip Sync Audio to Video Node. Syncs mouth movements in a video file to the audio content of an audio file. When using, ensure that the audio contains clearly distinguishable vocals and that the video contains a distinct face. The audio file should not be larger than 5MB. The video file should not be larger than 100MB, should have height/width between 720px and 1920px, and should be between 2s and 10s in length.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingLipSyncTextToVideoNode": {
    "input": {
      "required": {
        "video": [
          "VIDEO",
          {

          }
        ],
        "text": [
          "STRING",
          {
            "default": null,
            "tooltip": "Text Content for Lip-Sync Video Generation. Required when mode is text2video. Maximum length is 120 characters.",
            "multiline": true
          }
        ],
        "voice": [
          [
            "Melody",
            "Sunny",
            "Sage",
            "Ace",
            "Blossom",
            "Peppy",
            "Dove",
            "Shine",
            "Anchor",
            "Lyric",
            "Tender",
            "Siren",
            "Zippy",
            "Bud",
            "Sprite",
            "Candy",
            "Beacon",
            "Rock",
            "Titan",
            "Grace",
            "Helen",
            "Lore",
            "Crag",
            "Prattle",
            "Hearth",
            "The Reader",
            "Commercial Lady",
            "阳光少年",
            "懂事小弟",
            "运动少年",
            "青春少女",
            "温柔小妹",
            "元气少女",
            "阳光男生",
            "幽默小哥",
            "文艺小哥",
            "甜美邻家",
            "温柔姐姐",
            "职场女青",
            "活泼男童",
            "俏皮女童",
            "稳重老爸",
            "温柔妈妈",
            "严肃上司",
            "优雅贵妇",
            "慈祥爷爷",
            "唠叨爷爷",
            "唠叨奶奶",
            "和蔼奶奶",
            "东北老铁",
            "重庆小伙",
            "四川妹子",
            "潮汕大叔",
            "台湾男生",
            "西安掌柜",
            "天津姐姐",
            "新闻播报男",
            "译制片男",
            "撒娇女友",
            "刀片烟嗓",
            "乖巧正太"
          ],
          {
            "default": "Melody"
          }
        ],
        "voice_speed": [
          "FLOAT",
          {
            "default": 1,
            "tooltip": "Speech Rate. Valid range: 0.8~2.0, accurate to one decimal place.",
            "min": 0.8,
            "max": 2,
            "slider": true
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "text",
        "voice",
        "voice_speed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingLipSyncTextToVideoNode",
    "display_name": "Kling Lip Sync Video with Text",
    "description": "Kling Lip Sync Text to Video Node. Syncs mouth movements in a video file to a text prompt. The video file should not be larger than 100MB, should have height/width between 720px and 1920px, and should be between 2s and 10s in length.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingVirtualTryOnNode": {
    "input": {
      "required": {
        "human_image": [
          "IMAGE",
          {

          }
        ],
        "cloth_image": [
          "IMAGE",
          {

          }
        ],
        "model_name": [
          "COMBO",
          {
            "options": [
              "kolors-virtual-try-on-v1",
              "kolors-virtual-try-on-v1-5"
            ],
            "default": "kolors-virtual-try-on-v1"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "human_image",
        "cloth_image",
        "model_name"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "KlingVirtualTryOnNode",
    "display_name": "Kling Virtual Try On",
    "description": "Kling Virtual Try On Node. Input a human image and a cloth image to try on the cloth on the human. You can merge multiple clothing item pictures into one image with a white background.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/image/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingImageGenerationNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "tooltip": "Positive text prompt",
            "multiline": true,
            "max_length": 500
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Negative text prompt",
            "multiline": true
          }
        ],
        "image_type": [
          "COMBO",
          {
            "options": [
              "subject",
              "face"
            ],
            "default": null
          }
        ],
        "image_fidelity": [
          "FLOAT",
          {
            "default": 0.5,
            "tooltip": "Reference intensity for user-uploaded images",
            "min": 0,
            "max": 1,
            "slider": true,
            "step": 0.01
          }
        ],
        "human_fidelity": [
          "FLOAT",
          {
            "default": 0.45,
            "tooltip": "Subject reference similarity",
            "min": 0,
            "max": 1,
            "slider": true,
            "step": 0.01
          }
        ],
        "model_name": [
          "COMBO",
          {
            "options": [
              "kling-v1",
              "kling-v1-5",
              "kling-v2"
            ],
            "default": "kling-v1"
          }
        ],
        "aspect_ratio": [
          "COMBO",
          {
            "options": [
              "16:9",
              "9:16",
              "1:1",
              "4:3",
              "3:4",
              "3:2",
              "2:3",
              "21:9"
            ],
            "default": "16:9"
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "tooltip": "Number of generated images",
            "min": 1,
            "max": 9
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE",
          {

          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "negative_prompt",
        "image_type",
        "image_fidelity",
        "human_fidelity",
        "model_name",
        "aspect_ratio",
        "n"
      ],
      "optional": [
        "image"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "KlingImageGenerationNode",
    "display_name": "Kling Image Generation",
    "description": "Kling Image Generation Node. Generate an image from a text prompt with an optional reference image.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/image/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingSingleImageVideoEffectNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": " Reference Image. URL or Base64 encoded string (without data:image prefix). File size cannot exceed 10MB, resolution not less than 300*300px, aspect ratio between 1:2.5 ~ 2.5:1"
          }
        ],
        "effect_scene": [
          "COMBO",
          {
            "options": [
              "bloombloom",
              "dizzydizzy",
              "fuzzyfuzzy",
              "squish",
              "expansion"
            ]
          }
        ],
        "model_name": [
          "COMBO",
          {
            "options": [
              "kling-v1-6"
            ]
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [
              "5",
              "10"
            ]
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "effect_scene",
        "model_name",
        "duration"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "VIDEO",
      "video_id",
      "duration"
    ],
    "name": "KlingSingleImageVideoEffectNode",
    "display_name": "Kling Video Effects",
    "description": "Achieve different special effects when generating a video based on the effect_scene.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "KlingDualCharacterVideoEffectNode": {
    "input": {
      "required": {
        "image_left": [
          "IMAGE",
          {
            "tooltip": "Left side image"
          }
        ],
        "image_right": [
          "IMAGE",
          {
            "tooltip": "Right side image"
          }
        ],
        "effect_scene": [
          "COMBO",
          {
            "options": [
              "hug",
              "kiss",
              "heart_gesture"
            ]
          }
        ],
        "model_name": [
          "COMBO",
          {
            "options": [
              "kling-v1",
              "kling-v1-5",
              "kling-v1-6"
            ],
            "default": "kling-v1"
          }
        ],
        "mode": [
          "COMBO",
          {
            "options": [
              "std",
              "pro"
            ],
            "default": "std"
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [
              "5",
              "10"
            ]
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image_left",
        "image_right",
        "effect_scene",
        "model_name",
        "mode",
        "duration"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "VIDEO",
      "duration"
    ],
    "name": "KlingDualCharacterVideoEffectNode",
    "display_name": "Kling Dual Character Video Effects",
    "description": "Achieve different special effects when generating a video based on the effect_scene. First image will be positioned on left side, second on right side of the composite.",
    "python_module": "comfy_api_nodes.nodes_kling",
    "category": "api node/video/Kling",
    "output_node": false,
    "api_node": true
  },
  "FluxProUltraImageNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "prompt_upsampling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "aspect_ratio": [
          "STRING",
          {
            "default": "16:9",
            "tooltip": "Aspect ratio of image; must be between 1:4 and 4:1."
          }
        ],
        "raw": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "When True, generate less processed, more natural-looking images."
          }
        ]
      },
      "optional": {
        "image_prompt": [
          "IMAGE"
        ],
        "image_prompt_strength": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Blend between the prompt and the image prompt."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "prompt_upsampling",
        "seed",
        "aspect_ratio",
        "raw"
      ],
      "optional": [
        "image_prompt",
        "image_prompt_strength"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FluxProUltraImageNode",
    "display_name": "Flux 1.1 [pro] Ultra Image",
    "description": "Generates images using Flux Pro 1.1 Ultra via api based on prompt and resolution.",
    "python_module": "comfy_api_nodes.nodes_bfl",
    "category": "api node/image/BFL",
    "output_node": false,
    "api_node": true
  },
  "FluxKontextProImageNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation - specify what and how to edit."
          }
        ],
        "aspect_ratio": [
          "STRING",
          {
            "default": "16:9",
            "tooltip": "Aspect ratio of image; must be between 1:4 and 4:1."
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3,
            "min": 0.1,
            "max": 99,
            "step": 0.1,
            "tooltip": "Guidance strength for the image generation process"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 150,
            "tooltip": "Number of steps for the image generation process"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1234,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "prompt_upsampling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."
          }
        ]
      },
      "optional": {
        "input_image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "aspect_ratio",
        "guidance",
        "steps",
        "seed",
        "prompt_upsampling"
      ],
      "optional": [
        "input_image"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FluxKontextProImageNode",
    "display_name": "Flux.1 Kontext [pro] Image",
    "description": "Edits images using Flux.1 Kontext [pro] via api based on prompt and aspect ratio.",
    "python_module": "comfy_api_nodes.nodes_bfl",
    "category": "api node/image/BFL",
    "output_node": false,
    "api_node": true
  },
  "FluxKontextMaxImageNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation - specify what and how to edit."
          }
        ],
        "aspect_ratio": [
          "STRING",
          {
            "default": "16:9",
            "tooltip": "Aspect ratio of image; must be between 1:4 and 4:1."
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3,
            "min": 0.1,
            "max": 99,
            "step": 0.1,
            "tooltip": "Guidance strength for the image generation process"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 150,
            "tooltip": "Number of steps for the image generation process"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1234,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "prompt_upsampling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."
          }
        ]
      },
      "optional": {
        "input_image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "aspect_ratio",
        "guidance",
        "steps",
        "seed",
        "prompt_upsampling"
      ],
      "optional": [
        "input_image"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FluxKontextMaxImageNode",
    "display_name": "Flux.1 Kontext [max] Image",
    "description": "Edits images using Flux.1 Kontext [max] via api based on prompt and aspect ratio.",
    "python_module": "comfy_api_nodes.nodes_bfl",
    "category": "api node/image/BFL",
    "output_node": false,
    "api_node": true
  },
  "FluxProExpandNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "prompt_upsampling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2048,
            "tooltip": "Number of pixels to expand at the top of the image"
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2048,
            "tooltip": "Number of pixels to expand at the bottom of the image"
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2048,
            "tooltip": "Number of pixels to expand at the left side of the image"
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2048,
            "tooltip": "Number of pixels to expand at the right side of the image"
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 60,
            "min": 1.5,
            "max": 100,
            "tooltip": "Guidance strength for the image generation process"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 15,
            "max": 50,
            "tooltip": "Number of steps for the image generation process"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt",
        "prompt_upsampling",
        "top",
        "bottom",
        "left",
        "right",
        "guidance",
        "steps",
        "seed"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FluxProExpandNode",
    "display_name": "Flux.1 Expand Image",
    "description": "Outpaints image based on prompt.",
    "python_module": "comfy_api_nodes.nodes_bfl",
    "category": "api node/image/BFL",
    "output_node": false,
    "api_node": true
  },
  "FluxProFillNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "prompt_upsampling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 60,
            "min": 1.5,
            "max": 100,
            "tooltip": "Guidance strength for the image generation process"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 15,
            "max": 50,
            "tooltip": "Number of steps for the image generation process"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "prompt",
        "prompt_upsampling",
        "guidance",
        "steps",
        "seed"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FluxProFillNode",
    "display_name": "Flux.1 Fill Image",
    "description": "Inpaints image based on mask and prompt.",
    "python_module": "comfy_api_nodes.nodes_bfl",
    "category": "api node/image/BFL",
    "output_node": false,
    "api_node": true
  },
  "FluxProCannyNode": {
    "input": {
      "required": {
        "control_image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "prompt_upsampling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."
          }
        ],
        "canny_low_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01,
            "tooltip": "Low threshold for Canny edge detection; ignored if skip_processing is True"
          }
        ],
        "canny_high_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01,
            "tooltip": "High threshold for Canny edge detection; ignored if skip_processing is True"
          }
        ],
        "skip_preprocessing": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to skip preprocessing; set to True if control_image already is canny-fied, False if it is a raw image."
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 30,
            "min": 1,
            "max": 100,
            "tooltip": "Guidance strength for the image generation process"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 15,
            "max": 50,
            "tooltip": "Number of steps for the image generation process"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "control_image",
        "prompt",
        "prompt_upsampling",
        "canny_low_threshold",
        "canny_high_threshold",
        "skip_preprocessing",
        "guidance",
        "steps",
        "seed"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FluxProCannyNode",
    "display_name": "Flux.1 Canny Control Image",
    "description": "Generate image using a control image (canny).",
    "python_module": "comfy_api_nodes.nodes_bfl",
    "category": "api node/image/BFL",
    "output_node": false,
    "api_node": true
  },
  "FluxProDepthNode": {
    "input": {
      "required": {
        "control_image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "prompt_upsampling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."
          }
        ],
        "skip_preprocessing": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to skip preprocessing; set to True if control_image already is depth-ified, False if it is a raw image."
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 15,
            "min": 1,
            "max": 100,
            "tooltip": "Guidance strength for the image generation process"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 15,
            "max": 50,
            "tooltip": "Number of steps for the image generation process"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "control_image",
        "prompt",
        "prompt_upsampling",
        "skip_preprocessing",
        "guidance",
        "steps",
        "seed"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FluxProDepthNode",
    "display_name": "Flux.1 Depth Control Image",
    "description": "Generate image using a control image (depth).",
    "python_module": "comfy_api_nodes.nodes_bfl",
    "category": "api node/image/BFL",
    "output_node": false,
    "api_node": true
  },
  "LumaImageNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "model": [
          [
            "photon-1",
            "photon-flash-1"
          ]
        ],
        "aspect_ratio": [
          [
            "1:1",
            "16:9",
            "9:16",
            "4:3",
            "3:4",
            "21:9",
            "9:21"
          ],
          {
            "default": "16:9"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ],
        "style_image_weight": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Weight of style image. Ignored if no style_image provided."
          }
        ]
      },
      "optional": {
        "image_luma_ref": [
          "LUMA_REF",
          {
            "tooltip": "Luma Reference node connection to influence generation with input images; up to 4 images can be considered."
          }
        ],
        "style_image": [
          "IMAGE",
          {
            "tooltip": "Style reference image; only 1 image will be used."
          }
        ],
        "character_image": [
          "IMAGE",
          {
            "tooltip": "Character reference images; can be a batch of multiple, up to 4 images can be considered."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "model",
        "aspect_ratio",
        "seed",
        "style_image_weight"
      ],
      "optional": [
        "image_luma_ref",
        "style_image",
        "character_image"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "LumaImageNode",
    "display_name": "Luma Text to Image",
    "description": "Generates images synchronously based on prompt and aspect ratio.",
    "python_module": "comfy_api_nodes.nodes_luma",
    "category": "api node/image/Luma",
    "output_node": false,
    "api_node": true
  },
  "LumaImageModifyNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation"
          }
        ],
        "image_weight": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 0.98,
            "step": 0.01,
            "tooltip": "Weight of the image; the closer to 1.0, the less the image will be modified."
          }
        ],
        "model": [
          [
            "photon-1",
            "photon-flash-1"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt",
        "image_weight",
        "model",
        "seed"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "LumaImageModifyNode",
    "display_name": "Luma Image to Image",
    "description": "Modifies images synchronously based on prompt and aspect ratio.",
    "python_module": "comfy_api_nodes.nodes_luma",
    "category": "api node/image/Luma",
    "output_node": false,
    "api_node": true
  },
  "LumaVideoNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the video generation"
          }
        ],
        "model": [
          [
            "ray-2",
            "ray-flash-2",
            "ray-1-6"
          ]
        ],
        "aspect_ratio": [
          [
            "1:1",
            "16:9",
            "9:16",
            "4:3",
            "3:4",
            "21:9",
            "9:21"
          ],
          {
            "default": "16:9"
          }
        ],
        "resolution": [
          [
            "540p",
            "720p",
            "1080p",
            "4k"
          ],
          {
            "default": "540p"
          }
        ],
        "duration": [
          [
            "5s",
            "9s"
          ]
        ],
        "loop": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ]
      },
      "optional": {
        "luma_concepts": [
          "LUMA_CONCEPTS",
          {
            "tooltip": "Optional Camera Concepts to dictate camera motion via the Luma Concepts node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "model",
        "aspect_ratio",
        "resolution",
        "duration",
        "loop",
        "seed"
      ],
      "optional": [
        "luma_concepts"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "LumaVideoNode",
    "display_name": "Luma Text to Video",
    "description": "Generates videos synchronously based on prompt and output_size.",
    "python_module": "comfy_api_nodes.nodes_luma",
    "category": "api node/video/Luma",
    "output_node": false,
    "api_node": true
  },
  "LumaImageToVideoNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the video generation"
          }
        ],
        "model": [
          [
            "ray-2",
            "ray-flash-2",
            "ray-1-6"
          ]
        ],
        "resolution": [
          [
            "540p",
            "720p",
            "1080p",
            "4k"
          ],
          {
            "default": "540p"
          }
        ],
        "duration": [
          [
            "5s",
            "9s"
          ]
        ],
        "loop": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ]
      },
      "optional": {
        "first_image": [
          "IMAGE",
          {
            "tooltip": "First frame of generated video."
          }
        ],
        "last_image": [
          "IMAGE",
          {
            "tooltip": "Last frame of generated video."
          }
        ],
        "luma_concepts": [
          "LUMA_CONCEPTS",
          {
            "tooltip": "Optional Camera Concepts to dictate camera motion via the Luma Concepts node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "model",
        "resolution",
        "duration",
        "loop",
        "seed"
      ],
      "optional": [
        "first_image",
        "last_image",
        "luma_concepts"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "LumaImageToVideoNode",
    "display_name": "Luma Image to Video",
    "description": "Generates videos synchronously based on prompt, input images, and output_size.",
    "python_module": "comfy_api_nodes.nodes_luma",
    "category": "api node/video/Luma",
    "output_node": false,
    "api_node": true
  },
  "LumaReferenceNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "Image to use as reference."
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Weight of image reference."
          }
        ]
      },
      "optional": {
        "luma_ref": [
          "LUMA_REF"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "weight"
      ],
      "optional": [
        "luma_ref"
      ]
    },
    "output": [
      "LUMA_REF"
    ],
    "output_is_list": [false],
    "output_name": [
      "luma_ref"
    ],
    "name": "LumaReferenceNode",
    "display_name": "Luma Reference",
    "description": "Holds an image and weight for use with Luma Generate Image node.",
    "python_module": "comfy_api_nodes.nodes_luma",
    "category": "api node/image/Luma",
    "output_node": false
  },
  "LumaConceptsNode": {
    "input": {
      "required": {
        "concept1": [
          [
            "None",
            "truck_left",
            "pan_right",
            "pedestal_down",
            "low_angle",
            "pedestal_up",
            "selfie",
            "pan_left",
            "roll_right",
            "zoom_in",
            "over_the_shoulder",
            "orbit_right",
            "orbit_left",
            "static",
            "tiny_planet",
            "high_angle",
            "bolt_cam",
            "dolly_zoom",
            "overhead",
            "zoom_out",
            "handheld",
            "roll_left",
            "pov",
            "aerial_drone",
            "push_in",
            "crane_down",
            "truck_right",
            "tilt_down",
            "elevator_doors",
            "tilt_up",
            "ground_level",
            "pull_out",
            "aerial",
            "crane_up",
            "eye_level"
          ]
        ],
        "concept2": [
          [
            "None",
            "truck_left",
            "pan_right",
            "pedestal_down",
            "low_angle",
            "pedestal_up",
            "selfie",
            "pan_left",
            "roll_right",
            "zoom_in",
            "over_the_shoulder",
            "orbit_right",
            "orbit_left",
            "static",
            "tiny_planet",
            "high_angle",
            "bolt_cam",
            "dolly_zoom",
            "overhead",
            "zoom_out",
            "handheld",
            "roll_left",
            "pov",
            "aerial_drone",
            "push_in",
            "crane_down",
            "truck_right",
            "tilt_down",
            "elevator_doors",
            "tilt_up",
            "ground_level",
            "pull_out",
            "aerial",
            "crane_up",
            "eye_level"
          ]
        ],
        "concept3": [
          [
            "None",
            "truck_left",
            "pan_right",
            "pedestal_down",
            "low_angle",
            "pedestal_up",
            "selfie",
            "pan_left",
            "roll_right",
            "zoom_in",
            "over_the_shoulder",
            "orbit_right",
            "orbit_left",
            "static",
            "tiny_planet",
            "high_angle",
            "bolt_cam",
            "dolly_zoom",
            "overhead",
            "zoom_out",
            "handheld",
            "roll_left",
            "pov",
            "aerial_drone",
            "push_in",
            "crane_down",
            "truck_right",
            "tilt_down",
            "elevator_doors",
            "tilt_up",
            "ground_level",
            "pull_out",
            "aerial",
            "crane_up",
            "eye_level"
          ]
        ],
        "concept4": [
          [
            "None",
            "truck_left",
            "pan_right",
            "pedestal_down",
            "low_angle",
            "pedestal_up",
            "selfie",
            "pan_left",
            "roll_right",
            "zoom_in",
            "over_the_shoulder",
            "orbit_right",
            "orbit_left",
            "static",
            "tiny_planet",
            "high_angle",
            "bolt_cam",
            "dolly_zoom",
            "overhead",
            "zoom_out",
            "handheld",
            "roll_left",
            "pov",
            "aerial_drone",
            "push_in",
            "crane_down",
            "truck_right",
            "tilt_down",
            "elevator_doors",
            "tilt_up",
            "ground_level",
            "pull_out",
            "aerial",
            "crane_up",
            "eye_level"
          ]
        ]
      },
      "optional": {
        "luma_concepts": [
          "LUMA_CONCEPTS",
          {
            "tooltip": "Optional Camera Concepts to add to the ones chosen here."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "concept1",
        "concept2",
        "concept3",
        "concept4"
      ],
      "optional": [
        "luma_concepts"
      ]
    },
    "output": [
      "LUMA_CONCEPTS"
    ],
    "output_is_list": [false],
    "output_name": [
      "luma_concepts"
    ],
    "name": "LumaConceptsNode",
    "display_name": "Luma Concepts",
    "description": "Holds one or more Camera Concepts for use with Luma Text to Video and Luma Image to Video nodes.",
    "python_module": "comfy_api_nodes.nodes_luma",
    "category": "api node/video/Luma",
    "output_node": false
  },
  "RecraftTextToImageNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation."
          }
        ],
        "size": [
          [
            "1024x1024",
            "1365x1024",
            "1024x1365",
            "1536x1024",
            "1024x1536",
            "1820x1024",
            "1024x1820",
            "1024x2048",
            "2048x1024",
            "1434x1024",
            "1024x1434",
            "1024x1280",
            "1280x1024",
            "1024x1707",
            "1707x1024"
          ],
          {
            "default": "1024x1024",
            "tooltip": "The size of the generated image."
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 6,
            "tooltip": "The number of images to generate."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ]
      },
      "optional": {
        "recraft_style": [
          "RECRAFT_V3_STYLE"
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "An optional text description of undesired elements on an image."
          }
        ],
        "recraft_controls": [
          "RECRAFT_CONTROLS",
          {
            "tooltip": "Optional additional controls over the generation via the Recraft Controls node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "size",
        "n",
        "seed"
      ],
      "optional": [
        "recraft_style",
        "negative_prompt",
        "recraft_controls"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RecraftTextToImageNode",
    "display_name": "Recraft Text to Image",
    "description": "Generates images synchronously based on prompt and resolution.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftImageToImageNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation."
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 6,
            "tooltip": "The number of images to generate."
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Defines the difference with the original image, should lie in [0, 1], where 0 means almost identical, and 1 means miserable similarity."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ]
      },
      "optional": {
        "recraft_style": [
          "RECRAFT_V3_STYLE"
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "An optional text description of undesired elements on an image."
          }
        ],
        "recraft_controls": [
          "RECRAFT_CONTROLS",
          {
            "tooltip": "Optional additional controls over the generation via the Recraft Controls node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt",
        "n",
        "strength",
        "seed"
      ],
      "optional": [
        "recraft_style",
        "negative_prompt",
        "recraft_controls"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RecraftImageToImageNode",
    "display_name": "Recraft Image to Image",
    "description": "Modify image based on prompt and strength.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftImageInpaintingNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation."
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 6,
            "tooltip": "The number of images to generate."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ]
      },
      "optional": {
        "recraft_style": [
          "RECRAFT_V3_STYLE"
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "An optional text description of undesired elements on an image."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "prompt",
        "n",
        "seed"
      ],
      "optional": [
        "recraft_style",
        "negative_prompt"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RecraftImageInpaintingNode",
    "display_name": "Recraft Image Inpainting",
    "description": "Modify image based on prompt and mask.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftTextToVectorNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation."
          }
        ],
        "substyle": [
          [
            "None",
            "bold_stroke",
            "chemistry",
            "colored_stencil",
            "contour_pop_art",
            "cosmics",
            "cutout",
            "depressive",
            "editorial",
            "emotional_flat",
            "engraving",
            "infographical",
            "line_art",
            "line_circuit",
            "linocut",
            "marker_outline",
            "mosaic",
            "naivector",
            "roundish_flat",
            "seamless",
            "segmented_colors",
            "sharp_contrast",
            "thin",
            "vector_photo",
            "vivid_shapes"
          ]
        ],
        "size": [
          [
            "1024x1024",
            "1365x1024",
            "1024x1365",
            "1536x1024",
            "1024x1536",
            "1820x1024",
            "1024x1820",
            "1024x2048",
            "2048x1024",
            "1434x1024",
            "1024x1434",
            "1024x1280",
            "1280x1024",
            "1024x1707",
            "1707x1024"
          ],
          {
            "default": "1024x1024",
            "tooltip": "The size of the generated image."
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 6,
            "tooltip": "The number of images to generate."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "An optional text description of undesired elements on an image."
          }
        ],
        "recraft_controls": [
          "RECRAFT_CONTROLS",
          {
            "tooltip": "Optional additional controls over the generation via the Recraft Controls node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "substyle",
        "size",
        "n",
        "seed"
      ],
      "optional": [
        "negative_prompt",
        "recraft_controls"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "SVG"
    ],
    "output_is_list": [false],
    "output_name": [
      "SVG"
    ],
    "name": "RecraftTextToVectorNode",
    "display_name": "Recraft Text to Vector",
    "description": "Generates SVG synchronously based on prompt and resolution.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftVectorizeImageNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "SVG"
    ],
    "output_is_list": [false],
    "output_name": [
      "SVG"
    ],
    "name": "RecraftVectorizeImageNode",
    "display_name": "Recraft Vectorize Image",
    "description": "Generates SVG synchronously from an input image.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftRemoveBackgroundNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "RecraftRemoveBackgroundNode",
    "display_name": "Recraft Remove Background",
    "description": "Remove background from image, and return processed image and mask.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftReplaceBackgroundNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the image generation."
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 6,
            "tooltip": "The number of images to generate."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "Seed to determine if node should re-run; actual results are nondeterministic regardless of seed."
          }
        ]
      },
      "optional": {
        "recraft_style": [
          "RECRAFT_V3_STYLE"
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "An optional text description of undesired elements on an image."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt",
        "n",
        "seed"
      ],
      "optional": [
        "recraft_style",
        "negative_prompt"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RecraftReplaceBackgroundNode",
    "display_name": "Recraft Replace Background",
    "description": "Replace background on image, based on provided prompt.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftCrispUpscaleNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RecraftCrispUpscaleNode",
    "display_name": "Recraft Crisp Upscale Image",
    "description": "Upscale image synchronously.\nEnhances a given raster image using ‘crisp upscale’ tool, increasing image resolution, making the image sharper and cleaner.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftCreativeUpscaleNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RecraftCreativeUpscaleNode",
    "display_name": "Recraft Creative Upscale Image",
    "description": "Upscale image synchronously.\nEnhances a given raster image using ‘creative upscale’ tool, boosting resolution with a focus on refining small details and faces.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false,
    "api_node": true
  },
  "RecraftStyleV3RealisticImage": {
    "input": {
      "required": {
        "substyle": [
          [
            "None",
            "b_and_w",
            "enterprise",
            "evening_light",
            "faded_nostalgia",
            "forest_life",
            "hard_flash",
            "hdr",
            "motion_blur",
            "mystic_naturalism",
            "natural_light",
            "natural_tones",
            "organic_calm",
            "real_life_glow",
            "retro_realism",
            "retro_snapshot",
            "studio_portrait",
            "urban_drama",
            "village_realism",
            "warm_folk"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "substyle"
      ]
    },
    "output": [
      "RECRAFT_V3_STYLE"
    ],
    "output_is_list": [false],
    "output_name": [
      "recraft_style"
    ],
    "name": "RecraftStyleV3RealisticImage",
    "display_name": "Recraft Style - Realistic Image",
    "description": "Select realistic_image style and optional substyle.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false
  },
  "RecraftStyleV3DigitalIllustration": {
    "input": {
      "required": {
        "substyle": [
          [
            "None",
            "2d_art_poster",
            "2d_art_poster_2",
            "antiquarian",
            "bold_fantasy",
            "child_book",
            "child_books",
            "cover",
            "crosshatch",
            "digital_engraving",
            "engraving_color",
            "expressionism",
            "freehand_details",
            "grain",
            "grain_20",
            "graphic_intensity",
            "hand_drawn",
            "hand_drawn_outline",
            "handmade_3d",
            "hard_comics",
            "infantile_sketch",
            "long_shadow",
            "modern_folk",
            "multicolor",
            "neon_calm",
            "noir",
            "nostalgic_pastel",
            "outline_details",
            "pastel_gradient",
            "pastel_sketch",
            "pixel_art",
            "plastic",
            "pop_art",
            "pop_renaissance",
            "seamless",
            "street_art",
            "tablet_sketch",
            "urban_glow",
            "urban_sketching",
            "vanilla_dreams",
            "young_adult_book",
            "young_adult_book_2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "substyle"
      ]
    },
    "output": [
      "RECRAFT_V3_STYLE"
    ],
    "output_is_list": [false],
    "output_name": [
      "recraft_style"
    ],
    "name": "RecraftStyleV3DigitalIllustration",
    "display_name": "Recraft Style - Digital Illustration",
    "description": "Select realistic_image style and optional substyle.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false
  },
  "RecraftStyleV3LogoRaster": {
    "input": {
      "required": {
        "substyle": [
          [
            "emblem_graffiti",
            "emblem_pop_art",
            "emblem_punk",
            "emblem_stamp",
            "emblem_vintage"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "substyle"
      ]
    },
    "output": [
      "RECRAFT_V3_STYLE"
    ],
    "output_is_list": [false],
    "output_name": [
      "recraft_style"
    ],
    "name": "RecraftStyleV3LogoRaster",
    "display_name": "Recraft Style - Logo Raster",
    "description": "Select realistic_image style and optional substyle.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false
  },
  "RecraftStyleV3InfiniteStyleLibrary": {
    "input": {
      "required": {
        "style_id": [
          "STRING",
          {
            "default": "",
            "tooltip": "UUID of style from Infinite Style Library."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "style_id"
      ]
    },
    "output": [
      "RECRAFT_V3_STYLE"
    ],
    "output_is_list": [false],
    "output_name": [
      "recraft_style"
    ],
    "name": "RecraftStyleV3InfiniteStyleLibrary",
    "display_name": "Recraft Style - Infinite Style Library",
    "description": "Select style based on preexisting UUID from Recraft's Infinite Style Library.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false
  },
  "RecraftColorRGB": {
    "input": {
      "required": {
        "r": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "tooltip": "Red value of color."
          }
        ],
        "g": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "tooltip": "Green value of color."
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "tooltip": "Blue value of color."
          }
        ]
      },
      "optional": {
        "recraft_color": [
          "RECRAFT_COLOR"
        ]
      }
    },
    "input_order": {
      "required": [
        "r",
        "g",
        "b"
      ],
      "optional": [
        "recraft_color"
      ]
    },
    "output": [
      "RECRAFT_COLOR"
    ],
    "output_is_list": [false],
    "output_name": [
      "recraft_color"
    ],
    "name": "RecraftColorRGB",
    "display_name": "Recraft Color RGB",
    "description": "Create Recraft Color by choosing specific RGB values.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false
  },
  "RecraftControls": {
    "input": {
      "required": {

      },
      "optional": {
        "colors": [
          "RECRAFT_COLOR"
        ],
        "background_color": [
          "RECRAFT_COLOR"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "colors",
        "background_color"
      ]
    },
    "output": [
      "RECRAFT_CONTROLS"
    ],
    "output_is_list": [false],
    "output_name": [
      "recraft_controls"
    ],
    "name": "RecraftControls",
    "display_name": "Recraft Controls",
    "description": "Create Recraft Controls for customizing Recraft generation.",
    "python_module": "comfy_api_nodes.nodes_recraft",
    "category": "api node/image/Recraft",
    "output_node": false
  },
  "PixverseTextToVideoNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the video generation"
          }
        ],
        "aspect_ratio": [
          [
            "16:9",
            "4:3",
            "1:1",
            "3:4",
            "9:16"
          ]
        ],
        "quality": [
          [
            "360p",
            "540p",
            "720p",
            "1080p"
          ],
          {
            "default": "540p"
          }
        ],
        "duration_seconds": [
          [5, 8]
        ],
        "motion_mode": [
          [
            "normal",
            "fast"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "control_after_generate": true,
            "tooltip": "Seed for video generation."
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "An optional text description of undesired elements on an image."
          }
        ],
        "pixverse_template": [
          "PIXVERSE_TEMPLATE",
          {
            "tooltip": "An optional template to influence style of generation, created by the PixVerse Template node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "aspect_ratio",
        "quality",
        "duration_seconds",
        "motion_mode",
        "seed"
      ],
      "optional": [
        "negative_prompt",
        "pixverse_template"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "PixverseTextToVideoNode",
    "display_name": "PixVerse Text to Video",
    "description": "Generates videos based on prompt and output_size.",
    "python_module": "comfy_api_nodes.nodes_pixverse",
    "category": "api node/video/PixVerse",
    "output_node": false,
    "api_node": true
  },
  "PixverseImageToVideoNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the video generation"
          }
        ],
        "quality": [
          [
            "360p",
            "540p",
            "720p",
            "1080p"
          ],
          {
            "default": "540p"
          }
        ],
        "duration_seconds": [
          [5, 8]
        ],
        "motion_mode": [
          [
            "normal",
            "fast"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "control_after_generate": true,
            "tooltip": "Seed for video generation."
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "An optional text description of undesired elements on an image."
          }
        ],
        "pixverse_template": [
          "PIXVERSE_TEMPLATE",
          {
            "tooltip": "An optional template to influence style of generation, created by the PixVerse Template node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt",
        "quality",
        "duration_seconds",
        "motion_mode",
        "seed"
      ],
      "optional": [
        "negative_prompt",
        "pixverse_template"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "PixverseImageToVideoNode",
    "display_name": "PixVerse Image to Video",
    "description": "Generates videos based on prompt and output_size.",
    "python_module": "comfy_api_nodes.nodes_pixverse",
    "category": "api node/video/PixVerse",
    "output_node": false,
    "api_node": true
  },
  "PixverseTransitionVideoNode": {
    "input": {
      "required": {
        "first_frame": [
          "IMAGE"
        ],
        "last_frame": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Prompt for the video generation"
          }
        ],
        "quality": [
          [
            "360p",
            "540p",
            "720p",
            "1080p"
          ],
          {
            "default": "540p"
          }
        ],
        "duration_seconds": [
          [5, 8]
        ],
        "motion_mode": [
          [
            "normal",
            "fast"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "control_after_generate": true,
            "tooltip": "Seed for video generation."
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "An optional text description of undesired elements on an image."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "first_frame",
        "last_frame",
        "prompt",
        "quality",
        "duration_seconds",
        "motion_mode",
        "seed"
      ],
      "optional": [
        "negative_prompt"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "PixverseTransitionVideoNode",
    "display_name": "PixVerse Transition Video",
    "description": "Generates videos based on prompt and output_size.",
    "python_module": "comfy_api_nodes.nodes_pixverse",
    "category": "api node/video/PixVerse",
    "output_node": false,
    "api_node": true
  },
  "PixverseTemplateNode": {
    "input": {
      "required": {
        "template": [
          [
            "Microwave",
            "Suit Swagger",
            "Anything, Robot",
            "Subject 3 Fever",
            "kiss kiss"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "template"
      ]
    },
    "output": [
      "PIXVERSE_TEMPLATE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pixverse_template"
    ],
    "name": "PixverseTemplateNode",
    "display_name": "PixVerse Template",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_pixverse",
    "category": "api node/video/PixVerse",
    "output_node": false
  },
  "StabilityStableImageUltraNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly definesWhat you wish to see in the output image. A strong, descriptive prompt that clearly defineselements, colors, and subjects will lead to better results. To control the weight of a given word use the format `(word:weight)`,where `word` is the word you'd like to control the weight of and `weight`is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`would convey a sky that was blue and green, but more green than blue."
          }
        ],
        "aspect_ratio": [
          [
            "1:1",
            "16:9",
            "9:16",
            "3:2",
            "2:3",
            "5:4",
            "4:5",
            "21:9",
            "9:21"
          ],
          {
            "default": "1:1",
            "tooltip": "Aspect ratio of generated image."
          }
        ],
        "style_preset": [
          [
            "None",
            "3d-model",
            "analog-film",
            "anime",
            "cinematic",
            "comic-book",
            "digital-art",
            "enhance",
            "fantasy-art",
            "isometric",
            "line-art",
            "low-poly",
            "modeling-compound",
            "neon-punk",
            "origami",
            "photographic",
            "pixel-art",
            "tile-texture"
          ],
          {
            "tooltip": "Optional desired style of generated image."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "A blurb of text describing what you do not wish to see in the output image. This is an advanced feature."
          }
        ],
        "image_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Denoise of input image; 0.0 yields image identical to input, 1.0 is as if no image was provided at all."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "aspect_ratio",
        "style_preset",
        "seed"
      ],
      "optional": [
        "image",
        "negative_prompt",
        "image_denoise"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "StabilityStableImageUltraNode",
    "display_name": "Stability AI Stable Image Ultra",
    "description": "Generates images synchronously based on prompt and resolution.",
    "python_module": "comfy_api_nodes.nodes_stability",
    "category": "api node/image/Stability AI",
    "output_node": false,
    "api_node": true
  },
  "StabilityStableImageSD_3_5Node": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results."
          }
        ],
        "model": [
          [
            "sd3.5-large",
            "sd3.5-medium"
          ]
        ],
        "aspect_ratio": [
          [
            "1:1",
            "16:9",
            "9:16",
            "3:2",
            "2:3",
            "5:4",
            "4:5",
            "21:9",
            "9:21"
          ],
          {
            "default": "1:1",
            "tooltip": "Aspect ratio of generated image."
          }
        ],
        "style_preset": [
          [
            "None",
            "3d-model",
            "analog-film",
            "anime",
            "cinematic",
            "comic-book",
            "digital-art",
            "enhance",
            "fantasy-art",
            "isometric",
            "line-art",
            "low-poly",
            "modeling-compound",
            "neon-punk",
            "origami",
            "photographic",
            "pixel-art",
            "tile-texture"
          ],
          {
            "tooltip": "Optional desired style of generated image."
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 4,
            "min": 1,
            "max": 10,
            "step": 0.1,
            "tooltip": "How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "Keywords of what you do not wish to see in the output image. This is an advanced feature."
          }
        ],
        "image_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Denoise of input image; 0.0 yields image identical to input, 1.0 is as if no image was provided at all."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "model",
        "aspect_ratio",
        "style_preset",
        "cfg_scale",
        "seed"
      ],
      "optional": [
        "image",
        "negative_prompt",
        "image_denoise"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "StabilityStableImageSD_3_5Node",
    "display_name": "Stability AI Stable Diffusion 3.5 Image",
    "description": "Generates images synchronously based on prompt and resolution.",
    "python_module": "comfy_api_nodes.nodes_stability",
    "category": "api node/image/Stability AI",
    "output_node": false,
    "api_node": true
  },
  "StabilityUpscaleConservativeNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results."
          }
        ],
        "creativity": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.2,
            "max": 0.5,
            "step": 0.01,
            "tooltip": "Controls the likelihood of creating additional details not heavily conditioned by the init image."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "Keywords of what you do not wish to see in the output image. This is an advanced feature."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt",
        "creativity",
        "seed"
      ],
      "optional": [
        "negative_prompt"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "StabilityUpscaleConservativeNode",
    "display_name": "Stability AI Upscale Conservative",
    "description": "Upscale image with minimal alterations to 4K resolution.",
    "python_module": "comfy_api_nodes.nodes_stability",
    "category": "api node/image/Stability AI",
    "output_node": false,
    "api_node": true
  },
  "StabilityUpscaleCreativeNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results."
          }
        ],
        "creativity": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.1,
            "max": 0.5,
            "step": 0.01,
            "tooltip": "Controls the likelihood of creating additional details not heavily conditioned by the init image."
          }
        ],
        "style_preset": [
          [
            "None",
            "3d-model",
            "analog-film",
            "anime",
            "cinematic",
            "comic-book",
            "digital-art",
            "enhance",
            "fantasy-art",
            "isometric",
            "line-art",
            "low-poly",
            "modeling-compound",
            "neon-punk",
            "origami",
            "photographic",
            "pixel-art",
            "tile-texture"
          ],
          {
            "tooltip": "Optional desired style of generated image."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "Keywords of what you do not wish to see in the output image. This is an advanced feature."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt",
        "creativity",
        "style_preset",
        "seed"
      ],
      "optional": [
        "negative_prompt"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "StabilityUpscaleCreativeNode",
    "display_name": "Stability AI Upscale Creative",
    "description": "Upscale image with minimal alterations to 4K resolution.",
    "python_module": "comfy_api_nodes.nodes_stability",
    "category": "api node/image/Stability AI",
    "output_node": false,
    "api_node": true
  },
  "StabilityUpscaleFastNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {

      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "StabilityUpscaleFastNode",
    "display_name": "Stability AI Upscale Fast",
    "description": "Quickly upscales an image via Stability API call to 4x its original size; intended for upscaling low-quality/compressed images.",
    "python_module": "comfy_api_nodes.nodes_stability",
    "category": "api node/image/Stability AI",
    "output_node": false,
    "api_node": true
  },
  "PikaImageToVideoNode2_2": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "The image to convert to video"
          }
        ],
        "prompt_text": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": null,
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ],
        "resolution": [
          "COMBO",
          {
            "options": [
              "1080p",
              "720p"
            ],
            "default": "1080p"
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [5, 10],
            "default": 5
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt_text",
        "negative_prompt",
        "seed",
        "resolution",
        "duration"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "PikaImageToVideoNode2_2",
    "display_name": "Pika Image to Video",
    "description": "Sends an image and prompt to the Pika API v2.2 to generate a video.",
    "python_module": "comfy_api_nodes.nodes_pika",
    "category": "api node/video/Pika",
    "output_node": false,
    "api_node": true
  },
  "PikaTextToVideoNode2_2": {
    "input": {
      "required": {
        "prompt_text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": null,
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ],
        "resolution": [
          "COMBO",
          {
            "options": [
              "1080p",
              "720p"
            ],
            "default": "1080p"
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [5, 10],
            "default": 5
          }
        ],
        "aspect_ratio": [
          "FLOAT",
          {
            "default": 1.77777777777778,
            "tooltip": "Aspect ratio (width / height)",
            "min": 0.4,
            "max": 2.5,
            "step": 0.001
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt_text",
        "negative_prompt",
        "seed",
        "resolution",
        "duration",
        "aspect_ratio"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "PikaTextToVideoNode2_2",
    "display_name": "Pika Text to Video",
    "description": "Sends a text prompt to the Pika API v2.2 to generate a video.",
    "python_module": "comfy_api_nodes.nodes_pika",
    "category": "api node/video/Pika",
    "output_node": false,
    "api_node": true
  },
  "PikaScenesV2_2": {
    "input": {
      "required": {
        "prompt_text": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": null,
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ],
        "resolution": [
          "COMBO",
          {
            "options": [
              "1080p",
              "720p"
            ],
            "default": "1080p"
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [5, 10],
            "default": 5
          }
        ],
        "ingredients_mode": [
          "COMBO",
          {
            "options": [
              "creative",
              "precise"
            ],
            "default": "creative"
          }
        ],
        "aspect_ratio": [
          "FLOAT",
          {
            "default": 1.77777777777778,
            "tooltip": "Aspect ratio (width / height)",
            "step": 0.001,
            "min": 0.4,
            "max": 2.5
          }
        ]
      },
      "optional": {
        "image_ingredient_1": [
          "IMAGE",
          {
            "tooltip": "Image that will be used as ingredient to create a video."
          }
        ],
        "image_ingredient_2": [
          "IMAGE",
          {
            "tooltip": "Image that will be used as ingredient to create a video."
          }
        ],
        "image_ingredient_3": [
          "IMAGE",
          {
            "tooltip": "Image that will be used as ingredient to create a video."
          }
        ],
        "image_ingredient_4": [
          "IMAGE",
          {
            "tooltip": "Image that will be used as ingredient to create a video."
          }
        ],
        "image_ingredient_5": [
          "IMAGE",
          {
            "tooltip": "Image that will be used as ingredient to create a video."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt_text",
        "negative_prompt",
        "seed",
        "resolution",
        "duration",
        "ingredients_mode",
        "aspect_ratio"
      ],
      "optional": [
        "image_ingredient_1",
        "image_ingredient_2",
        "image_ingredient_3",
        "image_ingredient_4",
        "image_ingredient_5"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "PikaScenesV2_2",
    "display_name": "Pika Scenes (Video Image Composition)",
    "description": "Combine your images to create a video with the objects in them. Upload multiple images as ingredients and generate a high-quality video that incorporates all of them.",
    "python_module": "comfy_api_nodes.nodes_pika",
    "category": "api node/video/Pika",
    "output_node": false,
    "api_node": true
  },
  "Pikadditions": {
    "input": {
      "required": {
        "video": [
          "VIDEO",
          {
            "tooltip": "The video to add an image to."
          }
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "The image to add to the video."
          }
        ],
        "prompt_text": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": null,
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "image",
        "prompt_text",
        "negative_prompt",
        "seed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "Pikadditions",
    "display_name": "Pikadditions (Video Object Insertion)",
    "description": "Add any object or image into your video. Upload a video and specify what you'd like to add to create a seamlessly integrated result.",
    "python_module": "comfy_api_nodes.nodes_pika",
    "category": "api node/video/Pika",
    "output_node": false,
    "api_node": true
  },
  "Pikaswaps": {
    "input": {
      "required": {
        "video": [
          "VIDEO",
          {
            "tooltip": "The video to swap an object in."
          }
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "The image used to replace the masked object in the video."
          }
        ],
        "mask": [
          "MASK",
          {
            "tooltip": "Use the mask to define areas in the video to replace"
          }
        ],
        "prompt_text": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": null,
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "image",
        "mask",
        "prompt_text",
        "negative_prompt",
        "seed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "Pikaswaps",
    "display_name": "Pika Swaps (Video Object Replacement)",
    "description": "Swap out any object or region of your video with a new image or object. Define areas to replace either with a mask or coordinates.",
    "python_module": "comfy_api_nodes.nodes_pika",
    "category": "api node/video/Pika",
    "output_node": false,
    "api_node": true
  },
  "Pikaffects": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "The reference image to apply the Pikaffect to."
          }
        ],
        "pikaffect": [
          "COMBO",
          {
            "options": [
              "Cake-ify",
              "Crumble",
              "Crush",
              "Decapitate",
              "Deflate",
              "Dissolve",
              "Explode",
              "Eye-pop",
              "Inflate",
              "Levitate",
              "Melt",
              "Peel",
              "Poke",
              "Squish",
              "Ta-da",
              "Tear"
            ],
            "default": "Cake-ify"
          }
        ],
        "prompt_text": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": null,
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "pikaffect",
        "prompt_text",
        "negative_prompt",
        "seed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "Pikaffects",
    "display_name": "Pikaffects (Video Effects)",
    "description": "Generate a video with a specific Pikaffect. Supported Pikaffects: Cake-ify, Crumble, Crush, Decapitate, Deflate, Dissolve, Explode, Eye-pop, Inflate, Levitate, Melt, Peel, Poke, Squish, Ta-da, Tear",
    "python_module": "comfy_api_nodes.nodes_pika",
    "category": "api node/video/Pika",
    "output_node": false,
    "api_node": true
  },
  "PikaStartEndFrameNode2_2": {
    "input": {
      "required": {
        "image_start": [
          "IMAGE",
          {
            "tooltip": "The first image to combine."
          }
        ],
        "image_end": [
          "IMAGE",
          {
            "tooltip": "The last image to combine."
          }
        ],
        "prompt_text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": null,
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ],
        "resolution": [
          "COMBO",
          {
            "options": [
              "1080p",
              "720p"
            ],
            "default": "1080p"
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [5, 10],
            "default": null
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image_start",
        "image_end",
        "prompt_text",
        "negative_prompt",
        "seed",
        "resolution",
        "duration"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "PikaStartEndFrameNode2_2",
    "display_name": "Pika Start and End Frame to Video",
    "description": "Generate a video by combining your first and last frame. Upload two images to define the start and end points, and let the AI create a smooth transition between them.",
    "python_module": "comfy_api_nodes.nodes_pika",
    "category": "api node/video/Pika",
    "output_node": false,
    "api_node": true
  },
  "RunwayFirstLastFrameNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Text prompt for the generation",
            "multiline": true
          }
        ],
        "start_frame": [
          "IMAGE",
          {
            "tooltip": "Start frame to be used for the video"
          }
        ],
        "end_frame": [
          "IMAGE",
          {
            "tooltip": "End frame to be used for the video. Supported for gen3a_turbo only."
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [5, 10]
          }
        ],
        "ratio": [
          "COMBO",
          {
            "options": [
              "768:1280",
              "1280:768"
            ]
          }
        ],
        "seed": [
          "INT",
          {
            "tooltip": "Random seed for generation",
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "unique_id": "UNIQUE_ID",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "start_frame",
        "end_frame",
        "duration",
        "ratio",
        "seed"
      ],
      "hidden": [
        "auth_token",
        "unique_id",
        "comfy_api_key"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "RunwayFirstLastFrameNode",
    "display_name": "Runway First-Last-Frame to Video",
    "description": "Upload first and last keyframes, draft a prompt, and generate a video. More complex transitions, such as cases where the Last frame is completely different from the First frame, may benefit from the longer 10s duration. This would give the generation more time to smoothly transition between the two inputs. Before diving in, review these best practices to ensure that your input selections will set your generation up for success: https://help.runwayml.com/hc/en-us/articles/34170748696595-Creating-with-Keyframes-on-Gen-3.",
    "python_module": "comfy_api_nodes.nodes_runway",
    "category": "api node/video/Runway",
    "output_node": false,
    "api_node": true
  },
  "RunwayImageToVideoNodeGen3a": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Text prompt for the generation",
            "multiline": true
          }
        ],
        "start_frame": [
          "IMAGE",
          {
            "tooltip": "Start frame to be used for the video"
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [5, 10]
          }
        ],
        "ratio": [
          "COMBO",
          {
            "options": [
              "768:1280",
              "1280:768"
            ]
          }
        ],
        "seed": [
          "INT",
          {
            "tooltip": "Random seed for generation",
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "start_frame",
        "duration",
        "ratio",
        "seed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "RunwayImageToVideoNodeGen3a",
    "display_name": "Runway Image to Video (Gen3a Turbo)",
    "description": "Generate a video from a single starting frame using Gen3a Turbo model. Before diving in, review these best practices to ensure that your input selections will set your generation up for success: https://help.runwayml.com/hc/en-us/articles/33927968552339-Creating-with-Act-One-on-Gen-3-Alpha-and-Turbo.",
    "python_module": "comfy_api_nodes.nodes_runway",
    "category": "api node/video/Runway",
    "output_node": false,
    "api_node": true
  },
  "RunwayImageToVideoNodeGen4": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": null,
            "tooltip": "Text prompt for the generation",
            "multiline": true
          }
        ],
        "start_frame": [
          "IMAGE",
          {
            "tooltip": "Start frame to be used for the video"
          }
        ],
        "duration": [
          "COMBO",
          {
            "options": [5, 10]
          }
        ],
        "ratio": [
          "COMBO",
          {
            "options": [
              "1280:720",
              "720:1280",
              "1104:832",
              "832:1104",
              "960:960",
              "1584:672"
            ]
          }
        ],
        "seed": [
          "INT",
          {
            "tooltip": "Random seed for generation",
            "min": 0,
            "max": 4294967295,
            "control_after_generate": true
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "start_frame",
        "duration",
        "ratio",
        "seed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "RunwayImageToVideoNodeGen4",
    "display_name": "Runway Image to Video (Gen4 Turbo)",
    "description": "Generate a video from a single starting frame using Gen4 Turbo model. Before diving in, review these best practices to ensure that your input selections will set your generation up for success: https://help.runwayml.com/hc/en-us/articles/37327109429011-Creating-with-Gen-4-Video.",
    "python_module": "comfy_api_nodes.nodes_runway",
    "category": "api node/video/Runway",
    "output_node": false,
    "api_node": true
  },
  "RunwayTextToImageNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "tooltip": "Text prompt for the image generation",
            "multiline": true
          }
        ],
        "ratio": [
          "COMBO",
          {
            "options": [
              "1920:1080",
              "1080:1920",
              "1024:1024",
              "1360:768",
              "1080:1080",
              "1168:880",
              "1440:1080",
              "1080:1440",
              "1808:768",
              "2112:912"
            ]
          }
        ]
      },
      "optional": {
        "reference_image": [
          "IMAGE",
          {
            "tooltip": "Optional reference image to guide the generation"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "ratio"
      ],
      "optional": [
        "reference_image"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RunwayTextToImageNode",
    "display_name": "Runway Text to Image",
    "description": "Generate an image from a text prompt using Runway's Gen 4 model. You can also include reference images to guide the generation.",
    "python_module": "comfy_api_nodes.nodes_runway",
    "category": "api node/image/Runway",
    "output_node": false,
    "api_node": true
  },
  "TripoTextToModelNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "model_version": [
          "COMBO",
          {
            "options": [
              "v2.5-20250123",
              "v2.0-20240919",
              "v1.4-20240625"
            ],
            "default": "v2.5-20250123"
          }
        ],
        "style": [
          "COMBO",
          {
            "options": [
              "person:person2cartoon",
              "animal:venom",
              "object:clay",
              "object:steampunk",
              "object:christmas",
              "object:barbie",
              "gold",
              "ancient_bronze",
              "None"
            ],
            "default": "None"
          }
        ],
        "texture": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "pbr": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "image_seed": [
          "INT",
          {
            "default": 42
          }
        ],
        "model_seed": [
          "INT",
          {
            "default": 42
          }
        ],
        "texture_seed": [
          "INT",
          {
            "default": 42
          }
        ],
        "texture_quality": [
          [
            "standard",
            "detailed"
          ],
          {
            "default": "standard"
          }
        ],
        "face_limit": [
          "INT",
          {
            "min": -1,
            "max": 500000,
            "default": -1
          }
        ],
        "quad": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "negative_prompt",
        "model_version",
        "style",
        "texture",
        "pbr",
        "image_seed",
        "model_seed",
        "texture_seed",
        "texture_quality",
        "face_limit",
        "quad"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING",
      "MODEL_TASK_ID"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model_file",
      "model task_id"
    ],
    "name": "TripoTextToModelNode",
    "display_name": "Tripo: Text to Model",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_tripo",
    "category": "api node/3d/Tripo",
    "output_node": true,
    "api_node": true
  },
  "TripoImageToModelNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "model_version": [
          "COMBO",
          {
            "options": [
              "v2.5-20250123",
              "v2.0-20240919",
              "v1.4-20240625"
            ],
            "default": null,
            "tooltip": "The model version to use for generation"
          }
        ],
        "style": [
          "COMBO",
          {
            "options": [
              "person:person2cartoon",
              "animal:venom",
              "object:clay",
              "object:steampunk",
              "object:christmas",
              "object:barbie",
              "gold",
              "ancient_bronze",
              "None"
            ],
            "default": "None"
          }
        ],
        "texture": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "pbr": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model_seed": [
          "INT",
          {
            "default": 42
          }
        ],
        "orientation": [
          "COMBO",
          {
            "options": [
              "align_image",
              "default"
            ],
            "default": "default"
          }
        ],
        "texture_seed": [
          "INT",
          {
            "default": 42
          }
        ],
        "texture_quality": [
          [
            "standard",
            "detailed"
          ],
          {
            "default": "standard"
          }
        ],
        "texture_alignment": [
          [
            "original_image",
            "geometry"
          ],
          {
            "default": "original_image"
          }
        ],
        "face_limit": [
          "INT",
          {
            "min": -1,
            "max": 500000,
            "default": -1
          }
        ],
        "quad": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "model_version",
        "style",
        "texture",
        "pbr",
        "model_seed",
        "orientation",
        "texture_seed",
        "texture_quality",
        "texture_alignment",
        "face_limit",
        "quad"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING",
      "MODEL_TASK_ID"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model_file",
      "model task_id"
    ],
    "name": "TripoImageToModelNode",
    "display_name": "Tripo: Image to Model",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_tripo",
    "category": "api node/3d/Tripo",
    "output_node": true,
    "api_node": true
  },
  "TripoMultiviewToModelNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "image_left": [
          "IMAGE"
        ],
        "image_back": [
          "IMAGE"
        ],
        "image_right": [
          "IMAGE"
        ],
        "model_version": [
          "COMBO",
          {
            "options": [
              "v2.5-20250123",
              "v2.0-20240919",
              "v1.4-20240625"
            ],
            "default": null,
            "tooltip": "The model version to use for generation"
          }
        ],
        "orientation": [
          "COMBO",
          {
            "options": [
              "align_image",
              "default"
            ],
            "default": "default"
          }
        ],
        "texture": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "pbr": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model_seed": [
          "INT",
          {
            "default": 42
          }
        ],
        "texture_seed": [
          "INT",
          {
            "default": 42
          }
        ],
        "texture_quality": [
          [
            "standard",
            "detailed"
          ],
          {
            "default": "standard"
          }
        ],
        "texture_alignment": [
          [
            "original_image",
            "geometry"
          ],
          {
            "default": "original_image"
          }
        ],
        "face_limit": [
          "INT",
          {
            "min": -1,
            "max": 500000,
            "default": -1
          }
        ],
        "quad": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "image_left",
        "image_back",
        "image_right",
        "model_version",
        "orientation",
        "texture",
        "pbr",
        "model_seed",
        "texture_seed",
        "texture_quality",
        "texture_alignment",
        "face_limit",
        "quad"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING",
      "MODEL_TASK_ID"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model_file",
      "model task_id"
    ],
    "name": "TripoMultiviewToModelNode",
    "display_name": "Tripo: Multiview to Model",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_tripo",
    "category": "api node/3d/Tripo",
    "output_node": true,
    "api_node": true
  },
  "TripoTextureNode": {
    "input": {
      "required": {
        "model_task_id": [
          "MODEL_TASK_ID"
        ]
      },
      "optional": {
        "texture": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "pbr": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "texture_seed": [
          "INT",
          {
            "default": 42
          }
        ],
        "texture_quality": [
          [
            "standard",
            "detailed"
          ],
          {
            "default": "standard"
          }
        ],
        "texture_alignment": [
          [
            "original_image",
            "geometry"
          ],
          {
            "default": "original_image"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model_task_id"
      ],
      "optional": [
        "texture",
        "pbr",
        "texture_seed",
        "texture_quality",
        "texture_alignment"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING",
      "MODEL_TASK_ID"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model_file",
      "model task_id"
    ],
    "name": "TripoTextureNode",
    "display_name": "Tripo: Texture model",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_tripo",
    "category": "api node/3d/Tripo",
    "output_node": true,
    "api_node": true
  },
  "TripoRefineNode": {
    "input": {
      "required": {
        "model_task_id": [
          "MODEL_TASK_ID",
          {
            "tooltip": "Must be a v1.4 Tripo model"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model_task_id"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING",
      "MODEL_TASK_ID"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model_file",
      "model task_id"
    ],
    "name": "TripoRefineNode",
    "display_name": "Tripo: Refine Draft model",
    "description": "Refine a draft model created by v1.4 Tripo models only.",
    "python_module": "comfy_api_nodes.nodes_tripo",
    "category": "api node/3d/Tripo",
    "output_node": true,
    "api_node": true
  },
  "TripoRigNode": {
    "input": {
      "required": {
        "original_model_task_id": [
          "MODEL_TASK_ID"
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "original_model_task_id"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING",
      "RIG_TASK_ID"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model_file",
      "rig task_id"
    ],
    "name": "TripoRigNode",
    "display_name": "Tripo: Rig model",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_tripo",
    "category": "api node/3d/Tripo",
    "output_node": true,
    "api_node": true
  },
  "TripoRetargetNode": {
    "input": {
      "required": {
        "original_model_task_id": [
          "RIG_TASK_ID"
        ],
        "animation": [
          [
            "preset:idle",
            "preset:walk",
            "preset:climb",
            "preset:jump",
            "preset:slash",
            "preset:shoot",
            "preset:hurt",
            "preset:fall",
            "preset:turn"
          ]
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "original_model_task_id",
        "animation"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING",
      "RETARGET_TASK_ID"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model_file",
      "retarget task_id"
    ],
    "name": "TripoRetargetNode",
    "display_name": "Tripo: Retarget rigged model",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_tripo",
    "category": "api node/3d/Tripo",
    "output_node": true,
    "api_node": true
  },
  "TripoConversionNode": {
    "input": {
      "required": {
        "original_model_task_id": [
          "MODEL_TASK_ID,RIG_TASK_ID,RETARGET_TASK_ID"
        ],
        "format": [
          [
            "GLTF",
            "USDZ",
            "FBX",
            "OBJ",
            "STL",
            "3MF"
          ]
        ]
      },
      "optional": {
        "quad": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "face_limit": [
          "INT",
          {
            "min": -1,
            "max": 500000,
            "default": -1
          }
        ],
        "texture_size": [
          "INT",
          {
            "min": 128,
            "max": 4096,
            "default": 4096
          }
        ],
        "texture_format": [
          [
            "BMP",
            "DPX",
            "HDR",
            "JPEG",
            "OPEN_EXR",
            "PNG",
            "TARGA",
            "TIFF",
            "WEBP"
          ],
          {
            "default": "JPEG"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "original_model_task_id",
        "format"
      ],
      "optional": [
        "quad",
        "face_limit",
        "texture_size",
        "texture_format"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "TripoConversionNode",
    "display_name": "Tripo: Convert model",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_tripo",
    "category": "api node/3d/Tripo",
    "output_node": true,
    "api_node": true
  },
  "MoonvalleyImg2VideoNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "gopro, bright, contrast, static, overexposed, bright, vignette, artifacts, still, noise, texture, scanlines, videogame, 360 camera, VR, transition, flare, saturation, distorted, warped, wide angle, contrast, saturated, vibrant, glowing, cross dissolve, texture, videogame, saturation, cheesy, ugly hands, mutated hands, mutant, disfigured, extra fingers, blown out, horrible, blurry, worst quality, bad, transition, dissolve, cross-dissolve, melt, fade in, fade out, wobbly, weird, low quality, plastic, stock footage, video camera, boring, static",
            "tooltip": "Negative prompt text",
            "multiline": true
          }
        ],
        "resolution": [
          "COMBO",
          {
            "options": [
              "16:9 (1920 x 1080)",
              "9:16 (1080 x 1920)",
              "1:1 (1152 x 1152)",
              "4:3 (1440 x 1080)",
              "3:4 (1080 x 1440)",
              "21:9 (2560 x 1080)"
            ],
            "default": "16:9 (1920 x 1080)",
            "tooltip": "Resolution of the output video"
          }
        ],
        "prompt_adherence": [
          "FLOAT",
          {
            "default": 7,
            "tooltip": "Guidance scale for generation control",
            "step": 1,
            "min": 1,
            "max": 20
          }
        ],
        "seed": [
          "INT",
          {
            "default": 2523226763,
            "tooltip": "Random seed value",
            "min": 0,
            "max": 4294967295,
            "step": 1,
            "display": "number",
            "control_after_generate": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 100,
            "tooltip": "Number of denoising steps",
            "min": 1,
            "max": 100
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      },
      "optional": {
        "image": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "The reference image used to generate the video"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "negative_prompt",
        "resolution",
        "prompt_adherence",
        "seed",
        "steps"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "video"
    ],
    "name": "MoonvalleyImg2VideoNode",
    "display_name": "Moonvalley Marey Image to Video",
    "description": "Moonvalley Marey Image to Video Node",
    "python_module": "comfy_api_nodes.nodes_moonvalley",
    "category": "api node/video/Moonvalley Marey",
    "output_node": false,
    "api_node": true
  },
  "MoonvalleyTxt2VideoNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": null,
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "gopro, bright, contrast, static, overexposed, bright, vignette, artifacts, still, noise, texture, scanlines, videogame, 360 camera, VR, transition, flare, saturation, distorted, warped, wide angle, contrast, saturated, vibrant, glowing, cross dissolve, texture, videogame, saturation, cheesy, ugly hands, mutated hands, mutant, disfigured, extra fingers, blown out, horrible, blurry, worst quality, bad, transition, dissolve, cross-dissolve, melt, fade in, fade out, wobbly, weird, low quality, plastic, stock footage, video camera, boring, static",
            "tooltip": "Negative prompt text",
            "multiline": true
          }
        ],
        "resolution": [
          "COMBO",
          {
            "options": [
              "16:9 (1920 x 1080)",
              "9:16 (1080 x 1920)",
              "1:1 (1152 x 1152)",
              "4:3 (1440 x 1080)",
              "3:4 (1080 x 1440)",
              "21:9 (2560 x 1080)"
            ],
            "default": "16:9 (1920 x 1080)",
            "tooltip": "Resolution of the output video"
          }
        ],
        "prompt_adherence": [
          "FLOAT",
          {
            "default": 7,
            "tooltip": "Guidance scale for generation control",
            "step": 1,
            "min": 1,
            "max": 20
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1745103823,
            "tooltip": "Random seed value",
            "min": 0,
            "max": 4294967295,
            "step": 1,
            "display": "number",
            "control_after_generate": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 100,
            "tooltip": "Number of denoising steps",
            "min": 1,
            "max": 100
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "prompt",
        "negative_prompt",
        "resolution",
        "prompt_adherence",
        "seed",
        "steps"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ],
      "optional": []
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "video"
    ],
    "name": "MoonvalleyTxt2VideoNode",
    "display_name": "Moonvalley Marey Text to Video",
    "description": "",
    "python_module": "comfy_api_nodes.nodes_moonvalley",
    "category": "api node/video/Moonvalley Marey",
    "output_node": false,
    "api_node": true
  },
  "Rodin3D_Regular": {
    "input": {
      "required": {
        "Images": [
          "IMAGE",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "Seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 65535,
            "display": "number"
          }
        ],
        "Material_Type": [
          "COMBO",
          {
            "options": [
              "PBR",
              "Shaded"
            ],
            "default": "PBR"
          }
        ],
        "Polygon_count": [
          "COMBO",
          {
            "options": [
              "4K-Quad",
              "8K-Quad",
              "18K-Quad",
              "50K-Quad",
              "200K-Triangle"
            ],
            "default": "18K-Quad"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "Images"
      ],
      "optional": [
        "Seed",
        "Material_Type",
        "Polygon_count"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "3D Model Path"
    ],
    "name": "Rodin3D_Regular",
    "display_name": "Rodin 3D Generate - Regular Generate",
    "description": "Generate 3D Assets using Rodin API",
    "python_module": "comfy_api_nodes.nodes_rodin",
    "category": "api node/3d/Rodin",
    "output_node": false,
    "api_node": true
  },
  "Rodin3D_Detail": {
    "input": {
      "required": {
        "Images": [
          "IMAGE",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "Seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 65535,
            "display": "number"
          }
        ],
        "Material_Type": [
          "COMBO",
          {
            "options": [
              "PBR",
              "Shaded"
            ],
            "default": "PBR"
          }
        ],
        "Polygon_count": [
          "COMBO",
          {
            "options": [
              "4K-Quad",
              "8K-Quad",
              "18K-Quad",
              "50K-Quad",
              "200K-Triangle"
            ],
            "default": "18K-Quad"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "Images"
      ],
      "optional": [
        "Seed",
        "Material_Type",
        "Polygon_count"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "3D Model Path"
    ],
    "name": "Rodin3D_Detail",
    "display_name": "Rodin 3D Generate - Detail Generate",
    "description": "Generate 3D Assets using Rodin API",
    "python_module": "comfy_api_nodes.nodes_rodin",
    "category": "api node/3d/Rodin",
    "output_node": false,
    "api_node": true
  },
  "Rodin3D_Smooth": {
    "input": {
      "required": {
        "Images": [
          "IMAGE",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "Seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 65535,
            "display": "number"
          }
        ],
        "Material_Type": [
          "COMBO",
          {
            "options": [
              "PBR",
              "Shaded"
            ],
            "default": "PBR"
          }
        ],
        "Polygon_count": [
          "COMBO",
          {
            "options": [
              "4K-Quad",
              "8K-Quad",
              "18K-Quad",
              "50K-Quad",
              "200K-Triangle"
            ],
            "default": "18K-Quad"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "Images"
      ],
      "optional": [
        "Seed",
        "Material_Type",
        "Polygon_count"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "3D Model Path"
    ],
    "name": "Rodin3D_Smooth",
    "display_name": "Rodin 3D Generate - Smooth Generate",
    "description": "Generate 3D Assets using Rodin API",
    "python_module": "comfy_api_nodes.nodes_rodin",
    "category": "api node/3d/Rodin",
    "output_node": false,
    "api_node": true
  },
  "Rodin3D_Sketch": {
    "input": {
      "required": {
        "Images": [
          "IMAGE",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "Seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 65535,
            "display": "number"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "Images"
      ],
      "optional": [
        "Seed"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "3D Model Path"
    ],
    "name": "Rodin3D_Sketch",
    "display_name": "Rodin 3D Generate - Sketch Generate",
    "description": "Generate 3D Assets using Rodin API",
    "python_module": "comfy_api_nodes.nodes_rodin",
    "category": "api node/3d/Rodin",
    "output_node": false,
    "api_node": true
  },
  "GeminiNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text inputs to the model, used to generate a response. You can include detailed instructions, questions, or context for the model."
          }
        ],
        "model": [
          "COMBO",
          {
            "tooltip": "The Gemini model to use for generating responses.",
            "options": [
              "gemini-2.5-pro-preview-05-06",
              "gemini-2.5-flash-preview-04-17"
            ],
            "default": "gemini-2.5-pro-preview-05-06"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 42,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "control_after_generate": true,
            "tooltip": "When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. Deterministic output isn't guaranteed. Also, changing the model or parameter settings, such as the temperature, can cause variations in the response even when you use the same seed value. By default, a random seed value is used."
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Optional image(s) to use as context for the model. To include multiple images, you can use the Batch Images node."
          }
        ],
        "audio": [
          "AUDIO",
          {
            "tooltip": "Optional audio to use as context for the model.",
            "default": null
          }
        ],
        "video": [
          "VIDEO",
          {
            "tooltip": "Optional video to use as context for the model.",
            "default": null
          }
        ],
        "files": [
          "GEMINI_INPUT_FILES",
          {
            "default": null,
            "tooltip": "Optional file(s) to use as context for the model. Accepts inputs from the Gemini Generate Content Input Files node."
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG",
        "comfy_api_key": "API_KEY_COMFY_ORG",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "model",
        "seed"
      ],
      "optional": [
        "images",
        "audio",
        "video",
        "files"
      ],
      "hidden": [
        "auth_token",
        "comfy_api_key",
        "unique_id"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "GeminiNode",
    "display_name": "Google Gemini",
    "description": "Generate text responses with Google's Gemini AI model. You can provide multiple types of inputs (text, images, audio, video) as context for generating more relevant and meaningful responses.",
    "python_module": "comfy_api_nodes.nodes_gemini",
    "category": "api node/text/Gemini",
    "output_node": false,
    "api_node": true
  },
  "GeminiInputFiles": {
    "input": {
      "required": {
        "file": [
          "COMBO",
          {
            "tooltip": "Input files to include as context for the model. Only accepts text (.txt) and PDF (.pdf) files for now.",
            "options": [],
            "default": null
          }
        ]
      },
      "optional": {
        "GEMINI_INPUT_FILES": [
          "GEMINI_INPUT_FILES",
          {
            "tooltip": "An optional additional file(s) to batch together with the file loaded from this node. Allows chaining of input files so that a single message can include multiple input files.",
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file"
      ],
      "optional": [
        "GEMINI_INPUT_FILES"
      ]
    },
    "output": [
      "GEMINI_INPUT_FILES"
    ],
    "output_is_list": [false],
    "output_name": [
      "GEMINI_INPUT_FILES"
    ],
    "name": "GeminiInputFiles",
    "display_name": "Gemini Input Files",
    "description": "Loads and prepares input files to include as inputs for Gemini LLM nodes. The files will be read by the Gemini model when generating a response. The contents of the text file count toward the token limit. 🛈 TIP: Can be chained together with other Gemini Input File nodes.",
    "python_module": "comfy_api_nodes.nodes_gemini",
    "category": "api node/text/Gemini",
    "output_node": false
  },
  "Animation Builder (mtb)": {
    "input": {
      "required": {
        "total_frames": [
          "INT",
          {
            "default": 100,
            "min": 0
          }
        ],
        "scale_float": [
          "FLOAT",
          {
            "default": 1,
            "min": 0
          }
        ],
        "loop_count": [
          "INT",
          {
            "default": 1,
            "min": 0
          }
        ],
        "raw_iteration": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "raw_loop": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "total_frames",
        "scale_float",
        "loop_count",
        "raw_iteration",
        "raw_loop"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "INT",
      "BOOLEAN"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "frame",
      "0-1 (scaled)",
      "count",
      "loop_ended"
    ],
    "name": "Animation Builder (mtb)",
    "display_name": "Animation Builder (mtb)",
    "description": "\n# Animation Builder\n\nCheck the\n[wiki page](https://github.com/melMass/comfy_mtb/wiki/nodes-animation-builder)\nfor more info.\n\n\n- This basic example should help to understand the meaning of\nits inputs and outputs thanks to the [debug](nodes-debug) node.\n\n![](https://github.com/melMass/comfy_mtb/assets/7041726/2b5c7e4f-372d-4494-9e73-abb2daa7cb36)\n\n- In this other example Animation Builder is used in combination with\n[Batch From History](https://github.com/melMass/comfy_mtb/wiki/nodes-batch-from-history)\nto create a zoom-in animation on a static image\n\n![](https://github.com/melMass/comfy_mtb/assets/7041726/77d37da1-0a8e-4519-a493-dfdef7f755ea)\n\n## Inputs\n\n| name | description |\n| ---- | :----------:|\n| total_frames | The number of frame to queue (this is multiplied by the `loop_count`)|\n| scale_float | Convenience input to scale the normalized `current value` (a float between 0 and 1 lerp over the current queue length) |\n| loop_count | The number of loops to queue |\n| **Reset Button** | resets the internal counters, although the node is though around using its queue button it should still work fine when using the regular queue button of comfy |\n| **Queue Button** | Convenience button to run the queues (`total_frames` * `loop_count`) |\n\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/animation",
    "output_node": false
  },
  "Audio Sequence (mtb)": {
    "input": {
      "required": {
        "silence_duration": [
          "FLOAT",
          {
            "default": 0,
            "min": -999,
            "max": 999,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "silence_duration"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "sequenced_audio"
    ],
    "name": "Audio Sequence (mtb)",
    "display_name": "Audio Sequence (mtb)",
    "description": "Sequence audio inputs (dynamic inputs).\n\n    - adding silence_duration between each segment\n      can now also be negative to overlap the clips, safely bound\n      to the the input length.\n    - resample audios to the highest sample rate in the inputs.\n    - convert them all to stereo if one of the inputs is.\n    ",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Audio Stack (mtb)": {
    "input": {
      "required": {

      }
    },
    "input_order": {
      "required": []
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "stacked_audio"
    ],
    "name": "Audio Stack (mtb)",
    "display_name": "Audio Stack (mtb)",
    "description": "Stack/Overlay audio inputs (dynamic inputs).\n\n    - pad audios to the longest inputs.\n    - resample audios to the highest sample rate in the inputs.\n    - convert them all to stereo if one of the inputs is.\n    ",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Audio Cut (mtb)": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "length": [
          "FLOAT",
          {
            "default": 1000,
            "min": 0,
            "max": 999999,
            "step": 1
          }
        ],
        "offset": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 999999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "length",
        "offset"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "cut_audio"
    ],
    "name": "Audio Cut (mtb)",
    "display_name": "Audio Cut (mtb)",
    "description": "Basic audio cutter, values are in ms.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Audio Resample (mtb)": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "sample_rate": [
          "INT",
          {
            "default": 16000,
            "min": 1000,
            "max": 192000,
            "step": 100,
            "tooltip": "Target sample rate in Hz. Whisper requires 16000."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "sample_rate"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "resampled_audio"
    ],
    "name": "Audio Resample (mtb)",
    "display_name": "Audio Resample (mtb)",
    "description": "Resample audio to a different sample rate.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Audio Isolate Speaker (mtb)": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "whisper_data": [
          "WHISPER_CHUNKS"
        ],
        "target_speaker": [
          "STRING",
          {
            "default": "SPEAKER_00"
          }
        ],
        "mode": [
          [
            "isolate",
            "mute"
          ],
          {
            "default": "isolate"
          }
        ],
        "fade_ms": [
          "FLOAT",
          {
            "default": 100,
            "min": 0,
            "max": 1000,
            "step": 10,
            "tooltip": "Fade duration in milliseconds to avoid clicks"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "whisper_data",
        "target_speaker",
        "mode",
        "fade_ms"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "processed_audio"
    ],
    "name": "Audio Isolate Speaker (mtb)",
    "display_name": "Audio Isolate Speaker (mtb)",
    "description": "Isolate or mute specific speakers using WhisperData",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Load Whisper (mtb)": {
    "input": {
      "required": {
        "model_size": [
          [
            "tiny",
            "small",
            "medium",
            "medium.en",
            "base",
            "large",
            "large-v2",
            "large-v3",
            "large-v3-turbo"
          ],
          {
            "default": "tiny"
          }
        ]
      },
      "optional": {
        "download_missing": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Download missing models if missing,otherwise they must be in ComfyUI/models/whisper"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_size"
      ],
      "optional": [
        "download_missing"
      ]
    },
    "output": [
      "WHISPER_PIPELINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipeline"
    ],
    "name": "Load Whisper (mtb)",
    "display_name": "Load Whisper (mtb)",
    "description": "Load Whisper model and processor.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Audio To Text (mtb)": {
    "input": {
      "required": {
        "pipeline": [
          "WHISPER_PIPELINE"
        ],
        "audio": [
          "AUDIO"
        ],
        "language": [
          [
            "auto",
            "de",
            "en",
            "es",
            "fr",
            "it",
            "ja",
            "ko",
            "nl",
            "pt",
            "ru",
            "zh"
          ],
          {
            "default": "auto"
          }
        ],
        "return_timestamps": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipeline",
        "audio",
        "language",
        "return_timestamps"
      ]
    },
    "output": [
      "STRING",
      "WHISPER_OUTPUT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "STRING",
      "WHISPER_OUTPUT"
    ],
    "name": "Audio To Text (mtb)",
    "display_name": "Audio To Text (mtb)",
    "description": "Transcribe audio to text using Whisper.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Process Whisper Output (mtb)": {
    "input": {
      "required": {
        "whisper_output": [
          "WHISPER_OUTPUT"
        ],
        "min_chunk_length": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "whisper_output",
        "min_chunk_length"
      ]
    },
    "output": [
      "STRING",
      "WHISPER_CHUNKS"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "STRING",
      "WHISPER_CHUNKS"
    ],
    "name": "Process Whisper Output (mtb)",
    "display_name": "Process Whisper Output (mtb)",
    "description": "Process Whisper output into timestamped chunks.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Process Whisper Diarization (mtb)": {
    "input": {
      "required": {
        "whisper_chunks": [
          "WHISPER_CHUNKS"
        ],
        "audio": [
          "AUDIO"
        ],
        "backend": [
          [
            "pyannote",
            "nemo"
          ],
          {
            "default": "pyannote"
          }
        ],
        "num_speakers": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "device": [
          [
            "cuda",
            "cpu"
          ],
          {
            "default": "cuda"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "whisper_chunks",
        "audio",
        "backend",
        "num_speakers"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "WHISPER_CHUNKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "WHISPER_CHUNKS"
    ],
    "name": "Process Whisper Diarization (mtb)",
    "display_name": "Process Whisper Diarization (mtb)",
    "description": "Process Whisper chunks with speaker diarization using either pyannote or NeMo.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Audio Duration (mtb)": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "duration_ms"
    ],
    "name": "Audio Duration (mtb)",
    "display_name": "Audio Duration (mtb)",
    "description": "Get audio duration in milliseconds.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Batch2d Transform (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "border_handling": [
          [
            "edge",
            "constant",
            "reflect",
            "symmetric"
          ],
          {
            "default": "edge"
          }
        ],
        "constant_color": [
          "COLOR",
          {
            "default": "#000000"
          }
        ]
      },
      "optional": {
        "x": [
          "FLOATS"
        ],
        "y": [
          "FLOATS"
        ],
        "zoom": [
          "FLOATS"
        ],
        "angle": [
          "FLOATS"
        ],
        "shear": [
          "FLOATS"
        ],
        "use_normalized": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "If true, transform values will be scaled to image dimensions."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "border_handling",
        "constant_color"
      ],
      "optional": [
        "x",
        "y",
        "zoom",
        "angle",
        "shear",
        "use_normalized"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch2d Transform (mtb)",
    "display_name": "Batch2d Transform (mtb)",
    "description": "# Batch Transform\n\nTransform a batch of images using a batch of keyframes\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float (mtb)": {
    "input": {
      "required": {
        "mode": [
          [
            "Single",
            "Steps"
          ],
          {
            "default": "Steps"
          }
        ],
        "count": [
          "INT",
          {
            "default": 2
          }
        ],
        "min": [
          "FLOAT",
          {
            "default": 0,
            "min": -10000,
            "max": 10000,
            "step": 0.001
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1,
            "min": -10000,
            "max": 10000,
            "step": 0.001
          }
        ],
        "easing": [
          [
            "Linear",
            "Sine In",
            "Sine Out",
            "Sine In/Out",
            "Quart In",
            "Quart Out",
            "Quart In/Out",
            "Cubic In",
            "Cubic Out",
            "Cubic In/Out",
            "Circ In",
            "Circ Out",
            "Circ In/Out",
            "Back In",
            "Back Out",
            "Back In/Out",
            "Elastic In",
            "Elastic Out",
            "Elastic In/Out",
            "Bounce In",
            "Bounce Out",
            "Bounce In/Out"
          ],
          {
            "default": "Linear"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "count",
        "min",
        "max",
        "easing"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float (mtb)",
    "display_name": "Batch Float (mtb)",
    "description": "# Batch Float\n\nGenerates a batch of float values with interpolation\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float Assemble (mtb)": {
    "input": {
      "required": {
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reverse"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float Assemble (mtb)",
    "display_name": "Batch Float Assemble (mtb)",
    "description": "# Batch Float Assemble\n\nAssembles mutiple batches of floats into a single stream (batch)\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float Fill (mtb)": {
    "input": {
      "required": {
        "floats": [
          "FLOATS"
        ],
        "direction": [
          [
            "head",
            "tail"
          ],
          {
            "default": "tail"
          }
        ],
        "value": [
          "FLOAT",
          {
            "default": 0
          }
        ],
        "count": [
          "INT",
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "floats",
        "direction",
        "value",
        "count"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float Fill (mtb)",
    "display_name": "Batch Float Fill (mtb)",
    "description": "# Batch Float Fill\n\nFills a batch float with a single value until it reaches the target length\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float Fit (mtb)": {
    "input": {
      "required": {
        "values": [
          "FLOATS",
          {
            "forceInput": true
          }
        ],
        "clamp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "auto_compute_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "source_min": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.01
          }
        ],
        "source_max": [
          "FLOAT",
          {
            "default": 1,
            "step": 0.01
          }
        ],
        "target_min": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.01
          }
        ],
        "target_max": [
          "FLOAT",
          {
            "default": 1,
            "step": 0.01
          }
        ],
        "easing": [
          [
            "Linear",
            "Sine In",
            "Sine Out",
            "Sine In/Out",
            "Quart In",
            "Quart Out",
            "Quart In/Out",
            "Cubic In",
            "Cubic Out",
            "Cubic In/Out",
            "Circ In",
            "Circ Out",
            "Circ In/Out",
            "Back In",
            "Back Out",
            "Back In/Out",
            "Elastic In",
            "Elastic Out",
            "Elastic In/Out",
            "Bounce In",
            "Bounce Out",
            "Bounce In/Out"
          ],
          {
            "default": "Linear"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "values",
        "clamp",
        "auto_compute_source",
        "source_min",
        "source_max",
        "target_min",
        "target_max",
        "easing"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float Fit (mtb)",
    "display_name": "Batch Float Fit (mtb)",
    "description": "Fit a list of floats using a source and target range",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float Math (mtb)": {
    "input": {
      "required": {
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "operation": [
          [
            "add",
            "sub",
            "mul",
            "div",
            "pow",
            "abs"
          ],
          {
            "default": "add"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reverse",
        "operation"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float Math (mtb)",
    "display_name": "Batch Float Math (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Batch Float Normalize (mtb)": {
    "input": {
      "required": {
        "floats": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [false],
    "output_name": [
      "normalized_floats"
    ],
    "name": "Batch Float Normalize (mtb)",
    "display_name": "Batch Float Normalize (mtb)",
    "description": "Normalize the values in the list of floats",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch From Folder (mtb)": {
    "input": {
      "required": {
        "enable": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Enable or disable the node. If disabled, returns passthrough_image or an empty tensor."
          }
        ],
        "folder_path": [
          "STRING",
          {
            "default": "",
            "tooltip": "Path to the folder containing images. Relative paths are resolved to the ComfyUI output directory."
          }
        ],
        "mode": [
          [
            "latest",
            "oldest",
            "random"
          ],
          {
            "default": "latest",
            "tooltip": "How to select images: latest, oldest, or random."
          }
        ],
        "count": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000,
            "tooltip": "Number of images to load from the folder."
          }
        ],
        "filter": [
          "STRING",
          {
            "default": "*",
            "tooltip": "Glob filter for image filenames (e.g. *.png)."
          }
        ]
      },
      "optional": {
        "passthrough_image": [
          "IMAGE",
          {
            "tooltip": "If provided and node is disabled, this image is passed through instead of returning an empty tensor."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "enable",
        "folder_path",
        "mode",
        "count",
        "filter"
      ],
      "optional": [
        "passthrough_image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Batch From Folder (mtb)",
    "display_name": "Batch From Folder (mtb)",
    "description": "Load images from a folder with options for latest, oldest, or random selection.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Make (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "count": [
          "INT",
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "count"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Make (mtb)",
    "display_name": "Batch Make (mtb)",
    "description": "# Batch Make \n\nSimply duplicates the input frame as a batch",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Merge (mtb)": {
    "input": {
      "required": {
        "fusion_mode": [
          [
            "add",
            "multiply",
            "average"
          ],
          {
            "default": "average"
          }
        ],
        "fill": [
          [
            "head",
            "tail"
          ],
          {
            "default": "tail"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "fusion_mode",
        "fill"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Merge (mtb)",
    "display_name": "Batch Merge (mtb)",
    "description": "# Batch Merge\n\nMerges multiple image batches with different frame counts\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Sequence (mtb)": {
    "input": {
      "required": {
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reverse"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Sequence (mtb)",
    "display_name": "Batch Sequence (mtb)",
    "description": "Sequences multiple image batches one after another",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Sequence Plus (mtb)": {
    "input": {
      "required": {
        "transition": [
          [
            "none",
            "crossfade",
            "slide_left",
            "slide_right",
            "slide_up",
            "slide_down",
            "wipe_left",
            "wipe_right",
            "wipe_up",
            "wipe_down",
            "band_wipe_h",
            "band_wipe_v"
          ],
          {
            "default": "none"
          }
        ],
        "overlap_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "transition",
        "overlap_frames",
        "reverse"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Sequence Plus (mtb)",
    "display_name": "Batch Sequence Plus (mtb)",
    "description": "Sequences multiple image batches with transition effects.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Shake (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "position_amount_x": [
          "FLOAT",
          {
            "default": 1
          }
        ],
        "position_amount_y": [
          "FLOAT",
          {
            "default": 1
          }
        ],
        "rotation_amount": [
          "FLOAT",
          {
            "default": 10
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.005
          }
        ],
        "frequency_divider": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.005
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 1,
            "min": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "position_amount_x",
        "position_amount_y",
        "rotation_amount",
        "frequency",
        "frequency_divider",
        "octaves",
        "seed"
      ]
    },
    "output": [
      "IMAGE",
      "FLOATS",
      "FLOATS",
      "FLOATS"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image",
      "pos_x",
      "pos_y",
      "rot"
    ],
    "name": "Batch Shake (mtb)",
    "display_name": "Batch Shake (mtb)",
    "description": "# Batch Shake\n\nApplies a shaking effect to batches of images.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Shape (mtb)": {
    "input": {
      "required": {
        "count": [
          "INT",
          {
            "default": 1
          }
        ],
        "shape": [
          [
            "Box",
            "Circle",
            "Diamond",
            "Tube"
          ],
          {
            "default": "Circle"
          }
        ],
        "image_width": [
          "INT",
          {
            "default": 512
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512
          }
        ],
        "shape_size": [
          "INT",
          {
            "default": 100
          }
        ],
        "color": [
          "COLOR",
          {
            "default": "#ffffff"
          }
        ],
        "bg_color": [
          "COLOR",
          {
            "default": "#000000"
          }
        ],
        "shade_color": [
          "COLOR",
          {
            "default": "#000000"
          }
        ],
        "thickness": [
          "INT",
          {
            "default": 5
          }
        ],
        "shadex": [
          "FLOAT",
          {
            "default": 0
          }
        ],
        "shadey": [
          "FLOAT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "count",
        "shape",
        "image_width",
        "image_height",
        "shape_size",
        "color",
        "bg_color",
        "shade_color",
        "thickness",
        "shadex",
        "shadey"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Shape (mtb)",
    "display_name": "Batch Shape (mtb)",
    "description": "# Batch Shape\n\nGenerates a batch of 2D shapes with optional shading (experimental)\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Time Wrap (mtb)": {
    "input": {
      "required": {
        "target_count": [
          "INT",
          {
            "default": 25,
            "min": 2
          }
        ],
        "frames": [
          "IMAGE"
        ],
        "curve": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "target_count",
        "frames",
        "curve"
      ]
    },
    "output": [
      "IMAGE",
      "FLOATS"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "interpolated_floats"
    ],
    "name": "Batch Time Wrap (mtb)",
    "display_name": "Batch Time Wrap (mtb)",
    "description": "Remap a batch using a time curve (FLOATS)",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Plot Batch Float (mtb)": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 768
          }
        ],
        "height": [
          "INT",
          {
            "default": 768
          }
        ],
        "point_size": [
          "INT",
          {
            "default": 4
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1
          }
        ],
        "start_at_zero": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "point_size",
        "seed",
        "start_at_zero"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "plot"
    ],
    "name": "Plot Batch Float (mtb)",
    "display_name": "Plot Batch Float (mtb)",
    "description": "# Plot `FLOATS`\nPlot FLOATS using matplotlib, each of them are drawn in a different\ncolor.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Sublist To Image Batch (mtb)": {
    "input": {
      "required": {
        "tensors": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "tensors"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Sublist To Image Batch (mtb)",
    "display_name": "Sublist To Image Batch (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "batch_processing",
    "output_node": false
  },
  "Image Batch To Sublist (mtb)": {
    "input": {
      "required": {
        "sub_batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000,
            "step": 1
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "sub_batch_size"
      ],
      "optional": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "output_is_list": [true, true],
    "output_name": [
      "image_list",
      "mask_list",
      "item_count"
    ],
    "name": "Image Batch To Sublist (mtb)",
    "display_name": "Image Batch To Sublist (mtb)",
    "description": "\n    # Image Batch To Sublist 🔄\n\n    Splits a large batched tensor into smaller sub-batches for memory-efficient processing.\n    ",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "batch_processing",
    "output_node": false
  },
  "Smart Step (mtb)": {
    "input": {
      "required": {
        "step": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "start_percent": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "end_percent": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "step",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "step",
      "start",
      "end"
    ],
    "name": "Smart Step (mtb)",
    "display_name": "Smart Step (mtb)",
    "description": "# Smart Step\n\nUtils to control the steps start/stop of the KAdvancedSampler in percentage\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/conditioning",
    "output_node": false
  },
  "Styles Loader (mtb)": {
    "input": {
      "required": {
        "style_name": [
          [
            "name",
            "❌Low Token",
            "✅Line Art / Manga"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style_name"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "Styles Loader (mtb)",
    "display_name": "Styles Loader (mtb)",
    "description": "# Styles Loader\n\nThis node uses the same logic as the A111 styles csv.  \nThe first column is the name, the second the positive, the third the negative.  \nA sample [styles.csv](https://github.com/melMass/comfy_mtb/blob/main/styles.csv) gets installed on first run.\n\n\u003E **Note**\n\u003E Some styles can have empty columns, for instance I personally use distinct ones for positive and negatives, so be sure to wire the right output.\n\n## Extract Styles\nIt's sometime useful to be able to directly act on the content of a given style, for that an option was added to the context menu of that node to.. extract the styles to plain text inputs:  \n![extract](https://github.com/melMass/comfy_mtb/assets/7041726/c068d770-d5a8-4078-bc3c-20bb6533e42d)\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/conditioning",
    "output_node": false
  },
  "Interpolate Clip Sequential (mtb)": {
    "input": {
      "required": {
        "base_text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "text_to_replace": [
          "STRING",
          {
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ],
        "interpolation_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base_text",
        "text_to_replace",
        "clip",
        "interpolation_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Interpolate Clip Sequential (mtb)",
    "display_name": "Interpolate Clip Sequential (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/conditioning",
    "output_node": false
  },
  "Interpolate Condition (mtb)": {
    "input": {
      "required": {
        "blend": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blend"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Interpolate Condition (mtb)",
    "display_name": "Interpolate Condition (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/conditioning",
    "output_node": false
  },
  "Bbox From Mask (mtb)": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "invert"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "BBOX",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "bbox",
      "image (optional)"
    ],
    "name": "Bbox From Mask (mtb)",
    "display_name": "Bbox From Mask (mtb)",
    "description": "# BBox from Mask\n\nFrom a mask extract the bounding box\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Bbox (mtb)": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "BBOX"
    ],
    "output_is_list": [false],
    "output_name": [
      "BBOX"
    ],
    "name": "Bbox (mtb)",
    "display_name": "Bbox (mtb)",
    "description": "# BBox\n\nThe bounding box (BBOX) custom type used by other nodes\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Crop (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bbox": [
          "BBOX"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "mask",
        "x",
        "y",
        "width",
        "height",
        "bbox"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "name": "Crop (mtb)",
    "display_name": "Crop (mtb)",
    "description": "# Crop\n\nCrops an image and an optional mask to a given bounding box\n\nThe bounding box can be given as a tuple of (x, y, width, height) or as a BBOX type\nThe BBOX input takes precedence over the tuple input\n    \n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Uncrop (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "bbox": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "bbox",
        "border_blending"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Uncrop (mtb)",
    "display_name": "Uncrop (mtb)",
    "description": "# Uncrop\nUncrops an image to a given bounding box\nThe bounding box can be given as a tuple of (x, y, width, height) or as a BBOX type\nThe BBOX input takes precedence over the tuple input\n    \n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Split Bbox (mtb)": {
    "input": {
      "required": {
        "bbox": [
          "BBOX"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "x",
      "y",
      "width",
      "height"
    ],
    "name": "Split Bbox (mtb)",
    "display_name": "Split Bbox (mtb)",
    "description": "Split the components of a bbox",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Upscale Bbox By (mtb)": {
    "input": {
      "required": {
        "bbox": [
          "BBOX"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox",
        "scale"
      ]
    },
    "output": [
      "BBOX"
    ],
    "output_is_list": [false],
    "output_name": [
      "BBOX"
    ],
    "name": "Upscale Bbox By (mtb)",
    "display_name": "Upscale Bbox By (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "BBox Force Dimensions (mtb)": {
    "input": {
      "required": {
        "bbox": [
          "BBOX"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 8192
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox",
        "width",
        "height"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "BBOX"
    ],
    "output_is_list": [false],
    "output_name": [
      "BBOX"
    ],
    "name": "BBox Force Dimensions (mtb)",
    "display_name": "BBox Force Dimensions (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Curve (mtb)": {
    "input": {
      "required": {
        "curve": [
          "FLOAT_CURVE"
        ]
      }
    },
    "input_order": {
      "required": [
        "curve"
      ]
    },
    "output": [
      "FLOAT_CURVE"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT_CURVE"
    ],
    "name": "Curve (mtb)",
    "display_name": "Curve (mtb)",
    "description": "# Curve\n\n*WIP*\nA basic FLOAT_CURVE input node.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/curve",
    "output_node": false
  },
  "Curve To Float (mtb)": {
    "input": {
      "required": {
        "curve": [
          "FLOAT_CURVE",
          {
            "forceInput": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "curve",
        "steps"
      ]
    },
    "output": [
      "FLOATS",
      "FLOAT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "FLOATS",
      "FLOAT"
    ],
    "name": "Curve To Float (mtb)",
    "display_name": "Curve To Float (mtb)",
    "description": "Convert a FLOAT_CURVE to a FLOAT or FLOATS",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/curve",
    "output_node": false
  },
  "Debug (mtb)": {
    "input": {
      "required": {
        "output_to_console": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "as_detailed_types": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "output_to_console"
      ],
      "optional": [
        "as_detailed_types"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Debug (mtb)",
    "display_name": "Debug (mtb)",
    "description": "# Debug\n\nThis node is basically trying to provide informations about any input types supported by Comfy.\nIt uses the [dynamic inputs](web-dynamic-inputs) concept used across a few of the mtb nodes.\nIt specifically handles a few types and fallback to string representation for the others.\n\n![debug](https://github.com/melMass/comfy_mtb/assets/7041726/e20b5379-b5bf-4e2f-8d4c-c79f217d7f8d)\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/debug",
    "output_node": true
  },
  "Save Tensors (mtb)": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyPickle"
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix"
      ],
      "optional": [
        "image",
        "mask",
        "latent"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Tensors (mtb)",
    "display_name": "Save Tensors (mtb)",
    "description": "# Save Tensors\nSave torch tensors (image, mask or latent) to disk.\nuseful to debug things outside comfy like in notebooks.\n    \n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/debug",
    "output_node": true
  },
  "Deep Bump (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Color to Normals",
            "Normals to Curvature",
            "Normals to Height"
          ]
        ],
        "color_to_normals_overlap": [
          [
            "SMALL",
            "MEDIUM",
            "LARGE"
          ]
        ],
        "normals_to_curvature_blur_radius": [
          [
            "SMALLEST",
            "SMALLER",
            "SMALL",
            "MEDIUM",
            "LARGE",
            "LARGER",
            "LARGEST"
          ]
        ],
        "normals_to_height_seamless": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "auto_download": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "color_to_normals_overlap",
        "normals_to_curvature_blur_radius",
        "normals_to_height_seamless"
      ],
      "optional": [
        "auto_download"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Deep Bump (mtb)",
    "display_name": "Deep Bump (mtb)",
    "description": "# Deep Bump\n\nThis node uses the [deep bump](https://github.com/HugoTini/DeepBump) model (GPLv3).\nThe 3 inference modes (color -\u003E normals, normals -\u003E curvature, normals -\u003E depth) are all baked into a single node with a dropdown to select the operation.\nSome inputs are only used in some context, UX could be better.\nThe inputs are self explanatory, but you should probably experiment a bit with it since inference is quite fast. One thing to be sure is to tick `normals_to_height_seamless` when the input is seamless, see below for more infos.\n\nThis example is available in the [base examples list](https://github.com/melMass/comfy_mtb/wiki/Examples). In the example we also use the [Model Patch Seamless](nodes-model-patch-seamless) node in order to have non repeating, tileable textures\n| workflow | This is the output textures from the workflow applied to a tessellated mesh in blender | \n| - | - |\n|![](https://user-images.githubusercontent.com/7041726/272970715-7e4477f6-8e18-4839-9864-83d07d6690a1.png)| ![](https://user-images.githubusercontent.com/7041726/272970506-9db516b5-45d2-4389-b904-b3a94660f24c.png) |",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/textures",
    "output_node": false
  },
  "Restore Face (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          "FACEENHANCE_MODEL"
        ],
        "aligned": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "only_center_face": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.5
          }
        ],
        "save_tmp_steps": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "preserve_alpha": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "aligned",
        "only_center_face",
        "weight",
        "save_tmp_steps"
      ],
      "optional": [
        "preserve_alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Restore Face (mtb)",
    "display_name": "Restore Face (mtb)",
    "description": "# Restore Face\nUses GFPGan to restore faces\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Load Face Enhance Model (mtb)": {
    "input": {
      "required": {
        "model_name": [
          [],
          {
            "default": "None"
          }
        ],
        "upscale": [
          "INT",
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "bg_upsampler": [
          "UPSCALE_MODEL",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "upscale"
      ],
      "optional": [
        "bg_upsampler"
      ]
    },
    "output": [
      "FACEENHANCE_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "Load Face Enhance Model (mtb)",
    "display_name": "Load Face Enhance Model (mtb)",
    "description": "# Load Face Enhance Model\n\nLoads a GFPGan or RestoreFormer model for face enhancement.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Face Swap (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "faceanalysis_model": [
          "FACE_ANALYSIS_MODEL",
          {
            "default": "None"
          }
        ],
        "faceswap_model": [
          "FACESWAP_MODEL",
          {
            "default": "None"
          }
        ]
      },
      "optional": {
        "preserve_alpha": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "faces_index",
        "faceanalysis_model",
        "faceswap_model"
      ],
      "optional": [
        "preserve_alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Face Swap (mtb)",
    "display_name": "Face Swap (mtb)",
    "description": "# Face Swap\nFace swap using deepinsight/insightface models\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Load Face Swap Model (mtb)": {
    "input": {
      "required": {
        "faceswap_model": [
          [
            "hyperswap_1a_256.onnx",
            "inswapper_128.onnx"
          ],
          {
            "default": "None"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "faceswap_model"
      ]
    },
    "output": [
      "FACESWAP_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "FACESWAP_MODEL"
    ],
    "name": "Load Face Swap Model (mtb)",
    "display_name": "Load Face Swap Model (mtb)",
    "description": "# Load Face Swap Model\n\nLoads a faceswap model\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Load Face Analysis Model (mtb)": {
    "input": {
      "required": {
        "faceswap_model": [
          [
            "antelopev2",
            "buffalo_l",
            "buffalo_m",
            "buffalo_sc"
          ],
          {
            "default": "buffalo_l"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "faceswap_model"
      ]
    },
    "output": [
      "FACE_ANALYSIS_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "FACE_ANALYSIS_MODEL"
    ],
    "name": "Load Face Analysis Model (mtb)",
    "display_name": "Load Face Analysis Model (mtb)",
    "description": "# Load Face Analysis\n\nLoads a face analysis model\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Filter Z (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "depth": [
          "IMAGE"
        ],
        "to_black": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "step": 0.01,
            "min": 0,
            "max": 1
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "depth",
        "to_black",
        "threshold",
        "invert"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Filter Z (mtb)",
    "display_name": "Filter Z (mtb)",
    "description": "# Filter Z\nFilters an image based on a depth map\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/filters",
    "output_node": false
  },
  "Unsplash Image (mtb)": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 8096,
            "min": 0,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 8096,
            "min": 0,
            "step": 1
          }
        ],
        "random_seed": [
          "INT",
          {
            "default": 0,
            "max": 100000,
            "min": 0,
            "step": 1
          }
        ]
      },
      "optional": {
        "keyword": [
          "STRING",
          {
            "default": "nature"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "random_seed"
      ],
      "optional": [
        "keyword"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Unsplash Image (mtb)",
    "display_name": "Unsplash Image (mtb)",
    "description": "# Unsplash Image\n\nUnsplash Image given a keyword and a size\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Text To Image (mtb)": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "Hello world!"
          }
        ],
        "font": [
          [
            "font"
          ]
        ],
        "wrap": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "trim": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "line_height": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "step": 0.1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 32,
            "min": 1,
            "max": 2500,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 8096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 8096,
            "step": 1
          }
        ],
        "color": [
          "COLOR",
          {
            "default": "black"
          }
        ],
        "background": [
          "COLOR",
          {
            "default": "white"
          }
        ],
        "h_align": [
          [
            "left",
            "center",
            "right"
          ],
          {
            "default": "left"
          }
        ],
        "v_align": [
          [
            "top",
            "center",
            "bottom"
          ],
          {
            "default": "top"
          }
        ],
        "h_offset": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8096,
            "step": 1
          }
        ],
        "v_offset": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8096,
            "step": 1
          }
        ],
        "h_coverage": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "whisper_chunks": [
          "WHISPER_CHUNKS"
        ],
        "fps": [
          "INT",
          {
            "default": 24,
            "min": 1,
            "max": 60,
            "step": 1
          }
        ],
        "fade_duration": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 5,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "font",
        "wrap",
        "trim",
        "line_height",
        "font_size",
        "width",
        "height",
        "color",
        "background",
        "h_align",
        "v_align",
        "h_offset",
        "v_offset",
        "h_coverage"
      ],
      "optional": [
        "whisper_chunks",
        "fps",
        "fade_duration"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Text To Image (mtb)",
    "display_name": "Text To Image (mtb)",
    "description": "# Text to Image\n\nThis node look for any font files in comfy_dir/fonts.\nby default it fallsback to a default font.\n\n![img](https://i.imgur.com/3GT92hy.gif)\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "String Replace (mtb)": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "old": [
          "STRING",
          {
            "default": ""
          }
        ],
        "new": [
          "STRING",
          {
            "default": ""
          }
        ],
        "use_regex": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "old",
        "new",
        "use_regex"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "String Replace (mtb)",
    "display_name": "String Replace (mtb)",
    "description": "# String Replace\nBasic string replacement.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/string",
    "output_node": false
  },
  "Fit Number (mtb)": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "forceInput": true
          }
        ],
        "clamp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "source_min": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.01,
            "min": -100000
          }
        ],
        "source_max": [
          "FLOAT",
          {
            "default": 1,
            "step": 0.01,
            "min": -100000
          }
        ],
        "target_min": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.01,
            "min": -100000
          }
        ],
        "target_max": [
          "FLOAT",
          {
            "default": 1,
            "step": 0.01,
            "min": -100000
          }
        ],
        "easing": [
          [
            "Linear",
            "Sine In",
            "Sine Out",
            "Sine In/Out",
            "Quart In",
            "Quart Out",
            "Quart In/Out",
            "Cubic In",
            "Cubic Out",
            "Cubic In/Out",
            "Circ In",
            "Circ Out",
            "Circ In/Out",
            "Back In",
            "Back Out",
            "Back In/Out",
            "Elastic In",
            "Elastic Out",
            "Elastic In/Out",
            "Bounce In",
            "Bounce Out",
            "Bounce In/Out"
          ],
          {
            "default": "Linear"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "clamp",
        "source_min",
        "source_max",
        "target_min",
        "target_max",
        "easing"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "Fit Number (mtb)",
    "display_name": "Fit Number (mtb)",
    "description": "Fit the input float using a source and target range",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/math",
    "output_node": false
  },
  "Get Batch From History (mtb)": {
    "input": {
      "required": {
        "enable": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "count": [
          "INT",
          {
            "default": 1,
            "min": 0
          }
        ],
        "offset": [
          "INT",
          {
            "default": 0,
            "min": -1000000000,
            "max": 1000000000
          }
        ],
        "internal_count": [
          "INT",
          {
            "default": 0
          }
        ]
      },
      "optional": {
        "passthrough_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "enable",
        "count",
        "offset",
        "internal_count"
      ],
      "optional": [
        "passthrough_image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Get Batch From History (mtb)",
    "display_name": "Get Batch From History (mtb)",
    "description": "# Get Batch from History\n\nThis experimental node does something really simple, it reads the outputs from the history endpoint of Comfy.\nOutputs gets populated by... output nodes. There are various ones but  for instance in core comfy, `Save Image` and `Preview Image` are output nodes.\nI advice to start simple and have workflows that only generates one output per queue run. Of course once you master it you can use multiple outputs as output order is kept (as long as all outputs are ran).\n\nAnother basic use case of batch from history that you can see in the 4th [example](Examples), the fake deforum effect, basically this flow allows you to **feedback** an image using the history.\n\nA classic example when showing the feedback concept is the poor man's [grey scott diffusion model](https://groups.csail.mit.edu/mac/projects/amorphous/GrayScott/) i.e the \"creative\" derivative using only a gaussian blur and a sharp at each fed steps. \n\n \nHere is an example workflow of just that.\n\nthis is the output:  \n\u003Cp align=center\u003E\n\u003Cimg width=250 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/162fb62e-96d4-4843-8902-19d59c536469\"/\u003E\n\u003C/p\u003E\n\nand the workflow:\n\u003Cp align=center\u003E  \n\u003Cimg width=1000 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/11257918-86ff-4ddd-8d08-f2a59f7f45a2\"/\u003E\n\u003C/p\u003E\n\n\u003Cdetails\u003E\u003Csummary\u003Eexpand here to copy paste this workflow\u003C/summary\u003E\n\n```json\n{\"last_node_id\":17,\"last_link_id\":27,\"nodes\":[{\"id\":9,\"type\":\"Get Batch From History (mtb)\",\"pos\":[181,706],\"size\":[315,130],\"flags\":{},\"order\":5,\"mode\":0,\"inputs\":[{\"name\":\"passthrough_image\",\"type\":\"IMAGE\",\"link\":null,\"slot_index\":0,\"shape\":7},{\"name\":\"enable\",\"type\":\"BOOLEAN\",\"link\":6,\"widget\":{\"name\":\"enable\"}}],\"outputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"links\":[23],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Get Batch From History (mtb)\"},\"widgets_values\":[true,44,0,969]},{\"id\":13,\"type\":\"Sharpen (mtb)\",\"pos\":[996,276],\"size\":[315,130],\"flags\":{},\"order\":9,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":14}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[22],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Sharpen (mtb)\"},\"widgets_values\":[31,2,1,1]},{\"id\":15,\"type\":\"VHS_VideoCombine\",\"pos\":[528,708],\"size\":[276,580],\"flags\":{},\"order\":7,\"mode\":0,\"inputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"link\":23},{\"name\":\"audio\",\"type\":\"AUDIO\",\"link\":null,\"shape\":7},{\"name\":\"meta_batch\",\"type\":\"VHS_BatchManager\",\"link\":null,\"shape\":7},{\"name\":\"vae\",\"type\":\"VAE\",\"link\":null,\"shape\":7}],\"outputs\":[{\"name\":\"Filenames\",\"type\":\"VHS_FILENAMES\",\"links\":null}],\"properties\":{\"Node name for S&R\":\"VHS_VideoCombine\"},\"widgets_values\":{\"frame_rate\":20,\"loop_count\":0,\"filename_prefix\":\"MTB_BatchFromHistory\",\"format\":\"video/h264-mp4\",\"pix_fmt\":\"yuv420p\",\"crf\":19,\"save_metadata\":true,\"pingpong\":false,\"save_output\":true,\"videopreview\":{\"hidden\":false,\"paused\":false,\"params\":{\"filename\":\"AnimateDiff_01089.mp4\",\"subfolder\":\"\",\"type\":\"output\",\"format\":\"video/h264-mp4\",\"frame_rate\":20},\"muted\":false}}},{\"id\":16,\"type\":\"LoadImage\",\"pos\":[-168,-216],\"size\":[315,314],\"flags\":{},\"order\":0,\"mode\":4,\"inputs\":[],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[25],\"slot_index\":0},{\"name\":\"MASK\",\"type\":\"MASK\",\"links\":null}],\"properties\":{\"Node name for S&R\":\"LoadImage\"},\"widgets_values\":[\"example.png\",\"image\"]},{\"id\":17,\"type\":\"ImageScale\",\"pos\":[192,-36],\"size\":[315,130],\"flags\":{},\"order\":3,\"mode\":4,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":25}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[],\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"ImageScale\"},\"widgets_values\":[\"nearest-exact\",512,512,\"disabled\"]},{\"id\":10,\"type\":\"Blur (mtb)\",\"pos\":[672,276],\"size\":[315,122],\"flags\":{},\"order\":8,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":24},{\"name\":\"sigmasX\",\"type\":\"FLOATS\",\"link\":null,\"shape\":7},{\"name\":\"sigmasY\",\"type\":\"FLOATS\",\"link\":null,\"shape\":7}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[14],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Blur (mtb)\"},\"widgets_values\":[6,6]},{\"id\":3,\"type\":\"Get Batch From History (mtb)\",\"pos\":[336,276],\"size\":[315,130],\"flags\":{},\"order\":6,\"mode\":0,\"inputs\":[{\"name\":\"passthrough_image\",\"type\":\"IMAGE\",\"link\":27,\"slot_index\":0,\"shape\":7},{\"name\":\"enable\",\"type\":\"BOOLEAN\",\"link\":16,\"widget\":{\"name\":\"enable\"}}],\"outputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"links\":[24],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Get Batch From History (mtb)\"},\"widgets_values\":[false,1,0,969]},{\"id\":6,\"type\":\"Int To Bool (mtb)\",\"pos\":[324,444],\"size\":[210,42.27488708496094],\"flags\":{},\"order\":4,\"mode\":0,\"inputs\":[{\"name\":\"int\",\"type\":\"INT\",\"link\":4,\"widget\":{\"name\":\"int\"}}],\"outputs\":[{\"name\":\"BOOLEAN\",\"type\":\"BOOLEAN\",\"links\":[16],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Int To Bool (mtb)\"},\"widgets_values\":[0]},{\"id\":2,\"type\":\"PreviewImage\",\"pos\":[972,456],\"size\":[360,348],\"flags\":{},\"order\":10,\"mode\":0,\"inputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"link\":22}],\"outputs\":[],\"properties\":{\"Node name for S&R\":\"PreviewImage\"},\"widgets_values\":[]},{\"id\":1,\"type\":\"Batch Shape (mtb)\",\"pos\":[-120,192],\"size\":[210,334],\"flags\":{},\"order\":1,\"mode\":0,\"inputs\":[],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[27],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Batch Shape (mtb)\"},\"widgets_values\":[1,\"Diamond\",512,512,229,\"#ffffff\",\"#000000\",\"#000000\",0,0,0]},{\"id\":4,\"type\":\"Animation Builder (mtb)\",\"pos\":[-110,596],\"size\":[210,318],\"flags\":{},\"order\":2,\"mode\":0,\"inputs\":[],\"outputs\":[{\"name\":\"frame\",\"type\":\"INT\",\"links\":[4],\"slot_index\":0,\"shape\":3},{\"name\":\"0-1 (scaled)\",\"type\":\"FLOAT\",\"links\":null,\"shape\":3},{\"name\":\"count\",\"type\":\"INT\",\"links\":null,\"shape\":3},{\"name\":\"loop_ended\",\"type\":\"BOOLEAN\",\"links\":[6],\"slot_index\":3,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Animation Builder (mtb)\"},\"widgets_values\":[45,1,1,0,0,null,null,\"reset\",\"queue\"]}],\"links\":[[4,4,0,6,0,\"INT\"],[6,4,3,9,1,\"BOOLEAN\"],[14,10,0,13,0,\"IMAGE\"],[16,6,0,3,1,\"BOOLEAN\"],[22,13,0,2,0,\"IMAGE\"],[23,9,0,15,0,\"IMAGE\"],[24,3,0,10,0,\"IMAGE\"],[25,16,0,17,0,\"IMAGE\"],[27,1,0,3,0,\"IMAGE\"]],\"groups\":[],\"config\":{},\"extra\":{\"ds\":{\"scale\":0.6727499949325705,\"offset\":[682.4627866508608,403.88645096355583]},\"ue_links\":[]},\"version\":0.4}\n```\n\n\u003C/details\u003E\n\nThe blue bordered node is the one doing the feedback, on first frame (frame == 0 converted to bool is false) the passthrough image will be used, this example uses the [Batch Shape](nodes-batch-shape) node, only on the first queue item, then the previous queue item is fed to each subsequent queue item.\nThe orange bordered one is fetching all the frames we queued once done to assemble the GIF. All this happens in \"one click\" thanks to [Animation Builder](nodes-animation-builder)\n\n\n## Inputs\n|name|description|\n|-|-|\n|passthrough_image | This is the image that gets sent out when `enable` is set to false, useful for the init first image in the fake deforum [example](Examples) for instance ([04-animation_builder-deforum.json](https://github.com/melMass/comfy_mtb/blob/main/examples/04-animation_builder-deforum.json)) |\n|enable | This makes the node not fetch the history. For instance when you just initiated the server the history is empty, see [Animation Builder](nodes-animation-builder) for practical examples |\n|count | the number of frames to fetch from the history |\n| **Reset Button** | resets the internal counters, although the node is though around using its queue button it should still work fine when using the regular queue button of comfy |\n| **Queue Button** | Convenience button to run the queues (`total_frames` * `loop_count`) |",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/animation",
    "output_node": false
  },
  "Any To String (mtb)": {
    "input": {
      "required": {
        "input": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Any To String (mtb)",
    "display_name": "Any To String (mtb)",
    "description": "# Any to String\n\nTries to take any input and convert it to a string.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/converters",
    "output_node": false
  },
  "Concat Images (mtb)": {
    "input": {
      "required": {
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "on_mismatch": [
          [
            "Error",
            "Smallest",
            "Largest"
          ],
          {
            "default": "Smallest"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reverse"
      ],
      "optional": [
        "on_mismatch"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Concat Images (mtb)",
    "display_name": "Concat Images (mtb)",
    "description": "# Concat Images\n\nAdd images to batch.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Math Expression (mtb)": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "expression"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "result (float)",
      "result (int)"
    ],
    "name": "Math Expression (mtb)",
    "display_name": "Math Expression (mtb)",
    "description": "evaluate a simple math expression string, only supports literal_eval",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/math",
    "output_node": false
  },
  "To Device (mtb)": {
    "input": {
      "required": {
        "ignore_errors": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "cpu",
            "cuda:0",
            "cuda"
          ],
          {
            "default": "cuda"
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "ignore_errors",
        "device"
      ],
      "optional": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "To Device (mtb)",
    "display_name": "To Device (mtb)",
    "description": "# To Device\nSend a image or mask tensor to the given device.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Apply Text Template (mtb)": {
    "input": {
      "required": {
        "template": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "template"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "string"
    ],
    "name": "Apply Text Template (mtb)",
    "display_name": "Apply Text Template (mtb)",
    "description": "# Apply Text Template\n\nVery basic string interpolation using [dynamic inputs](web-dynamic-inputs).\n\nThe var names are `var_1`, `var_2` etc... They are interpolated like this: `{var_1}`, see the following example for a more concrete idea:\n\n![template_string](https://github.com/melMass/comfy_mtb/assets/7041726/abf8d63e-87f6-426a-adcc-514b85daeb5c)\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Match Dimensions (mtb)": {
    "input": {
      "required": {
        "source": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "match": [
          [
            "height",
            "width"
          ],
          {
            "default": "height"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "reference",
        "match"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "image",
      "new_width",
      "new_height"
    ],
    "name": "Match Dimensions (mtb)",
    "display_name": "Match Dimensions (mtb)",
    "description": "# Match Dimensions\n\nMatch images dimensions along the given axis, preserving aspect ratio.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Auto Pan Equilateral (mtb)": {
    "input": {
      "required": {
        "equilateral_image": [
          "IMAGE"
        ],
        "fovX": [
          "FLOAT",
          {
            "default": 45
          }
        ],
        "fovY": [
          "FLOAT",
          {
            "default": 45
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.5
          }
        ],
        "frame_count": [
          "INT",
          {
            "default": 100
          }
        ],
        "width": [
          "INT",
          {
            "default": 768
          }
        ],
        "height": [
          "INT",
          {
            "default": 512
          }
        ]
      },
      "optional": {
        "floats_fovX": [
          "FLOATS"
        ],
        "floats_fovY": [
          "FLOATS"
        ],
        "floats_elevation": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "equilateral_image",
        "fovX",
        "fovY",
        "elevation",
        "frame_count",
        "width",
        "height"
      ],
      "optional": [
        "floats_fovX",
        "floats_fovY",
        "floats_elevation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Auto Pan Equilateral (mtb)",
    "display_name": "Auto Pan Equilateral (mtb)",
    "description": "# Autopan Equilateral\n\nGenerate a 360 panning video from an equilateral image.\n\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Floats To Float (mtb)": {
    "input": {
      "required": {
        "floats": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "float"
    ],
    "name": "Floats To Float (mtb)",
    "display_name": "Floats To Float (mtb)",
    "description": "# `FLOATS` to `FLOAT`\n\nAD, IPA, Fitz etc have commonly choose to mistype float lists as FLOAT.\n\nThis is just a hack to be compatible with these\n    \n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Float To Floats (mtb)": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [false],
    "output_name": [
      "floats"
    ],
    "name": "Float To Floats (mtb)",
    "display_name": "Float To Floats (mtb)",
    "description": "Conversion utility for compatibility with other extensions (AD, IPA, Fitz are using FLOAT to represent list of floats.)",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Floats To Ints (mtb)": {
    "input": {
      "required": {
        "floats": [
          "FLOATS",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "floats"
      ]
    },
    "output": [
      "INTS",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "INTS",
      "INT"
    ],
    "name": "Floats To Ints (mtb)",
    "display_name": "Floats To Ints (mtb)",
    "description": "Conversion utility for compatibility with frame interpolation.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Tensor Ops (mtb)": {
    "input": {
      "required": {
        "tensor": [
          "IMAGE"
        ],
        "operation": [
          [
            "multiply",
            "divide",
            "add",
            "subtract",
            "power",
            "clamp",
            "abs",
            "log",
            "exp",
            "convert_dtype",
            "normalize_range",
            "normalize_per_channel"
          ],
          {
            "default": "multiply"
          }
        ],
        "value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1000000,
            "max": 1000000,
            "step": 0.01
          }
        ],
        "source_min": [
          "FLOAT",
          {
            "default": 0,
            "min": -1000000,
            "max": 1000000,
            "step": 0.01
          }
        ],
        "source_max": [
          "FLOAT",
          {
            "default": 1,
            "min": -1000000,
            "max": 1000000,
            "step": 0.01
          }
        ],
        "target_min": [
          "FLOAT",
          {
            "default": 0,
            "min": -1000000,
            "max": 1000000,
            "step": 0.01
          }
        ],
        "target_max": [
          "FLOAT",
          {
            "default": 16,
            "min": -1000000,
            "max": 1000000,
            "step": 0.01
          }
        ],
        "dtype": [
          [
            "uint8",
            "float32",
            "float16",
            "bfloat16"
          ],
          {
            "default": "float32"
          }
        ],
        "use_mean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "target_tensor": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "tensor",
        "operation",
        "value",
        "source_min",
        "source_max",
        "target_min",
        "target_max",
        "dtype",
        "use_mean"
      ],
      "optional": [
        "target_tensor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Tensor Ops (mtb)",
    "display_name": "Tensor Ops (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/tensor_ops",
    "output_node": false
  },
  "Color Correct (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "clamp": [
          [true, false],
          {
            "default": true
          }
        ],
        "gamma": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "exposure": [
          "FLOAT",
          {
            "default": 0,
            "min": -5,
            "max": 5,
            "step": 0.01
          }
        ],
        "offset": [
          "FLOAT",
          {
            "default": 0,
            "min": -5,
            "max": 5,
            "step": 0.01
          }
        ],
        "hue": [
          "FLOAT",
          {
            "default": 0,
            "min": -0.5,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "value": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "clamp",
        "gamma",
        "contrast",
        "exposure",
        "offset",
        "hue",
        "saturation",
        "value"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Color Correct (mtb)",
    "display_name": "Color Correct (mtb)",
    "description": "# Color Correct\n\nVarious color correction methods\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image processing",
    "output_node": false
  },
  "Color Correct GPU (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "force_gpu": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clamp": [
          [true, false],
          {
            "default": true
          }
        ],
        "gamma": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "exposure": [
          "FLOAT",
          {
            "default": 0,
            "min": -5,
            "max": 5,
            "step": 0.01
          }
        ],
        "offset": [
          "FLOAT",
          {
            "default": 0,
            "min": -5,
            "max": 5,
            "step": 0.01
          }
        ],
        "hue": [
          "FLOAT",
          {
            "default": 0,
            "min": -0.5,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "value": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "force_gpu",
        "clamp",
        "gamma",
        "contrast",
        "exposure",
        "offset",
        "hue",
        "saturation",
        "value"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Color Correct GPU (mtb)",
    "display_name": "Color Correct GPU (mtb)",
    "description": "Various color correction methods using only Torch.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image processing",
    "output_node": false
  },
  "Image Compare (mtb)": {
    "input": {
      "required": {
        "imageA": [
          "IMAGE"
        ],
        "imageB": [
          "IMAGE"
        ],
        "mode": [
          [
            "checkerboard",
            "diff",
            "blend"
          ],
          {
            "default": "checkerboard"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "imageA",
        "imageB",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Compare (mtb)",
    "display_name": "Image Compare (mtb)",
    "description": "# Image Compare\nCompare two images and return a difference image\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Image Tile Offset (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "tilesX": [
          "INT",
          {
            "default": 2,
            "min": 1
          }
        ],
        "tilesY": [
          "INT",
          {
            "default": 2,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "tilesX",
        "tilesY"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Tile Offset (mtb)",
    "display_name": "Image Tile Offset (mtb)",
    "description": "# Image Tile Offset\n\nMimics an old photoshop technique to check for seamless textures\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Blur (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sigmaX": [
          "FLOAT",
          {
            "default": 3,
            "min": 0,
            "max": 200,
            "step": 0.01
          }
        ],
        "sigmaY": [
          "FLOAT",
          {
            "default": 3,
            "min": 0,
            "max": 200,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "sigmasX": [
          "FLOATS"
        ],
        "sigmasY": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sigmaX",
        "sigmaY"
      ],
      "optional": [
        "sigmasX",
        "sigmasY"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Blur (mtb)",
    "display_name": "Blur (mtb)",
    "description": "# Blur\n\nApplies a Gaussian blur to the given image / batch.  \nIt allows a few more things than the core blur node, namely:\n- **Higher values** (core is limited to 30)  \n  \u003Cimg width=650 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/c0cd8426-7b44-4067-bb98-9a178e715169\"/\u003E\n\n- **Individual X & Y blur**  \n  \u003Cimg width=650 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/f5511f9a-d659-4935-abb5-3242894a0a82\"/\u003E\n\n- [`FLOATS`](nodes-batch#batch-floats) support for individual batch frame blur\n  \u003Cimg width=650 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/8aab18d2-b140-4e04-a4bd-fd294f2e187b\"/\u003E\n\n\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image processing",
    "output_node": false
  },
  "Mask To Image (mtb)": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "color": [
          "COLOR"
        ],
        "background": [
          "COLOR",
          {
            "default": "#000000"
          }
        ]
      },
      "optional": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "color",
        "background"
      ],
      "optional": [
        "invert"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Mask To Image (mtb)",
    "display_name": "Mask To Image (mtb)",
    "description": "# Mask to Image\n\nConverts a mask (alpha) to an RGB image with a color and background\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Colored Image (mtb)": {
    "input": {
      "required": {
        "color": [
          "COLOR"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 8160
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 8160
          }
        ]
      },
      "optional": {
        "foreground_image": [
          "IMAGE"
        ],
        "foreground_mask": [
          "MASK"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mask_opacity": [
          "FLOAT",
          {
            "default": 1,
            "step": 0.1,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "color",
        "width",
        "height"
      ],
      "optional": [
        "foreground_image",
        "foreground_mask",
        "invert",
        "mask_opacity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Colored Image (mtb)",
    "display_name": "Colored Image (mtb)",
    "description": "# Colored Image\n\nConstant color images of a given size can also be used to mask images.\n\nThis example uses [VHS Nodes](https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite) for animation preview\n![batch_shapes](https://github.com/melMass/comfy_mtb/assets/7041726/a1aa62c5-f8cb-4f90-a14a-f7260a982e5a)\n\n**Workflow**: \n```json\n{\"last_node_id\":41,\"last_link_id\":65,\"nodes\":[{\"id\":13,\"type\":\"Batch Float (mtb)\",\"pos\":[-1213,622],\"size\":[315,154],\"flags\":{},\"order\":0,\"mode\":0,\"outputs\":[{\"name\":\"FLOATS\",\"type\":\"FLOATS\",\"links\":[30],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Float (mtb)\"},\"widgets_values\":[\"Steps\",12,0.001,5,\"Quart In/Out\"]},{\"id\":31,\"type\":\"VHS_VideoCombine\",\"pos\":[1080,280],\"size\":[315,314],\"flags\":{},\"order\":16,\"mode\":0,\"inputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"link\":50},{\"name\":\"audio\",\"type\":\"VHS_AUDIO\",\"link\":null},{\"name\":\"batch_manager\",\"type\":\"VHS_BatchManager\",\"link\":null}],\"outputs\":[{\"name\":\"Filenames\",\"type\":\"VHS_FILENAMES\",\"links\":null,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"VHS_VideoCombine\"},\"widgets_values\":{\"frame_rate\":12,\"loop_count\":0,\"filename_prefix\":\"AnimateDiff\",\"format\":\"video/nvenc_hevc-mp4\",\"pix_fmt\":\"yuv420p\",\"bitrate\":10,\"megabit\":true,\"save_metadata\":true,\"pingpong\":false,\"save_output\":false,\"videopreview\":{\"hidden\":false,\"paused\":false,\"params\":{\"filename\":\"AnimateDiff_00004.mp4\",\"subfolder\":\"\",\"type\":\"temp\",\"format\":\"video/nvenc_hevc-mp4\"}}}},{\"id\":22,\"type\":\"Batch Float Fill (mtb)\",\"pos\":[-884,621],\"size\":[315,106],\"flags\":{},\"order\":4,\"mode\":0,\"inputs\":[{\"name\":\"floats\",\"type\":\"FLOATS\",\"link\":30}],\"outputs\":[{\"name\":\"FLOATS\",\"type\":\"FLOATS\",\"links\":[31],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Float Fill (mtb)\"},\"widgets_values\":[\"tail\",0,20]},{\"id\":30,\"type\":\"ImageBlend\",\"pos\":[680,280],\"size\":[315,102],\"flags\":{},\"order\":14,\"mode\":0,\"inputs\":[{\"name\":\"image1\",\"type\":\"IMAGE\",\"link\":65},{\"name\":\"image2\",\"type\":\"IMAGE\",\"link\":48}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[50],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"ImageBlend\"},\"widgets_values\":[1,\"screen\"]},{\"id\":15,\"type\":\"Batch Transform (mtb)\",\"pos\":[484,561],\"size\":[210,194],\"flags\":{},\"order\":10,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":29,\"slot_index\":0},{\"name\":\"x\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"y\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"zoom\",\"type\":\"FLOATS\",\"link\":33},{\"name\":\"angle\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"shear\",\"type\":\"FLOATS\",\"link\":null}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[48],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Transform (mtb)\"},\"widgets_values\":[\"edge\",\"#fa96c0\"]},{\"id\":23,\"type\":\"Batch Float Fill (mtb)\",\"pos\":[110,623],\"size\":[315,106],\"flags\":{},\"order\":5,\"mode\":0,\"inputs\":[{\"name\":\"floats\",\"type\":\"FLOATS\",\"link\":32}],\"outputs\":[{\"name\":\"FLOATS\",\"type\":\"FLOATS\",\"links\":[33],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Float Fill (mtb)\"},\"widgets_values\":[\"head\",0,20]},{\"id\":21,\"type\":\"Batch Float (mtb)\",\"pos\":[-246,623],\"size\":[315,154],\"flags\":{},\"order\":1,\"mode\":0,\"outputs\":[{\"name\":\"FLOATS\",\"type\":\"FLOATS\",\"links\":[32],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Float (mtb)\"},\"widgets_values\":[\"Steps\",20,0.001,4.5,\"Quart In/Out\"]},{\"id\":41,\"type\":\"Reroute\",\"pos\":[-91,283],\"size\":[75,26],\"flags\":{},\"order\":12,\"mode\":0,\"inputs\":[{\"name\":\"\",\"type\":\"*\",\"link\":64}],\"outputs\":[{\"name\":\"\",\"type\":\"IMAGE\",\"links\":[65]}],\"properties\":{\"showOutputText\":false,\"horizontal\":false}},{\"id\":14,\"type\":\"Batch Transform (mtb)\",\"pos\":[-517,562],\"size\":[210,194],\"flags\":{},\"order\":9,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":27,\"slot_index\":0},{\"name\":\"x\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"y\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"zoom\",\"type\":\"FLOATS\",\"link\":31},{\"name\":\"angle\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"shear\",\"type\":\"FLOATS\",\"link\":null}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[37,62,64],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Transform (mtb)\"},\"widgets_values\":[\"edge\",\"#fa96c0\"]},{\"id\":35,\"type\":\"LoadImage\",\"pos\":[-560,920],\"size\":[315,314],\"flags\":{},\"order\":2,\"mode\":0,\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[56],\"shape\":3,\"slot_index\":0},{\"name\":\"MASK\",\"type\":\"MASK\",\"links\":null,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"LoadImage\"},\"widgets_values\":[\"189.png\",\"image\"]},{\"id\":40,\"type\":\"Blur (mtb)\",\"pos\":[-217,1000],\"size\":[315,82],\"flags\":{},\"order\":11,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":62,\"slot_index\":0}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[63],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Blur (mtb)\"},\"widgets_values\":[50,50]},{\"id\":33,\"type\":\"ImageToMask\",\"pos\":[120,997],\"size\":[210,58],\"flags\":{},\"order\":13,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":63,\"slot_index\":0}],\"outputs\":[{\"name\":\"MASK\",\"type\":\"MASK\",\"links\":[57],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"ImageToMask\"},\"widgets_values\":[\"red\"]},{\"id\":37,\"type\":\"Colored Image (mtb)\",\"pos\":[350,920],\"size\":[210,138],\"flags\":{},\"order\":15,\"mode\":0,\"inputs\":[{\"name\":\"foreground_image\",\"type\":\"IMAGE\",\"link\":56,\"slot_index\":0},{\"name\":\"foreground_mask\",\"type\":\"MASK\",\"link\":57,\"slot_index\":1}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[55],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Colored Image (mtb)\"},\"widgets_values\":[\"#1603fc\",512,512]},{\"id\":36,\"type\":\"VHS_VideoCombine\",\"pos\":[584,918],\"size\":[315,314],\"flags\":{},\"order\":17,\"mode\":0,\"inputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"link\":55,\"slot_index\":0},{\"name\":\"audio\",\"type\":\"VHS_AUDIO\",\"link\":null},{\"name\":\"batch_manager\",\"type\":\"VHS_BatchManager\",\"link\":null}],\"outputs\":[{\"name\":\"Filenames\",\"type\":\"VHS_FILENAMES\",\"links\":null,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"VHS_VideoCombine\"},\"widgets_values\":{\"frame_rate\":12,\"loop_count\":0,\"filename_prefix\":\"AnimateDiff\",\"format\":\"video/nvenc_hevc-mp4\",\"pix_fmt\":\"yuv420p\",\"bitrate\":10,\"megabit\":true,\"save_metadata\":true,\"pingpong\":false,\"save_output\":false,\"videopreview\":{\"hidden\":false,\"paused\":false,\"params\":{\"filename\":\"AnimateDiff_00009.mp4\",\"subfolder\":\"\",\"type\":\"temp\",\"format\":\"video/nvenc_hevc-mp4\"}}}},{\"id\":20,\"type\":\"Mask To Image (mtb)\",\"pos\":[231,459],\"size\":[210,106],\"flags\":{},\"order\":8,\"mode\":0,\"inputs\":[{\"name\":\"mask\",\"type\":\"MASK\",\"link\":28,\"slot_index\":0}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[29],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Mask To Image (mtb)\"},\"widgets_values\":[\"#00ff00\",\"#000000\"]},{\"id\":16,\"type\":\"ImageToMask\",\"pos\":[-750,191],\"size\":[210,58],\"flags\":{},\"order\":6,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":25}],\"outputs\":[{\"name\":\"MASK\",\"type\":\"MASK\",\"links\":[26,28],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"ImageToMask\"},\"widgets_values\":[\"red\"]},{\"id\":19,\"type\":\"Mask To Image (mtb)\",\"pos\":[-750,446],\"size\":[210,106],\"flags\":{},\"order\":7,\"mode\":0,\"inputs\":[{\"name\":\"mask\",\"type\":\"MASK\",\"link\":26,\"slot_index\":0}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[27],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Mask To Image (mtb)\"},\"widgets_values\":[\"#ff0000\",\"#000000\"]},{\"id\":11,\"type\":\"Batch Shape (mtb)\",\"pos\":[-1039,192],\"size\":[210,334],\"flags\":{},\"order\":3,\"mode\":0,\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[25],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Shape (mtb)\"},\"widgets_values\":[20,\"Tube\",1024,1024,512,\"#ffffff\",\"#000000\",\"#000000\",250,0,0]}],\"links\":[[25,11,0,16,0,\"IMAGE\"],[26,16,0,19,0,\"MASK\"],[27,19,0,14,0,\"IMAGE\"],[28,16,0,20,0,\"MASK\"],[29,20,0,15,0,\"IMAGE\"],[30,13,0,22,0,\"FLOATS\"],[31,22,0,14,3,\"FLOATS\"],[32,21,0,23,0,\"FLOATS\"],[33,23,0,15,3,\"FLOATS\"],[37,14,0,27,0,\"IMAGE\"],[48,15,0,30,1,\"IMAGE\"],[50,30,0,31,0,\"IMAGE\"],[55,37,0,36,0,\"IMAGE\"],[56,35,0,37,0,\"IMAGE\"],[57,33,0,37,1,\"MASK\"],[62,14,0,40,0,\"IMAGE\"],[63,40,0,33,0,\"IMAGE\"],[64,14,0,41,0,\"*\"],[65,41,0,30,0,\"IMAGE\"]],\"groups\":[],\"config\":{},\"extra\":{\"workspace_info\":{\"id\":\"lHUoc3eCvYMplIxkGM68o\"}},\"version\":0.4}\n```",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Image Premultiply (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "invert"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "RGBA"
    ],
    "name": "Image Premultiply (mtb)",
    "display_name": "Image Premultiply (mtb)",
    "description": "# Image Premultiply\n\nPremultiply image with mask\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Image Resize Factor (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16,
            "step": 0.01
          }
        ],
        "supersample": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "resampling": [
          [
            "nearest",
            "linear",
            "bilinear",
            "bicubic",
            "trilinear",
            "area",
            "nearest-exact"
          ],
          {
            "default": "nearest"
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor",
        "supersample",
        "resampling"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Resize Factor (mtb)",
    "display_name": "Image Resize Factor (mtb)",
    "description": "# Image Resize Factor\n\nExtracted mostly from WAS Node Suite, with a few edits (most notably multiple image support) and less features.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Save Image Grid (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "save_intermediate": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "save_intermediate"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Image Grid (mtb)",
    "display_name": "Save Image Grid (mtb)",
    "description": "# Save Image Grid\n\nSave all the images in the input batch as a grid of images.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/IO",
    "output_node": true
  },
  "Load Image From Url (mtb)": {
    "input": {
      "required": {
        "url": [
          "STRING",
          {
            "default": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Example.jpg/800px-Example.jpg"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "url"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Load Image From Url (mtb)",
    "display_name": "Load Image From Url (mtb)",
    "description": "# Load image from URL\n\nLoad an image from the given URL\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/IO",
    "output_node": false
  },
  "Sharpen (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma_x": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 10,
            "step": 0.1
          }
        ],
        "sigma_y": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 10,
            "step": 0.1
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sharpen_radius",
        "sigma_x",
        "sigma_y",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Sharpen (mtb)",
    "display_name": "Sharpen (mtb)",
    "description": "# Sharpen\nSharpens an image using a Gaussian kernel.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image processing",
    "output_node": false
  },
  "Extract Coordinates From Image (mtb)": {
    "input": {
      "required": {
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "max_points": [
          "INT",
          {
            "default": 50,
            "min": 0
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "threshold",
        "max_points"
      ],
      "optional": [
        "image",
        "mask"
      ]
    },
    "output": [
      "BATCH_COORDINATES",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "BATCH_COORDINATES",
      "IMAGE"
    ],
    "name": "Extract Coordinates From Image (mtb)",
    "display_name": "Extract Coordinates From Image (mtb)",
    "description": "Extract 2D points from a batch of images based on a threshold.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/coordinates",
    "output_node": false
  },
  "Coordinates To String (mtb)": {
    "input": {
      "required": {
        "coordinates": [
          "BATCH_COORDINATES"
        ],
        "frame": [
          "INT"
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "frame"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Coordinates To String (mtb)",
    "display_name": "Coordinates To String (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/coordinates",
    "output_node": false
  },
  "Stack Images (mtb)": {
    "input": {
      "required": {
        "vertical": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "match_method": [
          [
            "error",
            "smallest",
            "largest"
          ],
          {
            "default": "error"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vertical"
      ],
      "optional": [
        "match_method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Stack Images (mtb)",
    "display_name": "Stack Images (mtb)",
    "description": "# Stack Images\n\nA simple way to stack images either horizontally or vertically. Stack image uses [dynamic inputs](web-dynamic-inputs).\n\nIt outputs RGBA tensors and supports RGB or RGBA as input (normalized to RGBA internally). If the image dimensions don't match they must at least match:\n- in `width` when stacking vertically.\n- in `height` when stacking horizontally.\n\nHere is an example workflow using [Text To Image](nodes-text-to-image) (the text was generated using [Nous Hermes 2 Vision](https://huggingface.co/billborkowski/llava-NousResearch_Nous-Hermes-2-Vision-GGUF) thanks to the great [ComfyUI_VLM_nodes](https://github.com/gokayfem/ComfyUI_VLM_nodes) extension. For simplicity's sake, the workflow doesn't contain external nodes:\n\n![stack_images](https://github.com/melMass/comfy_mtb/assets/7041726/a0c03621-3377-46cf-a6b4-f47e70c7d11f)\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image utils",
    "output_node": false
  },
  "Pick From Batch (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "from_direction": [
          [
            "end",
            "start"
          ],
          {
            "default": "start"
          }
        ],
        "count": [
          "INT",
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "from_direction",
        "count"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Pick From Batch (mtb)",
    "display_name": "Pick From Batch (mtb)",
    "description": "# Pick From Batch\nPick a specific number of images from a batch either from the head or the tail.\n    \n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image utils",
    "output_node": false
  },
  "Save Image (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Save Image (mtb)",
    "display_name": "Save Image (mtb)",
    "description": "Saves the input images to your ComfyUI output directory.\n    This behaves exactly like the native SaveImage node but isn't an output node.\n    The reason I made this is to allow 'inlining' image save in loops for instance,\n    using the native node there wouldn't run for each iteration of the loop.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image utils",
    "output_node": false
  },
  "Save Gif (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "fps": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 120
          }
        ],
        "resize_by": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1
          }
        ],
        "optimize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "pingpong": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "resample_filter": [
          [
            "nearest",
            "box",
            "bilinear",
            "hamming",
            "bicubic",
            "lanczos"
          ]
        ],
        "use_ffmpeg": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "fps",
        "resize_by",
        "optimize",
        "pingpong",
        "resample_filter",
        "use_ffmpeg"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Gif (mtb)",
    "display_name": "Save Gif (mtb)",
    "description": "# Save GIF\nSave the images from the batch as a GIF\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/IO",
    "output_node": true,
    "deprecated": true
  },
  "Export With Ffmpeg (mtb)": {
    "input": {
      "optional": {
        "images": [
          "IMAGE"
        ],
        "playlist": [
          "PLAYLIST"
        ]
      },
      "required": {
        "fps": [
          "FLOAT",
          {
            "default": 24,
            "min": 1
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "export"
          }
        ],
        "format": [
          [
            "mov",
            "mp4",
            "mkv",
            "gif",
            "avi"
          ],
          {
            "default": "mov"
          }
        ],
        "codec": [
          [
            "prores_ks",
            "libx264",
            "libx265",
            "gif"
          ],
          {
            "default": "prores_ks"
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "images",
        "playlist"
      ],
      "required": [
        "fps",
        "prefix",
        "format",
        "codec"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [false],
    "output_name": [
      "VIDEO"
    ],
    "name": "Export With Ffmpeg (mtb)",
    "display_name": "Export With Ffmpeg (mtb)",
    "description": "# Export with FFmpeg\n\nQuite crude node, [VHS](https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite) is recommended now\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/IO",
    "output_node": true,
    "deprecated": true
  },
  "Add To Playlist (mtb)": {
    "input": {
      "required": {
        "relative_paths": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "persistant_playlist": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "playlist_name": [
          "STRING",
          {
            "default": "playlist_{index:04d}"
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "relative_paths",
        "persistant_playlist",
        "playlist_name",
        "index"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Add To Playlist (mtb)",
    "display_name": "Add To Playlist (mtb)",
    "description": "Add a video to the playlist",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/IO",
    "output_node": true,
    "experimental": true
  },
  "Read Playlist (mtb)": {
    "input": {
      "required": {
        "enable": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "persistant_playlist": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "playlist_name": [
          "STRING",
          {
            "default": "playlist_{index:04d}"
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "enable",
        "persistant_playlist",
        "playlist_name",
        "index"
      ]
    },
    "output": [
      "PLAYLIST"
    ],
    "output_is_list": [false],
    "output_name": [
      "PLAYLIST"
    ],
    "name": "Read Playlist (mtb)",
    "display_name": "Read Playlist (mtb)",
    "description": "# Read a playlist\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/IO",
    "output_node": false,
    "experimental": true
  },
  "Latent Lerp (mtb)": {
    "input": {
      "required": {
        "A": [
          "LATENT"
        ],
        "B": [
          "LATENT"
        ],
        "t": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "A",
        "B",
        "t"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Lerp (mtb)",
    "display_name": "Latent Lerp (mtb)",
    "description": "# Latent Lerp\nLinear interpolation (blend) between two latent vectors\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/latent",
    "output_node": false
  },
  "Image H264 Compression (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "The input image tensor to be compressed and decompressed."
          }
        ],
        "crf": [
          "INT",
          {
            "default": 23,
            "min": 0,
            "max": 51,
            "step": 1,
            "tooltip": "Constant Rate Factor for h264 encoding (lower values mean higher quality)."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crf"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image H264 Compression (mtb)",
    "display_name": "Image H264 Compression (mtb)",
    "description": "\n**Encodes the input with h264 compression using a configurable CRF**.\n\n\u003E [!IMPORTANT]\n\u003E This node is not really needed with the latest version of LTXVideo.\n\n\u003E [!NOTE]\n\u003E This was recommended by the creators of LTX over banodoco's discord.\n\n*Orginal code from [mix](https://github.com/XmYx)*",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "image",
    "output_node": false
  },
  "Image Remove Background Rembg (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "alpha_matting": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting_foreground_threshold": [
          "INT",
          {
            "default": 240,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_background_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_erode_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "post_process_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bgcolor": [
          "COLOR",
          {
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "alpha_matting",
        "alpha_matting_foreground_threshold",
        "alpha_matting_background_threshold",
        "alpha_matting_erode_size",
        "post_process_mask",
        "bgcolor"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "Image (rgba)",
      "Mask",
      "Image"
    ],
    "name": "Image Remove Background Rembg (mtb)",
    "display_name": "Image Remove Background Rembg (mtb)",
    "description": "# Image Remove Background\n\nRemoves the background from the input using Rembg.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Model Patch Seamless (mtb)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "startStep": [
          "INT",
          {
            "default": 0
          }
        ],
        "stopStep": [
          "INT",
          {
            "default": 999
          }
        ],
        "tilingX": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tilingY": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "startStep",
        "stopStep",
        "tilingX",
        "tilingY"
      ]
    },
    "output": [
      "MODEL",
      "MODEL"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "Original Model (passthrough)",
      "Patched Model"
    ],
    "name": "Model Patch Seamless (mtb)",
    "display_name": "Model Patch Seamless (mtb)",
    "description": "# Model Patch Seamless\n\nThis uses this [hack](https://gitlab.com/-/snippets/2395088) to generate seamless image right at the inference stage.\nResults might vary depending on the model and prompt.\n\nHere is a few output from an extended version of the available [example](https://github.com/melMass/comfy_mtb/wiki/Examples). The main difference is that I use an upscale step before running [deep bump](nodes-deep-bump).\n\n|albedo|\n|-|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/3984907b-617e-49ff-8100-92c91af4459e\"/\u003E|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/1194b2b8-eca4-4f75-8a1c-4d8074c08ea6\"/\u003E|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/11026b5d-500b-4cfe-8cdc-682cc995dfb1\"/\u003E|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/1f5d1671-5208-47ca-b625-478b09eed969\"/\u003E|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/cdf3463f-c66c-472c-8ac3-e80af1901852\"/\u003E|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/151b44ca-26e2-49d0-91be-cda938c0577a\"/\u003E|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/b4280a65-644f-45d8-9fe8-b6148bf66b3c\"/\u003E|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/cbfacbbc-2ae2-4cd2-84bc-8849c2115b51\"/\u003E|\n|\u003Cimg width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/8c6eea98-ae90-48d3-9051-de542102166e\"/\u003E|",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/textures",
    "output_node": false
  },
  "Vae Decode (mtb)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "seamless_model": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_tiling_decoder": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "seamless_model",
        "use_tiling_decoder",
        "tile_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Vae Decode (mtb)",
    "display_name": "Vae Decode (mtb)",
    "description": "# VAE Decode\nThis works exactly as the builtin one but also supports the sd seamless hack, taken from: FlyingFireCo/tiled_ksampler\nthat is use in the `Model Patch Seamless` node.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/decode",
    "output_node": false
  },
  "Float To Number (mtb)": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0,
            "min": -1000000000,
            "max": 1000000000,
            "step": 1,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [false],
    "output_name": [
      "NUMBER"
    ],
    "name": "Float To Number (mtb)",
    "display_name": "Float To Number (mtb)",
    "description": "Node addon for the WAS Suite. Converts a \"comfy\" FLOAT to a NUMBER.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/number",
    "output_node": false
  },
  "Int To Bool (mtb)": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Int To Bool (mtb)",
    "display_name": "Int To Bool (mtb)",
    "description": "# Int to Bool\n\nBasic int to bool conversion, \u003E= 1 is true\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/number",
    "output_node": false
  },
  "Int To Number (mtb)": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 0,
            "min": -1000000000,
            "max": 1000000000,
            "step": 1,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [false],
    "output_name": [
      "NUMBER"
    ],
    "name": "Int To Number (mtb)",
    "display_name": "Int To Number (mtb)",
    "description": "Node addon for the WAS Suite. Converts a \"comfy\" INT to a NUMBER.",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/number",
    "output_node": false
  },
  "Postshot Export (mtb)": {
    "input": {
      "required": {
        "project_file": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "export_splat_ply": [
          "STRING",
          {
            "default": "output.ply"
          }
        ],
        "postshot_cli": [
          "STRING",
          {
            "default": "C:/Program Files/Jawset Postshot/bin/postshot-cli.exe"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "project_file",
        "export_splat_ply",
        "postshot_cli"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "exported_ply_path"
    ],
    "name": "Postshot Export (mtb)",
    "display_name": "Postshot Export (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/postshot",
    "output_node": true
  },
  "Postshot Train (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "These image will get save to disk first"
          }
        ],
        "profile": [
          [
            "NeRF L",
            "NeRF M",
            "NeRF S",
            "NeRF XL",
            "NeRF XXL",
            "Splat ADC",
            "Splat MCMC"
          ],
          {
            "default": "Splat MCMC",
            "tooltip": "The radiance field model profile to train"
          }
        ],
        "image_select": [
          [
            "all",
            "best"
          ],
          {
            "default": "best",
            "tooltip": "How to select training images from the source image sets"
          }
        ],
        "train_steps_limit": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 1000,
            "tooltip": "Number of kSteps to train the model for"
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "output",
            "tooltip": "path to save the project to\nAbsolute paths are kept as is, relatives are from the output directory.\n"
          }
        ],
        "postshot_cli": [
          "STRING",
          {
            "default": "C:/Program Files/Jawset Postshot/bin/postshot-cli.exe"
          }
        ]
      },
      "optional": {
        "gpu": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "tooltip": "Specify the index of the GPU to use"
          }
        ],
        "num_train_images": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "tooltip": "If image-select best is used, specifies the number of training images to select"
          }
        ],
        "max_image_size": [
          "INT",
          {
            "default": 1600,
            "min": 0,
            "tooltip": "Downscale training images such that their longer edge is at most this value in pixels. Disabled if zero."
          }
        ],
        "max_num_features": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "tooltip": "Maximum number of 2D kFeatures extracted from each image."
          }
        ],
        "splat_density": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.125,
            "max": 8,
            "tooltip": "Controls how much additional splats are generated during training.Applies only in 'Splat ADC' profile."
          }
        ],
        "max_num_splats": [
          "INT",
          {
            "default": 3000,
            "min": 1,
            "tooltip": "Sets the maximum number of splats (in kSplats) created during training. Applies only in 'Splat MCMC' profile."
          }
        ],
        "export_splat_ply": [
          "STRING",
          {
            "default": "",
            "tooltip": "If not empty will also save a ply file.\nAbsolute paths are kept as is, relatives are from the output directory.\n"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "profile",
        "image_select",
        "train_steps_limit",
        "output_path",
        "postshot_cli"
      ],
      "optional": [
        "gpu",
        "num_train_images",
        "max_image_size",
        "max_num_features",
        "splat_density",
        "max_num_splats",
        "export_splat_ply"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "project_file_path"
    ],
    "name": "Postshot Train (mtb)",
    "display_name": "Postshot Train (mtb)",
    "description": "# Postshot Train\n\nhttps://github.com/user-attachments/assets/fcaf4163-28c7-4768-a785-bc794fca3ec0\n\n\nWrapper around the [Potshot](https://www.jawset.com/) CLI. \nYou must first run the GUI at least once and login.\nIf you use a custom install location you can specify it in **Settings \u003E MTB**\n\n\n\n## Radiance Field Profile\n\nPostshot supports two different models to create radiance fields:\n- Gaussian Splatting (Splat)\n- Neural Radiance Fields (NeRF).\n\n### Splat MCMC\n\nBoth Splat profiles allow for very fast rendering and quickly reconstruct fine detail in well-covered regions of the scene.\n\nThe Splat MCMC profile is currently the recommended profile for most scenes. It allows limiting the number of Splat primitives and thereby the amount of memory and disk space the resulting model requires.\n\n### Splat ADC\n\nThe Splat ADC profile is very similar to the Splat MCMC profile, but differs in the way it produces detail in the scene during training. You can control the amount of detail it creates during training through the Splat Density parameter.\n\n### NeRF models\n\nWhen using the NeRF model, the maximum accuracy has to be specified before the training can begin. Postshot currently provides five sizes (S, M, L, XL, XXL) for NeRF models. NeRFs are much slower to render than Splats.\n\nHere is an intuition for how 'large' the NeRF profile options are:\n- **S** is for toy-like testing.\n- **M** is a significant step up, such that real scenes can be reasonably captured with low memory requirements.\n- **L** is the recommended default if you want to produce good image quality.\n- **XL** and **XXL** are for pushing toward fine detail in the scene center or for large scenes.\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/postshot",
    "output_node": true
  },
  "Model Pruner (mtb)": {
    "input": {
      "optional": {
        "unet": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ]
      },
      "required": {
        "save_separately": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "save_folder": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ],
        "fix_clip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "remove_junk": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "ema_mode": [
          [
            "disabled",
            "remove_ema",
            "ema_only"
          ],
          {
            "default": "remove_ema"
          }
        ],
        "precision_unet": [
          [
            "full",
            "fp32",
            "fp16",
            "bf16",
            "fp8"
          ],
          {
            "default": "full"
          }
        ],
        "operation_unet": [
          [
            "copy",
            "convert",
            "delete"
          ],
          {
            "default": "convert"
          }
        ],
        "precision_clip": [
          [
            "full",
            "fp32",
            "fp16",
            "bf16",
            "fp8"
          ],
          {
            "default": "full"
          }
        ],
        "operation_clip": [
          [
            "copy",
            "convert",
            "delete"
          ],
          {
            "default": "convert"
          }
        ],
        "precision_vae": [
          [
            "full",
            "fp32",
            "fp16",
            "bf16",
            "fp8"
          ],
          {
            "default": "full"
          }
        ],
        "operation_vae": [
          [
            "copy",
            "convert",
            "delete"
          ],
          {
            "default": "convert"
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "unet",
        "clip",
        "vae"
      ],
      "required": [
        "save_separately",
        "save_folder",
        "fix_clip",
        "remove_junk",
        "ema_mode",
        "precision_unet",
        "operation_unet",
        "precision_clip",
        "operation_clip",
        "precision_vae",
        "operation_vae"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Model Pruner (mtb)",
    "display_name": "Model Pruner (mtb)",
    "description": "# Model Pruner\n\nBasic output node to prune/downsample a model.\n\nIf `save_folder` is a relative path, it will be relative to comfy's output directory?\n\n**This is a bit experimental for now**\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/prune",
    "output_node": true
  },
  "Qr Code (mtb)": {
    "input": {
      "required": {
        "url": [
          "STRING",
          {
            "default": "https://www.github.com"
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "max": 8096,
            "min": 0,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "max": 8096,
            "min": 0,
            "step": 1
          }
        ],
        "error_correct": [
          [
            "L",
            "M",
            "Q",
            "H"
          ],
          {
            "default": "L"
          }
        ],
        "box_size": [
          "INT",
          {
            "default": 10,
            "max": 8096,
            "min": 0,
            "step": 1
          }
        ],
        "border": [
          "INT",
          {
            "default": 4,
            "max": 8096,
            "min": 0,
            "step": 1
          }
        ],
        "invert": [
          [
            "BOOLEAN"
          ],
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "url",
        "width",
        "height",
        "error_correct",
        "box_size",
        "border",
        "invert"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Qr Code (mtb)",
    "display_name": "Qr Code (mtb)",
    "description": "# QR Code\nBasic QR Code generator\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Transform Image (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "step": 1,
            "min": -4096,
            "max": 4096
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "step": 1,
            "min": -4096,
            "max": 4096
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.001,
            "step": 0.01
          }
        ],
        "angle": [
          "FLOAT",
          {
            "default": 0,
            "step": 1,
            "min": -360,
            "max": 360
          }
        ],
        "shear": [
          "FLOAT",
          {
            "default": 0,
            "step": 1,
            "min": -4096,
            "max": 4096
          }
        ],
        "border_handling": [
          [
            "edge",
            "constant",
            "reflect",
            "symmetric"
          ],
          {
            "default": "edge"
          }
        ],
        "constant_color": [
          "COLOR",
          {
            "default": "#000000"
          }
        ]
      },
      "optional": {
        "filter_type": [
          [
            "nearest",
            "box",
            "bilinear",
            "hamming",
            "bicubic",
            "lanczos"
          ],
          {
            "default": "bilinear"
          }
        ],
        "stretch_x": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.001,
            "max": 10,
            "step": 0.01
          }
        ],
        "stretch_y": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.001,
            "max": 10,
            "step": 0.01
          }
        ],
        "use_normalized": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "If true, transform values are scaled to image dimensions."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "x",
        "y",
        "zoom",
        "angle",
        "shear",
        "border_handling",
        "constant_color"
      ],
      "optional": [
        "filter_type",
        "stretch_x",
        "stretch_y",
        "use_normalized"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Transform Image (mtb)",
    "display_name": "Transform Image (mtb)",
    "description": "# Transform Image\n\nTransform images while maintaining the input tensor shape\n\n## Filter Types\n1. `NEAREST`: Nearest neighbor - fastest but lowest quality\n2. `BOX`: Box filtering - similar to nearest neighbor but with some averaging\n3. `BILINEAR`: Bilinear filtering - good balance between quality and speed\n4. `HAMMING`: Hamming filtering - improved version of bilinear (doesn't allow rotations)\n5. `BICUBIC`: Bicubic filtering - better quality than bilinear but slower\n6. `LANCZOS`: Lanczos filtering - highest quality but slowest (doesn't allow rotations)\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/transform",
    "output_node": false
  },
  "Load Image Sequence (mtb)": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "videos/####.png"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 9999999
          }
        ]
      },
      "optional": {
        "range": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path",
        "current_frame"
      ],
      "optional": [
        "range"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "current_frame",
      "total_frames"
    ],
    "name": "Load Image Sequence (mtb)",
    "display_name": "Load Image Sequence (mtb)",
    "description": "# Load Image Sequence\n\nLoad an image sequence from a folder. The current frame is used to determine which image to load.  \nThe UX need improvements but you can use it as follow:  \n\n- If current_frame is -1, it will load all the frames matching the pattern.\n- If the path contains a `*` it will glob the paths using it.\n- If range is provided (for instance `0-10` to load frame 0 to 10) current_frame is ignored.\n\n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/IO",
    "output_node": false
  },
  "Save Image Sequence (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "Sequence"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "current_frame"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Image Sequence (mtb)",
    "display_name": "Save Image Sequence (mtb)",
    "description": "# Save Image Sequence\n\nSave an image sequence to a folder. The current frame is used to determine which image to save.\nThis is merely a wrapper around the `save_images` function with formatting for the output folder and filename.\n    \n",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/IO",
    "output_node": true
  },
  "Load Vit Matte Model (mtb)": {
    "input": {
      "required": {
        "kind": [
          [
            "Composition-1K",
            "Distinctions-646"
          ]
        ],
        "autodownload": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "kind",
        "autodownload"
      ]
    },
    "output": [
      "VITMATTE_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "torch_script"
    ],
    "name": "Load Vit Matte Model (mtb)",
    "display_name": "Load Vit Matte Model (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/vitmatte",
    "output_node": false
  },
  "Generate Trimap (mtb)": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "erode": [
          "INT",
          {
            "default": 10
          }
        ],
        "dilate": [
          "INT",
          {
            "default": 10
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "erode",
        "dilate"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimap"
    ],
    "name": "Generate Trimap (mtb)",
    "display_name": "Generate Trimap (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/vitmatte",
    "output_node": false
  },
  "Apply Vit Matte (mtb)": {
    "input": {
      "required": {
        "model": [
          "VITMATTE_MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "trimap": [
          "IMAGE"
        ],
        "returns": [
          [
            "RGB",
            "RGBA"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "trimap",
        "returns"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image (rgba)",
      "mask"
    ],
    "name": "Apply Vit Matte (mtb)",
    "display_name": "Apply Vit Matte (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy-mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "CM_BoolToInt": {
    "input": {
      "required": {
        "a": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "CM_BoolToInt",
    "display_name": "BoolToInt",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_IntToBool": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "CM_IntToBool",
    "display_name": "IntToBool",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_FloatToInt": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "CM_FloatToInt",
    "display_name": "FloatToInt",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_IntToFloat": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_IntToFloat",
    "display_name": "IntToFloat",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_IntToNumber": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [false],
    "output_name": [
      "NUMBER"
    ],
    "name": "CM_IntToNumber",
    "display_name": "IntToNumber",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_NumberToInt": {
    "input": {
      "required": {
        "a": [
          "NUMBER",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "CM_NumberToInt",
    "display_name": "NumberToInt",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_FloatToNumber": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [false],
    "output_name": [
      "NUMBER"
    ],
    "name": "CM_FloatToNumber",
    "display_name": "FloatToNumber",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_NumberToFloat": {
    "input": {
      "required": {
        "a": [
          "NUMBER",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_NumberToFloat",
    "display_name": "NumberToFloat",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_ComposeVec2": {
    "input": {
      "required": {
        "x": [
          "FLOAT",
          {
            "default": 0,
            "round": false
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y"
      ]
    },
    "output": [
      "VEC2"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC2"
    ],
    "name": "CM_ComposeVec2",
    "display_name": "ComposeVec2",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_ComposeVec3": {
    "input": {
      "required": {
        "x": [
          "FLOAT",
          {
            "default": 0
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0
          }
        ],
        "z": [
          "FLOAT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "z"
      ]
    },
    "output": [
      "VEC3"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC3"
    ],
    "name": "CM_ComposeVec3",
    "display_name": "ComposeVec3",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_ComposeVec4": {
    "input": {
      "required": {
        "x": [
          "FLOAT",
          {
            "default": 0
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0
          }
        ],
        "z": [
          "FLOAT",
          {
            "default": 0
          }
        ],
        "w": [
          "FLOAT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "z",
        "w"
      ]
    },
    "output": [
      "VEC4"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC4"
    ],
    "name": "CM_ComposeVec4",
    "display_name": "ComposeVec4",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_BreakoutVec2": {
    "input": {
      "required": {
        "a": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "FLOAT",
      "FLOAT"
    ],
    "name": "CM_BreakoutVec2",
    "display_name": "BreakoutVec2",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_BreakoutVec3": {
    "input": {
      "required": {
        "a": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "FLOAT",
      "FLOAT",
      "FLOAT"
    ],
    "name": "CM_BreakoutVec3",
    "display_name": "BreakoutVec3",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_BreakoutVec4": {
    "input": {
      "required": {
        "a": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "FLOAT",
      "FLOAT",
      "FLOAT",
      "FLOAT"
    ],
    "name": "CM_BreakoutVec4",
    "display_name": "BreakoutVec4",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/conversion",
    "output_node": false
  },
  "CM_BoolUnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Not"
          ]
        ],
        "a": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "CM_BoolUnaryOperation",
    "display_name": "BoolUnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/bool",
    "output_node": false
  },
  "CM_BoolBinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Nor",
            "Xor",
            "Nand",
            "And",
            "Xnor",
            "Or",
            "Eq",
            "Neq"
          ]
        ],
        "a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "CM_BoolBinaryOperation",
    "display_name": "BoolBinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/bool",
    "output_node": false
  },
  "CM_IntUnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Abs",
            "Neg",
            "Inc",
            "Dec",
            "Sqr",
            "Cube",
            "Not",
            "Factorial"
          ]
        ],
        "a": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "CM_IntUnaryOperation",
    "display_name": "IntUnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/int",
    "output_node": false
  },
  "CM_IntUnaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "IsZero",
            "IsNonZero",
            "IsPositive",
            "IsNegative",
            "IsEven",
            "IsOdd"
          ]
        ],
        "a": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_IntUnaryCondition",
    "display_name": "IntUnaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/int",
    "output_node": false
  },
  "CM_IntBinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Add",
            "Sub",
            "Mul",
            "Div",
            "Mod",
            "Pow",
            "And",
            "Nand",
            "Or",
            "Nor",
            "Xor",
            "Xnor",
            "Shl",
            "Shr",
            "Max",
            "Min"
          ]
        ],
        "a": [
          "INT",
          {
            "default": 0
          }
        ],
        "b": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "CM_IntBinaryOperation",
    "display_name": "IntBinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/int",
    "output_node": false
  },
  "CM_IntBinaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "Eq",
            "Neq",
            "Gt",
            "Lt",
            "Geq",
            "Leq"
          ]
        ],
        "a": [
          "INT",
          {
            "default": 0
          }
        ],
        "b": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_IntBinaryCondition",
    "display_name": "IntBinaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/int",
    "output_node": false
  },
  "CM_FloatUnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Neg",
            "Inc",
            "Dec",
            "Abs",
            "Sqr",
            "Cube",
            "Sqrt",
            "Exp",
            "Ln",
            "Log10",
            "Log2",
            "Sin",
            "Cos",
            "Tan",
            "Asin",
            "Acos",
            "Atan",
            "Sinh",
            "Cosh",
            "Tanh",
            "Asinh",
            "Acosh",
            "Atanh",
            "Round",
            "Floor",
            "Ceil",
            "Trunc",
            "Erf",
            "Erfc",
            "Gamma",
            "Radians",
            "Degrees"
          ]
        ],
        "a": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_FloatUnaryOperation",
    "display_name": "FloatUnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/float",
    "output_node": false
  },
  "CM_FloatUnaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "IsZero",
            "IsPositive",
            "IsNegative",
            "IsNonZero",
            "IsPositiveInfinity",
            "IsNegativeInfinity",
            "IsNaN",
            "IsFinite",
            "IsInfinite",
            "IsEven",
            "IsOdd"
          ]
        ],
        "a": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "CM_FloatUnaryCondition",
    "display_name": "FloatUnaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/float",
    "output_node": false
  },
  "CM_FloatBinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Add",
            "Sub",
            "Mul",
            "Div",
            "Mod",
            "Pow",
            "FloorDiv",
            "Max",
            "Min",
            "Log",
            "Atan2"
          ]
        ],
        "a": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.001,
            "round": false
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_FloatBinaryOperation",
    "display_name": "FloatBinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/float",
    "output_node": false
  },
  "CM_FloatBinaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "Eq",
            "Neq",
            "Gt",
            "Gte",
            "Lt",
            "Lte"
          ]
        ],
        "a": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.001,
            "round": false
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "CM_FloatBinaryCondition",
    "display_name": "FloatBinaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/float",
    "output_node": false
  },
  "CM_NumberUnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Neg",
            "Inc",
            "Dec",
            "Abs",
            "Sqr",
            "Cube",
            "Sqrt",
            "Exp",
            "Ln",
            "Log10",
            "Log2",
            "Sin",
            "Cos",
            "Tan",
            "Asin",
            "Acos",
            "Atan",
            "Sinh",
            "Cosh",
            "Tanh",
            "Asinh",
            "Acosh",
            "Atanh",
            "Round",
            "Floor",
            "Ceil",
            "Trunc",
            "Erf",
            "Erfc",
            "Gamma",
            "Radians",
            "Degrees"
          ]
        ],
        "a": [
          "NUMBER",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [false],
    "output_name": [
      "NUMBER"
    ],
    "name": "CM_NumberUnaryOperation",
    "display_name": "NumberUnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/number",
    "output_node": false
  },
  "CM_NumberUnaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "IsZero",
            "IsPositive",
            "IsNegative",
            "IsNonZero",
            "IsPositiveInfinity",
            "IsNegativeInfinity",
            "IsNaN",
            "IsFinite",
            "IsInfinite",
            "IsEven",
            "IsOdd"
          ]
        ],
        "a": [
          "NUMBER",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_NumberUnaryCondition",
    "display_name": "NumberUnaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/Number",
    "output_node": false
  },
  "CM_NumberBinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Add",
            "Sub",
            "Mul",
            "Div",
            "Mod",
            "Pow",
            "FloorDiv",
            "Max",
            "Min",
            "Log",
            "Atan2"
          ]
        ],
        "a": [
          "NUMBER",
          {
            "default": 0
          }
        ],
        "b": [
          "NUMBER",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [false],
    "output_name": [
      "NUMBER"
    ],
    "name": "CM_NumberBinaryOperation",
    "display_name": "NumberBinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/number",
    "output_node": false
  },
  "CM_NumberBinaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "Eq",
            "Neq",
            "Gt",
            "Gte",
            "Lt",
            "Lte"
          ]
        ],
        "a": [
          "NUMBER",
          {
            "default": 0
          }
        ],
        "b": [
          "NUMBER",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_NumberBinaryCondition",
    "display_name": "NumberBinaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/float",
    "output_node": false
  },
  "CM_Vec2UnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Neg",
            "Normalize"
          ]
        ],
        "a": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "VEC2"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC2"
    ],
    "name": "CM_Vec2UnaryOperation",
    "display_name": "Vec2UnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec2",
    "output_node": false
  },
  "CM_Vec2UnaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "IsZero",
            "IsNotZero",
            "IsNormalized",
            "IsNotNormalized"
          ]
        ],
        "a": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_Vec2UnaryCondition",
    "display_name": "Vec2UnaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec2",
    "output_node": false
  },
  "CM_Vec2ToScalarUnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Norm"
          ]
        ],
        "a": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_Vec2ToScalarUnaryOperation",
    "display_name": "Vec2ToScalarUnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec2",
    "output_node": false
  },
  "CM_Vec2BinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Add",
            "Sub",
            "Cross"
          ]
        ],
        "a": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ],
        "b": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "VEC2"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC2"
    ],
    "name": "CM_Vec2BinaryOperation",
    "display_name": "Vec2BinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec2",
    "output_node": false
  },
  "CM_Vec2BinaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "Eq",
            "Neq"
          ]
        ],
        "a": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ],
        "b": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_Vec2BinaryCondition",
    "display_name": "Vec2BinaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec2",
    "output_node": false
  },
  "CM_Vec2ToScalarBinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Dot",
            "Distance"
          ]
        ],
        "a": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ],
        "b": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_Vec2ToScalarBinaryOperation",
    "display_name": "Vec2ToScalarBinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec2",
    "output_node": false
  },
  "CM_Vec2ScalarOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Mul",
            "Div"
          ]
        ],
        "a": [
          "VEC2",
          {
            "default": [0, 0]
          }
        ],
        "b": [
          "FLOAT"
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "VEC2"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC2"
    ],
    "name": "CM_Vec2ScalarOperation",
    "display_name": "Vec2ScalarOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec2",
    "output_node": false
  },
  "CM_Vec3UnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Neg",
            "Normalize"
          ]
        ],
        "a": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "VEC3"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC3"
    ],
    "name": "CM_Vec3UnaryOperation",
    "display_name": "Vec3UnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec3",
    "output_node": false
  },
  "CM_Vec3UnaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "IsZero",
            "IsNotZero",
            "IsNormalized",
            "IsNotNormalized"
          ]
        ],
        "a": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_Vec3UnaryCondition",
    "display_name": "Vec3UnaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec3",
    "output_node": false
  },
  "CM_Vec3ToScalarUnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Norm"
          ]
        ],
        "a": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_Vec3ToScalarUnaryOperation",
    "display_name": "Vec3ToScalarUnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec3",
    "output_node": false
  },
  "CM_Vec3BinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Add",
            "Sub",
            "Cross"
          ]
        ],
        "a": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ],
        "b": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "VEC3"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC3"
    ],
    "name": "CM_Vec3BinaryOperation",
    "display_name": "Vec3BinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec3",
    "output_node": false
  },
  "CM_Vec3BinaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "Eq",
            "Neq"
          ]
        ],
        "a": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ],
        "b": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_Vec3BinaryCondition",
    "display_name": "Vec3BinaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec3",
    "output_node": false
  },
  "CM_Vec3ToScalarBinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Dot",
            "Distance"
          ]
        ],
        "a": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ],
        "b": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_Vec3ToScalarBinaryOperation",
    "display_name": "Vec3ToScalarBinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec3",
    "output_node": false
  },
  "CM_Vec3ScalarOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Mul",
            "Div"
          ]
        ],
        "a": [
          "VEC3",
          {
            "default": [0, 0, 0]
          }
        ],
        "b": [
          "FLOAT"
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "VEC3"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC3"
    ],
    "name": "CM_Vec3ScalarOperation",
    "display_name": "Vec3ScalarOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec3",
    "output_node": false
  },
  "CM_Vec4UnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Neg",
            "Normalize"
          ]
        ],
        "a": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "VEC4"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC4"
    ],
    "name": "CM_Vec4UnaryOperation",
    "display_name": "Vec4UnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec4",
    "output_node": false
  },
  "CM_Vec4UnaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "IsZero",
            "IsNotZero",
            "IsNormalized",
            "IsNotNormalized"
          ]
        ],
        "a": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_Vec4UnaryCondition",
    "display_name": "Vec4UnaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec4",
    "output_node": false
  },
  "CM_Vec4ToScalarUnaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Norm"
          ]
        ],
        "a": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_Vec4ToScalarUnaryOperation",
    "display_name": "Vec4ToScalarUnaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec4",
    "output_node": false
  },
  "CM_Vec4BinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Add",
            "Sub",
            "Cross"
          ]
        ],
        "a": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ],
        "b": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "VEC4"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC4"
    ],
    "name": "CM_Vec4BinaryOperation",
    "display_name": "Vec4BinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec4",
    "output_node": false
  },
  "CM_Vec4BinaryCondition": {
    "input": {
      "required": {
        "op": [
          [
            "Eq",
            "Neq"
          ]
        ],
        "a": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ],
        "b": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOL"
    ],
    "name": "CM_Vec4BinaryCondition",
    "display_name": "Vec4BinaryCondition",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec4",
    "output_node": false
  },
  "CM_Vec4ToScalarBinaryOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Dot",
            "Distance"
          ]
        ],
        "a": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ],
        "b": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "CM_Vec4ToScalarBinaryOperation",
    "display_name": "Vec4ToScalarBinaryOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec4",
    "output_node": false
  },
  "CM_Vec4ScalarOperation": {
    "input": {
      "required": {
        "op": [
          [
            "Mul",
            "Div"
          ]
        ],
        "a": [
          "VEC4",
          {
            "default": [0, 0, 0, 0]
          }
        ],
        "b": [
          "FLOAT"
        ]
      }
    },
    "input_order": {
      "required": [
        "op",
        "a",
        "b"
      ]
    },
    "output": [
      "VEC4"
    ],
    "output_is_list": [false],
    "output_name": [
      "VEC4"
    ],
    "name": "CM_Vec4ScalarOperation",
    "display_name": "Vec4ScalarOperation",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/vec4",
    "output_node": false
  },
  "CM_SDXLResolution": {
    "input": {
      "required": {
        "resolution": [
          [
            "1024x1024",
            "1152x896",
            "896x1152",
            "1216x832",
            "832x1216",
            "1344x768",
            "768x1344",
            "1536x640",
            "640x1536"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "CM_SDXLResolution",
    "display_name": "SDXLResolution",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/graphics",
    "output_node": false
  },
  "CM_NearestSDXLResolution": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "CM_NearestSDXLResolution",
    "display_name": "NearestSDXLResolution",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/graphics",
    "output_node": false
  },
  "CM_SDXLExtendedResolution": {
    "input": {
      "required": {
        "resolution": [
          [
            "512x2048",
            "512x1984",
            "512x1920",
            "512x1856",
            "576x1792",
            "576x1728",
            "576x1664",
            "640x1600",
            "640x1536",
            "704x1472",
            "704x1408",
            "704x1344",
            "768x1344",
            "768x1280",
            "832x1216",
            "832x1152",
            "896x1152",
            "896x1088",
            "960x1088",
            "960x1024",
            "1024x1024",
            "1024x960",
            "1088x960",
            "1088x896",
            "1152x896",
            "1152x832",
            "1216x832",
            "1280x768",
            "1344x768",
            "1408x704",
            "1472x704",
            "1536x640",
            "1600x640",
            "1664x576",
            "1728x576",
            "1792x576",
            "1856x512",
            "1920x512",
            "1984x512",
            "2048x512"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "CM_SDXLExtendedResolution",
    "display_name": "SDXLExtendedResolution",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/graphics",
    "output_node": false
  },
  "CM_NearestSDXLExtendedResolution": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "CM_NearestSDXLExtendedResolution",
    "display_name": "NearestSDXLExtendedResolution",
    "description": "",
    "python_module": "custom_nodes.ComfyMath",
    "category": "math/graphics",
    "output_node": false
  },
  "TimestepKeyframe": {
    "input": {
      "required": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "prev_timestep_kf": [
          "TIMESTEP_KEYFRAME"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "cn_weights": [
          "CONTROL_NET_WEIGHTS"
        ],
        "latent_keyframe": [
          "LATENT_KEYFRAME"
        ],
        "null_latent_kf_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "inherit_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "guarantee_steps": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9007199254740991
          }
        ],
        "mask_optional": [
          "MASK"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_percent"
      ],
      "optional": [
        "prev_timestep_kf",
        "strength",
        "cn_weights",
        "latent_keyframe",
        "null_latent_kf_strength",
        "inherit_missing",
        "guarantee_steps",
        "mask_optional"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false],
    "output_name": [
      "TIMESTEP_KF"
    ],
    "name": "TimestepKeyframe",
    "display_name": "Timestep Keyframe 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    "output_node": false
  },
  "ACN_TimestepKeyframeInterpolation": {
    "input": {
      "required": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "strength_start": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "strength_end": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease-in",
            "ease-out",
            "ease-in-out"
          ]
        ],
        "intervals": [
          "INT",
          {
            "default": 50,
            "min": 2,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "prev_timestep_kf": [
          "TIMESTEP_KEYFRAME"
        ],
        "cn_weights": [
          "CONTROL_NET_WEIGHTS"
        ],
        "latent_keyframe": [
          "LATENT_KEYFRAME"
        ],
        "null_latent_kf_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "inherit_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "mask_optional": [
          "MASK"
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_percent",
        "end_percent",
        "strength_start",
        "strength_end",
        "interpolation",
        "intervals"
      ],
      "optional": [
        "prev_timestep_kf",
        "cn_weights",
        "latent_keyframe",
        "null_latent_kf_strength",
        "inherit_missing",
        "mask_optional",
        "print_keyframes"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false],
    "output_name": [
      "TIMESTEP_KF"
    ],
    "name": "ACN_TimestepKeyframeInterpolation",
    "display_name": "Timestep Keyframe Interp. 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    "output_node": false
  },
  "ACN_TimestepKeyframeFromStrengthList": {
    "input": {
      "required": {
        "float_strengths": [
          "FLOAT",
          {
            "default": -1,
            "min": -1,
            "step": 0.001,
            "forceInput": true
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "prev_timestep_kf": [
          "TIMESTEP_KEYFRAME"
        ],
        "cn_weights": [
          "CONTROL_NET_WEIGHTS"
        ],
        "latent_keyframe": [
          "LATENT_KEYFRAME"
        ],
        "null_latent_kf_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "inherit_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "mask_optional": [
          "MASK"
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float_strengths",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "prev_timestep_kf",
        "cn_weights",
        "latent_keyframe",
        "null_latent_kf_strength",
        "inherit_missing",
        "mask_optional",
        "print_keyframes"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false],
    "output_name": [
      "TIMESTEP_KF"
    ],
    "name": "ACN_TimestepKeyframeFromStrengthList",
    "display_name": "Timestep Keyframe From List 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    "output_node": false
  },
  "LatentKeyframe": {
    "input": {
      "required": {
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": -9007199254740991,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "prev_latent_kf": [
          "LATENT_KEYFRAME"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_index",
        "strength"
      ],
      "optional": [
        "prev_latent_kf"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "LATENT_KEYFRAME"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT_KF"
    ],
    "name": "LatentKeyframe",
    "display_name": "Latent Keyframe 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    "output_node": false
  },
  "LatentKeyframeTiming": {
    "input": {
      "required": {
        "batch_index_from": [
          "INT",
          {
            "default": 0,
            "min": -9007199254740991,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "batch_index_to_excl": [
          "INT",
          {
            "default": 0,
            "min": -9007199254740991,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "strength_from": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "strength_to": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease-in",
            "ease-out",
            "ease-in-out"
          ]
        ]
      },
      "optional": {
        "prev_latent_kf": [
          "LATENT_KEYFRAME"
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_index_from",
        "batch_index_to_excl",
        "strength_from",
        "strength_to",
        "interpolation"
      ],
      "optional": [
        "prev_latent_kf",
        "print_keyframes"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "LATENT_KEYFRAME"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT_KF"
    ],
    "name": "LatentKeyframeTiming",
    "display_name": "Latent Keyframe Interp. 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    "output_node": false
  },
  "LatentKeyframeBatchedGroup": {
    "input": {
      "required": {
        "float_strengths": [
          "FLOAT",
          {
            "default": -1,
            "min": -1,
            "step": 0.001,
            "forceInput": true
          }
        ]
      },
      "optional": {
        "prev_latent_kf": [
          "LATENT_KEYFRAME"
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float_strengths"
      ],
      "optional": [
        "prev_latent_kf",
        "print_keyframes"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "LATENT_KEYFRAME"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT_KF"
    ],
    "name": "LatentKeyframeBatchedGroup",
    "display_name": "Latent Keyframe From List 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    "output_node": false
  },
  "LatentKeyframeGroup": {
    "input": {
      "required": {
        "index_strengths": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "prev_latent_kf": [
          "LATENT_KEYFRAME"
        ],
        "latent_optional": [
          "LATENT"
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index_strengths"
      ],
      "optional": [
        "prev_latent_kf",
        "latent_optional",
        "print_keyframes"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "LATENT_KEYFRAME"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT_KF"
    ],
    "name": "LatentKeyframeGroup",
    "display_name": "Latent Keyframe Group 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/keyframes",
    "output_node": false
  },
  "ACN_AdvancedControlNetApply_v2": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask_optional": [
          "MASK"
        ],
        "timestep_kf": [
          "TIMESTEP_KEYFRAME"
        ],
        "latent_kf_override": [
          "LATENT_KEYFRAME"
        ],
        "weights_override": [
          "CONTROL_NET_WEIGHTS"
        ],
        "vae_optional": [
          "VAE"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "mask_optional",
        "timestep_kf",
        "latent_kf_override",
        "weights_override",
        "vae_optional"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ACN_AdvancedControlNetApply_v2",
    "display_name": "Apply Advanced ControlNet 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝",
    "output_node": false
  },
  "ACN_AdvancedControlNetApplySingle_v2": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask_optional": [
          "MASK"
        ],
        "timestep_kf": [
          "TIMESTEP_KEYFRAME"
        ],
        "latent_kf_override": [
          "LATENT_KEYFRAME"
        ],
        "weights_override": [
          "CONTROL_NET_WEIGHTS"
        ],
        "vae_optional": [
          "VAE"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "mask_optional",
        "timestep_kf",
        "latent_kf_override",
        "weights_override",
        "vae_optional"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CONDITIONING",
      "model_opt"
    ],
    "name": "ACN_AdvancedControlNetApplySingle_v2",
    "display_name": "Apply Advanced ControlNet(1) 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝",
    "output_node": false
  },
  "ACN_ControlNetLoaderAdvanced": {
    "input": {
      "required": {
        "cnet": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      },
      "optional": {
        "_tk_opt": [
          "TIMESTEP_KEYFRAME"
        ]
      }
    },
    "input_order": {
      "required": [
        "cnet"
      ],
      "optional": [
        "_tk_opt"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ACN_ControlNetLoaderAdvanced",
    "display_name": "Load Advanced ControlNet Model 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝",
    "output_node": false
  },
  "ACN_DiffControlNetLoaderAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cnet": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      },
      "optional": {
        "_tk_opt": [
          "TIMESTEP_KEYFRAME"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cnet"
      ],
      "optional": [
        "_tk_opt"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ACN_DiffControlNetLoaderAdvanced",
    "display_name": "Load Advanced ControlNet Model (diff) 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝",
    "output_node": false
  },
  "ACN_ScaledSoftControlNetWeights": {
    "input": {
      "required": {
        "base_multiplier": [
          "FLOAT",
          {
            "default": 0.825,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base_multiplier"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ACN_ScaledSoftControlNetWeights",
    "display_name": "Scaled Soft Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights",
    "output_node": false
  },
  "ScaledSoftMaskedUniversalWeights": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "min_base_multiplier": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "max_base_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "min_base_multiplier",
        "max_base_multiplier"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ScaledSoftMaskedUniversalWeights",
    "display_name": "Scaled Soft Masked Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights",
    "output_node": false
  },
  "ACN_SoftControlNetWeightsSD15": {
    "input": {
      "required": {
        "output_0": [
          "FLOAT",
          {
            "default": 0.0994139620633712,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_1": [
          "FLOAT",
          {
            "default": 0.120501772198026,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_2": [
          "FLOAT",
          {
            "default": 0.146062754179425,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_3": [
          "FLOAT",
          {
            "default": 0.177045762641727,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_4": [
          "FLOAT",
          {
            "default": 0.214600924414215,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_5": [
          "FLOAT",
          {
            "default": 0.260122332623291,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_6": [
          "FLOAT",
          {
            "default": 0.315299797119141,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_7": [
          "FLOAT",
          {
            "default": 0.382181572265625,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_8": [
          "FLOAT",
          {
            "default": 0.463250390625,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_9": [
          "FLOAT",
          {
            "default": 0.561515625,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_10": [
          "FLOAT",
          {
            "default": 0.680625,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_11": [
          "FLOAT",
          {
            "default": 0.825,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "middle_0": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "output_0",
        "output_1",
        "output_2",
        "output_3",
        "output_4",
        "output_5",
        "output_6",
        "output_7",
        "output_8",
        "output_9",
        "output_10",
        "output_11",
        "middle_0"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ACN_SoftControlNetWeightsSD15",
    "display_name": "ControlNet Soft Weights [SD1.5] 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights/ControlNet",
    "output_node": false
  },
  "ACN_CustomControlNetWeightsSD15": {
    "input": {
      "required": {
        "output_0": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_3": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_4": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_5": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_6": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_7": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_8": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_9": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_10": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "output_11": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "middle_0": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "output_0",
        "output_1",
        "output_2",
        "output_3",
        "output_4",
        "output_5",
        "output_6",
        "output_7",
        "output_8",
        "output_9",
        "output_10",
        "output_11",
        "middle_0"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ACN_CustomControlNetWeightsSD15",
    "display_name": "ControlNet Custom Weights [SD1.5] 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights/ControlNet",
    "output_node": false
  },
  "ACN_CustomControlNetWeightsFlux": {
    "input": {
      "required": {
        "input_0": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_3": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_4": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_5": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_6": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_7": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_8": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_9": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_10": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_11": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_12": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_13": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_14": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_15": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_16": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_17": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_18": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_0",
        "input_1",
        "input_2",
        "input_3",
        "input_4",
        "input_5",
        "input_6",
        "input_7",
        "input_8",
        "input_9",
        "input_10",
        "input_11",
        "input_12",
        "input_13",
        "input_14",
        "input_15",
        "input_16",
        "input_17",
        "input_18"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ACN_CustomControlNetWeightsFlux",
    "display_name": "ControlNet Custom Weights [Flux] 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights/ControlNet",
    "output_node": false
  },
  "ACN_SoftT2IAdapterWeights": {
    "input": {
      "required": {
        "input_0": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_1": [
          "FLOAT",
          {
            "default": 0.62,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_2": [
          "FLOAT",
          {
            "default": 0.825,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_3": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_0",
        "input_1",
        "input_2",
        "input_3"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ACN_SoftT2IAdapterWeights",
    "display_name": "T2IAdapter Soft Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights/T2IAdapter",
    "output_node": false
  },
  "ACN_CustomT2IAdapterWeights": {
    "input": {
      "required": {
        "input_0": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "input_3": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_0",
        "input_1",
        "input_2",
        "input_3"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ACN_CustomT2IAdapterWeights",
    "display_name": "T2IAdapter Custom Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights/T2IAdapter",
    "output_node": false
  },
  "ACN_DefaultUniversalWeights": {
    "input": {
      "optional": {
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ACN_DefaultUniversalWeights",
    "display_name": "Default Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights",
    "output_node": false
  },
  "ACN_ExtrasMiddleMult": {
    "input": {
      "required": {
        "middle_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "middle_mult"
      ],
      "optional": [
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CN_WEIGHTS_EXTRAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "cn_extras"
    ],
    "name": "ACN_ExtrasMiddleMult",
    "display_name": "Middle Weight Extras 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/weights/extras",
    "output_node": false
  },
  "ACN_SparseCtrlRGBPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "latent_size": [
          "LATENT"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae",
        "latent_size"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "proc_IMAGE"
    ],
    "name": "ACN_SparseCtrlRGBPreprocessor",
    "display_name": "RGB SparseCtrl 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/preprocess",
    "output_node": false
  },
  "ACN_SparseCtrlLoaderAdvanced": {
    "input": {
      "required": {
        "sparsectrl_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ],
        "use_motion": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "motion_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "motion_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "sparse_method": [
          "SPARSE_METHOD"
        ],
        "tk_optional": [
          "TIMESTEP_KEYFRAME"
        ],
        "context_aware": [
          [
            "nearest_hint",
            "off"
          ]
        ],
        "sparse_hint_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "sparse_nonhint_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "sparse_mask_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sparsectrl_name",
        "use_motion",
        "motion_strength",
        "motion_scale"
      ],
      "optional": [
        "sparse_method",
        "tk_optional",
        "context_aware",
        "sparse_hint_mult",
        "sparse_nonhint_mult",
        "sparse_mask_mult"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ACN_SparseCtrlLoaderAdvanced",
    "display_name": "Load SparseCtrl Model 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl",
    "output_node": false
  },
  "ACN_SparseCtrlMergedLoaderAdvanced": {
    "input": {
      "required": {
        "sparsectrl_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ],
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ],
        "use_motion": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "motion_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "motion_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "sparse_method": [
          "SPARSE_METHOD"
        ],
        "tk_optional": [
          "TIMESTEP_KEYFRAME"
        ]
      }
    },
    "input_order": {
      "required": [
        "sparsectrl_name",
        "control_net_name",
        "use_motion",
        "motion_strength",
        "motion_scale"
      ],
      "optional": [
        "sparse_method",
        "tk_optional"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ACN_SparseCtrlMergedLoaderAdvanced",
    "display_name": "🧪Load Merged SparseCtrl Model 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/experimental",
    "output_node": false
  },
  "ACN_SparseCtrlIndexMethodNode": {
    "input": {
      "required": {
        "indexes": [
          "STRING",
          {
            "default": "0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "indexes"
      ]
    },
    "output": [
      "SPARSE_METHOD"
    ],
    "output_is_list": [false],
    "output_name": [
      "SPARSE_METHOD"
    ],
    "name": "ACN_SparseCtrlIndexMethodNode",
    "display_name": "SparseCtrl Index Method 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl",
    "output_node": false
  },
  "ACN_SparseCtrlSpreadMethodNode": {
    "input": {
      "required": {
        "spread": [
          [
            "uniform",
            "starting",
            "ending",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "spread"
      ]
    },
    "output": [
      "SPARSE_METHOD"
    ],
    "output_is_list": [false],
    "output_name": [
      "SPARSE_METHOD"
    ],
    "name": "ACN_SparseCtrlSpreadMethodNode",
    "display_name": "SparseCtrl Spread Method 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl",
    "output_node": false
  },
  "ACN_SparseCtrlWeightExtras": {
    "input": {
      "optional": {
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ],
        "sparse_hint_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "sparse_nonhint_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "sparse_mask_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "cn_extras",
        "sparse_hint_mult",
        "sparse_nonhint_mult",
        "sparse_mask_mult"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CN_WEIGHTS_EXTRAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "cn_extras"
    ],
    "name": "ACN_SparseCtrlWeightExtras",
    "display_name": "SparseCtrl Weight Extras 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/extras",
    "output_node": false
  },
  "ACN_ControlNet++LoaderSingle": {
    "input": {
      "required": {
        "name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ],
        "control_type": [
          [
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "inpaint/outpaint",
            "none"
          ],
          {
            "default": "none"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "name",
        "control_type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ACN_ControlNet++LoaderSingle",
    "display_name": "Load ControlNet++ Model (Single) 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/ControlNet++",
    "output_node": false
  },
  "ACN_ControlNet++LoaderAdvanced": {
    "input": {
      "required": {
        "plus_input": [
          "PLUS_INPUT"
        ],
        "name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "plus_input",
        "name"
      ]
    },
    "output": [
      "CONTROL_NET",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CONTROL_NET",
      "IMAGE"
    ],
    "name": "ACN_ControlNet++LoaderAdvanced",
    "display_name": "Load ControlNet++ Model (Multi) 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/ControlNet++",
    "output_node": false
  },
  "ACN_ControlNet++InputNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "control_type": [
          [
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "inpaint/outpaint"
          ]
        ]
      },
      "optional": {
        "prev_plus_input": [
          "PLUS_INPUT"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "control_type"
      ],
      "optional": [
        "prev_plus_input"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "PLUS_INPUT"
    ],
    "output_is_list": [false],
    "output_name": [
      "PLUS_INPUT"
    ],
    "name": "ACN_ControlNet++InputNode",
    "display_name": "ControlNet++ Input 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/ControlNet++",
    "output_node": false
  },
  "ACN_CtrLoRALoader": {
    "input": {
      "required": {
        "base": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ],
        "lora": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "base",
        "lora"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ACN_CtrLoRALoader",
    "display_name": "Load CtrLoRA Model 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/CtrLoRA",
    "output_node": false
  },
  "ACN_ReferencePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "latent_size": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae",
        "latent_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "proc_IMAGE"
    ],
    "name": "ACN_ReferencePreprocessor",
    "display_name": "Reference Preproccessor 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/Reference/preprocess",
    "output_node": false
  },
  "ACN_ReferenceControlNet": {
    "input": {
      "required": {
        "reference_type": [
          [
            "reference_attn",
            "reference_adain",
            "reference_attn+adain"
          ]
        ],
        "style_fidelity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "ref_weight": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reference_type",
        "style_fidelity",
        "ref_weight"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ACN_ReferenceControlNet",
    "display_name": "Reference ControlNet 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/Reference",
    "output_node": false
  },
  "ACN_ReferenceControlNetFinetune": {
    "input": {
      "required": {
        "attn_style_fidelity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "attn_ref_weight": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "attn_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "adain_style_fidelity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "adain_ref_weight": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "adain_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "attn_style_fidelity",
        "attn_ref_weight",
        "attn_strength",
        "adain_style_fidelity",
        "adain_ref_weight",
        "adain_strength"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ACN_ReferenceControlNetFinetune",
    "display_name": "Reference ControlNet (Finetune) 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "Adv-ControlNet 🛂🅐🅒🅝/Reference",
    "output_node": false
  },
  "LoadImagesFromDirectory": {
    "input": {
      "required": {
        "directory": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "image_load_cap",
        "start_index"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "name": "LoadImagesFromDirectory",
    "display_name": "🚫Load Images [DEPRECATED] 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false
  },
  "ScaledSoftControlNetWeights": {
    "input": {
      "required": {
        "base_multiplier": [
          "FLOAT",
          {
            "default": 0.825,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "flip_weights": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base_multiplier",
        "flip_weights"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "ScaledSoftControlNetWeights",
    "display_name": "Scaled Soft Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false
  },
  "SoftControlNetWeights": {
    "input": {
      "required": {
        "weight_00": [
          "FLOAT",
          {
            "default": 0.0994139620633712,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_01": [
          "FLOAT",
          {
            "default": 0.120501772198026,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_02": [
          "FLOAT",
          {
            "default": 0.146062754179425,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_03": [
          "FLOAT",
          {
            "default": 0.177045762641727,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_04": [
          "FLOAT",
          {
            "default": 0.214600924414215,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_05": [
          "FLOAT",
          {
            "default": 0.260122332623291,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_06": [
          "FLOAT",
          {
            "default": 0.315299797119141,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_07": [
          "FLOAT",
          {
            "default": 0.382181572265625,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_08": [
          "FLOAT",
          {
            "default": 0.463250390625,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_09": [
          "FLOAT",
          {
            "default": 0.561515625,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_10": [
          "FLOAT",
          {
            "default": 0.680625,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_11": [
          "FLOAT",
          {
            "default": 0.825,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_12": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "flip_weights": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weight_00",
        "weight_01",
        "weight_02",
        "weight_03",
        "weight_04",
        "weight_05",
        "weight_06",
        "weight_07",
        "weight_08",
        "weight_09",
        "weight_10",
        "weight_11",
        "weight_12",
        "flip_weights"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "SoftControlNetWeights",
    "display_name": "ControlNet Soft Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false,
    "deprecated": true
  },
  "CustomControlNetWeights": {
    "input": {
      "required": {
        "weight_00": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_01": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_02": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_03": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_04": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_05": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_06": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_07": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_08": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_09": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_10": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_11": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_12": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "flip_weights": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weight_00",
        "weight_01",
        "weight_02",
        "weight_03",
        "weight_04",
        "weight_05",
        "weight_06",
        "weight_07",
        "weight_08",
        "weight_09",
        "weight_10",
        "weight_11",
        "weight_12",
        "flip_weights"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "CustomControlNetWeights",
    "display_name": "ControlNet Custom Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false,
    "deprecated": true
  },
  "SoftT2IAdapterWeights": {
    "input": {
      "required": {
        "weight_00": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_01": [
          "FLOAT",
          {
            "default": 0.62,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_02": [
          "FLOAT",
          {
            "default": 0.825,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_03": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "flip_weights": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weight_00",
        "weight_01",
        "weight_02",
        "weight_03",
        "flip_weights"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "SoftT2IAdapterWeights",
    "display_name": "T2IAdapter Soft Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false,
    "deprecated": true
  },
  "CustomT2IAdapterWeights": {
    "input": {
      "required": {
        "weight_00": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_01": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_02": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "weight_03": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "flip_weights": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weight_00",
        "weight_01",
        "weight_02",
        "weight_03",
        "flip_weights"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "CustomT2IAdapterWeights",
    "display_name": "T2IAdapter Custom Weights 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false,
    "deprecated": true
  },
  "ACN_AdvancedControlNetApply": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask_optional": [
          "MASK"
        ],
        "timestep_kf": [
          "TIMESTEP_KEYFRAME"
        ],
        "latent_kf_override": [
          "LATENT_KEYFRAME"
        ],
        "weights_override": [
          "CONTROL_NET_WEIGHTS"
        ],
        "model_optional": [
          "MODEL"
        ],
        "vae_optional": [
          "VAE"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "mask_optional",
        "timestep_kf",
        "latent_kf_override",
        "weights_override",
        "model_optional",
        "vae_optional"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "MODEL"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "model_opt"
    ],
    "name": "ACN_AdvancedControlNetApply",
    "display_name": "Apply Advanced ControlNet 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false,
    "deprecated": true
  },
  "ACN_AdvancedControlNetApplySingle": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask_optional": [
          "MASK"
        ],
        "timestep_kf": [
          "TIMESTEP_KEYFRAME"
        ],
        "latent_kf_override": [
          "LATENT_KEYFRAME"
        ],
        "weights_override": [
          "CONTROL_NET_WEIGHTS"
        ],
        "model_optional": [
          "MODEL"
        ],
        "vae_optional": [
          "VAE"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "mask_optional",
        "timestep_kf",
        "latent_kf_override",
        "weights_override",
        "model_optional",
        "vae_optional"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CONDITIONING",
      "model_opt"
    ],
    "name": "ACN_AdvancedControlNetApplySingle",
    "display_name": "Apply Advanced ControlNet(1) 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false,
    "deprecated": true
  },
  "ControlNetLoaderAdvanced": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      },
      "optional": {
        "tk_optional": [
          "TIMESTEP_KEYFRAME"
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name"
      ],
      "optional": [
        "tk_optional"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ControlNetLoaderAdvanced",
    "display_name": "Load Advanced ControlNet Model 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false,
    "deprecated": true
  },
  "DiffControlNetLoaderAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      },
      "optional": {
        "tk_optional": [
          "TIMESTEP_KEYFRAME"
        ]
      },
      "hidden": {
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "control_net_name"
      ],
      "optional": [
        "tk_optional"
      ],
      "hidden": [
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "DiffControlNetLoaderAdvanced",
    "display_name": "Load Advanced ControlNet Model (diff) 🛂🅐🅒🅝",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
    "category": "",
    "output_node": false,
    "deprecated": true
  },
  "Primitive boolean [Crystools]": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "boolean"
    ],
    "name": "Primitive boolean [Crystools]",
    "display_name": "🪛 Primitive boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Primitive",
    "output_node": false
  },
  "Primitive string [Crystools]": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "string"
    ],
    "name": "Primitive string [Crystools]",
    "display_name": "🪛 Primitive string",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Primitive",
    "output_node": false
  },
  "Primitive string multiline [Crystools]": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "string"
    ],
    "name": "Primitive string multiline [Crystools]",
    "display_name": "🪛 Primitive string multiline",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Primitive",
    "output_node": false
  },
  "Primitive integer [Crystools]": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 1,
            "min": -9.223372036854776e+18,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "int"
    ],
    "name": "Primitive integer [Crystools]",
    "display_name": "🪛 Primitive integer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Primitive",
    "output_node": false
  },
  "Primitive float [Crystools]": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "float"
    ],
    "name": "Primitive float [Crystools]",
    "display_name": "🪛 Primitive float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Primitive",
    "output_node": false
  },
  "Show any [Crystools]": {
    "input": {
      "required": {

      },
      "optional": {
        "any_value": [
          "*"
        ],
        "console": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "display": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "hidden": {

      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "any_value",
        "console",
        "display",
        "prefix"
      ],
      "hidden": []
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Show any [Crystools]",
    "display_name": "🪛 Show any value to console/display",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Debugger",
    "output_node": true
  },
  "Show any to JSON [Crystools]": {
    "input": {
      "required": {

      },
      "optional": {
        "any_value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "any_value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "string"
    ],
    "name": "Show any to JSON [Crystools]",
    "display_name": "🪛 Show any to JSON",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Debugger",
    "output_node": true
  },
  "List of any [Crystools]": {
    "input": {
      "required": {

      },
      "optional": {
        "any_1": [
          "*"
        ],
        "any_2": [
          "*"
        ],
        "any_3": [
          "*"
        ],
        "any_4": [
          "*"
        ],
        "any_5": [
          "*"
        ],
        "any_6": [
          "*"
        ],
        "any_7": [
          "*"
        ],
        "any_8": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "any_1",
        "any_2",
        "any_3",
        "any_4",
        "any_5",
        "any_6",
        "any_7",
        "any_8"
      ]
    },
    "output": [
      [
        "*"
      ]
    ],
    "output_is_list": [true],
    "output_name": [
      "any_list"
    ],
    "name": "List of any [Crystools]",
    "display_name": "🪛 List of any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/List",
    "output_node": false
  },
  "List of strings [Crystools]": {
    "input": {
      "required": {

      },
      "optional": {
        "string_1": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_2": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_3": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_4": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_5": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_6": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_7": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_8": [
          "STRING",
          {
            "default": ""
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": " "
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "string_1",
        "string_2",
        "string_3",
        "string_4",
        "string_5",
        "string_6",
        "string_7",
        "string_8",
        "delimiter"
      ]
    },
    "output": [
      "STRING",
      "ListString"
    ],
    "output_is_list": [false, true],
    "output_name": [
      "concatenated",
      "list_string"
    ],
    "name": "List of strings [Crystools]",
    "display_name": "🪛 List of strings",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/List",
    "output_node": false
  },
  "Switch from any [Crystools]": {
    "input": {
      "required": {
        "any": [
          "*"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "boolean"
      ]
    },
    "output": [
      "*",
      "*"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "on_true",
      "on_false"
    ],
    "name": "Switch from any [Crystools]",
    "display_name": "🪛 Switch from any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Switch",
    "output_node": false
  },
  "Switch any [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "*",
          {
            "lazy": true
          }
        ],
        "on_false": [
          "*",
          {
            "lazy": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "Switch any [Crystools]",
    "display_name": "🪛 Switch any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Switch",
    "output_node": false
  },
  "Switch latent [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "LATENT",
          {
            "lazy": true
          }
        ],
        "on_false": [
          "LATENT",
          {
            "lazy": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "latent"
    ],
    "name": "Switch latent [Crystools]",
    "display_name": "🪛 Switch latent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Switch",
    "output_node": false
  },
  "Switch conditioning [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "on_false": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "conditioning"
    ],
    "name": "Switch conditioning [Crystools]",
    "display_name": "🪛 Switch conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Switch",
    "output_node": false
  },
  "Switch image [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "on_false": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Switch image [Crystools]",
    "display_name": "🪛 Switch image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Switch",
    "output_node": false
  },
  "Switch mask [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "MASK",
          {
            "lazy": true
          }
        ],
        "on_false": [
          "MASK",
          {
            "lazy": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "mask"
    ],
    "name": "Switch mask [Crystools]",
    "display_name": "🪛 Switch mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Switch",
    "output_node": false
  },
  "Switch string [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "STRING",
          {
            "default": "",
            "lazy": true
          }
        ],
        "on_false": [
          "STRING",
          {
            "default": "",
            "lazy": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "string"
    ],
    "name": "Switch string [Crystools]",
    "display_name": "🪛 Switch string",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Switch",
    "output_node": false
  },
  "Pipe to/edit any [Crystools]": {
    "input": {
      "required": {

      },
      "optional": {
        "CPipeAny": [
          "CPipeAny"
        ],
        "any_1": [
          "*"
        ],
        "any_2": [
          "*"
        ],
        "any_3": [
          "*"
        ],
        "any_4": [
          "*"
        ],
        "any_5": [
          "*"
        ],
        "any_6": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "CPipeAny",
        "any_1",
        "any_2",
        "any_3",
        "any_4",
        "any_5",
        "any_6"
      ]
    },
    "output": [
      "CPipeAny"
    ],
    "output_is_list": [false],
    "output_name": [
      "CPipeAny"
    ],
    "name": "Pipe to/edit any [Crystools]",
    "display_name": "🪛 Pipe to/edit any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Pipe",
    "output_node": false
  },
  "Pipe from any [Crystools]": {
    "input": {
      "required": {
        "CPipeAny": [
          "CPipeAny"
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "CPipeAny"
      ],
      "optional": []
    },
    "output": [
      "CPipeAny",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [false, false, false, false, false, false, false],
    "output_name": [
      "CPipeAny",
      "any_1",
      "any_2",
      "any_3",
      "any_4",
      "any_5",
      "any_6"
    ],
    "name": "Pipe from any [Crystools]",
    "display_name": "🪛 Pipe from any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Pipe",
    "output_node": false
  },
  "Load image with metadata [Crystools]": {
    "input": {
      "required": {
        "image": [
          [
            "489997193_10232281832206775_7649528775188436456_n.jpg",
            "ComfyUI_00018_.png",
            "Screenshot 2025-07-19 110607.png",
            "example.png"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "JSON",
      "METADATA_RAW"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "prompt",
      "Metadata RAW"
    ],
    "name": "Load image with metadata [Crystools]",
    "display_name": "🪛 Load image with metadata",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Image",
    "output_node": true
  },
  "Get resolution [Crystools]": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "Get resolution [Crystools]",
    "display_name": "🪛 Get resolution",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Image",
    "output_node": true
  },
  "Preview from image [Crystools]": {
    "input": {
      "required": {

      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "METADATA_RAW"
    ],
    "output_is_list": [false],
    "output_name": [
      "Metadata RAW"
    ],
    "name": "Preview from image [Crystools]",
    "display_name": "🪛 Preview from image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Image",
    "output_node": true
  },
  "Preview from metadata [Crystools]": {
    "input": {
      "required": {

      },
      "optional": {
        "metadata_raw": [
          "METADATA_RAW",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "metadata_raw"
      ]
    },
    "output": [
      "METADATA_RAW"
    ],
    "output_is_list": [false],
    "output_name": [
      "Metadata RAW"
    ],
    "name": "Preview from metadata [Crystools]",
    "display_name": "🪛 Preview from metadata",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Image",
    "output_node": true
  },
  "Save image with extra metadata [Crystools]": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "with_workflow": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "metadata_extra": [
          "STRING",
          {
            "multiline": true,
            "default": "{\n  \"Title\": \"Image generated by Crystian\",\n  \"Description\": \"More info: https:\\/\\/www.instagram.com\\/crystian.ia\",\n  \"Author\": \"crystian.ia\",\n  \"Software\": \"ComfyUI\",\n  \"Category\": \"StableDiffusion\",\n  \"Rating\": 5,\n  \"UserComment\": \"\",\n  \"Keywords\": [\n    \"\"\n  ],\n  \"Copyrights\": \"\"\n}"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image",
        "filename_prefix",
        "with_workflow"
      ],
      "optional": [
        "metadata_extra"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "METADATA_RAW"
    ],
    "output_is_list": [false],
    "output_name": [
      "Metadata RAW"
    ],
    "name": "Save image with extra metadata [Crystools]",
    "display_name": "🪛 Save image with extra metadata",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Image",
    "output_node": true
  },
  "Metadata extractor [Crystools]": {
    "input": {
      "required": {
        "metadata_raw": [
          "METADATA_RAW",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "metadata_raw"
      ],
      "optional": []
    },
    "output": [
      "JSON",
      "JSON",
      "JSON",
      "JSON",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false, false, false, false],
    "output_name": [
      "prompt",
      "workflow",
      "file info",
      "raw to JSON",
      "raw to property",
      "raw to csv"
    ],
    "name": "Metadata extractor [Crystools]",
    "display_name": "🪛 Metadata extractor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Metadata",
    "output_node": false
  },
  "Metadata comparator [Crystools]": {
    "input": {
      "required": {
        "metadata_raw_old": [
          "METADATA_RAW",
          {
            "forceInput": true
          }
        ],
        "metadata_raw_new": [
          "METADATA_RAW",
          {
            "forceInput": true
          }
        ],
        "what": [
          [
            "Prompt",
            "Workflow",
            "Fileinfo"
          ]
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "metadata_raw_old",
        "metadata_raw_new",
        "what"
      ],
      "optional": []
    },
    "output": [
      "JSON"
    ],
    "output_is_list": [false],
    "output_name": [
      "diff"
    ],
    "name": "Metadata comparator [Crystools]",
    "display_name": "🪛 Metadata comparator",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Metadata",
    "output_node": true
  },
  "JSON comparator [Crystools]": {
    "input": {
      "required": {
        "json_old": [
          "JSON",
          {
            "forceInput": true
          }
        ],
        "json_new": [
          "JSON",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "json_old",
        "json_new"
      ],
      "optional": []
    },
    "output": [
      "JSON"
    ],
    "output_is_list": [false],
    "output_name": [
      "json_compared"
    ],
    "name": "JSON comparator [Crystools]",
    "display_name": "🪛 JSON comparator",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Utils",
    "output_node": true
  },
  "Stats system [Crystools]": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "latent"
    ],
    "name": "Stats system [Crystools]",
    "display_name": "🪛 Stats system (powered by WAS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Utils",
    "output_node": false
  },
  "Read JSON file [Crystools]": {
    "input": {
      "required": {

      },
      "optional": {
        "path_to_json": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "path_to_json"
      ]
    },
    "output": [
      "JSON"
    ],
    "output_is_list": [false],
    "output_name": [
      "json"
    ],
    "name": "Read JSON file [Crystools]",
    "display_name": "🪛 Read JSON file (BETA)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Utils",
    "output_node": false
  },
  "JSON extractor [Crystools]": {
    "input": {
      "required": {
        "json": [
          "JSON",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "key": [
          "STRING",
          {
            "default": ""
          }
        ],
        "default": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "json"
      ],
      "optional": [
        "key",
        "default"
      ]
    },
    "output": [
      "*",
      "STRING",
      "INT",
      "FLOAT",
      "BOOLEAN"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "any",
      "string",
      "int",
      "float",
      "boolean"
    ],
    "name": "JSON extractor [Crystools]",
    "display_name": "🪛 JSON extractor (BETA)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools 🪛/Utils",
    "output_node": false
  },
  "LoraLoader|pysssss": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      },
      "optional": {
        "prompt": [
          "STRING",
          {
            "hidden": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prompt"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "example"
    ],
    "name": "LoraLoader|pysssss",
    "display_name": "Lora Loader 🐍",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CheckpointLoader|pysssss": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      },
      "optional": {
        "prompt": [
          "STRING",
          {
            "hidden": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ],
      "optional": [
        "prompt"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "example"
    ],
    "name": "CheckpointLoader|pysssss",
    "display_name": "Checkpoint Loader 🐍",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "ConstrainImage|pysssss": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "max_width": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "max_height": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "crop_if_required": [
          [
            "yes",
            "no"
          ],
          {
            "default": "no"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "max_width",
        "max_height",
        "min_width",
        "min_height",
        "crop_if_required"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [true],
    "output_name": [
      "IMAGE"
    ],
    "name": "ConstrainImage|pysssss",
    "display_name": "Constrain Image 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "image",
    "output_node": false
  },
  "ConstrainImageforVideo|pysssss": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "max_width": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "max_height": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "crop_if_required": [
          [
            "yes",
            "no"
          ],
          {
            "default": "no"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "max_width",
        "max_height",
        "min_width",
        "min_height",
        "crop_if_required"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ConstrainImageforVideo|pysssss",
    "display_name": "Constrain Image for Video 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "image",
    "output_node": false
  },
  "MathExpression|pysssss": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "pysssss.autocomplete": {
              "words": [
                {
                  "text": "round",
                  "value": "round()",
                  "showValue": false,
                  "hint": "number, dp? = 0",
                  "caretOffset": -1
                },
                {
                  "text": "ceil",
                  "value": "ceil()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "floor",
                  "value": "floor()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "min",
                  "value": "min()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "max",
                  "value": "max()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "randomint",
                  "value": "randomint()",
                  "showValue": false,
                  "hint": "min, max",
                  "caretOffset": -1
                },
                {
                  "text": "randomchoice",
                  "value": "randomchoice()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "sqrt",
                  "value": "sqrt()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "int",
                  "value": "int()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "iif",
                  "value": "iif()",
                  "showValue": false,
                  "hint": "value, truepart, falsepart",
                  "caretOffset": -1
                }
              ],
              "separator": ""
            }
          }
        ]
      },
      "optional": {
        "a": [
          "*"
        ],
        "b": [
          "*"
        ],
        "c": [
          "*"
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "expression"
      ],
      "optional": [
        "a",
        "b",
        "c"
      ],
      "hidden": [
        "extra_pnginfo",
        "prompt"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "MathExpression|pysssss",
    "display_name": "Math Expression 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "PlaySound|pysssss": {
    "input": {
      "required": {
        "any": [
          "*",
          {

          }
        ],
        "mode": [
          [
            "always",
            "on empty queue"
          ],
          {

          }
        ],
        "volume": [
          "FLOAT",
          {
            "min": 0,
            "max": 1,
            "step": 0.1,
            "default": 0.5
          }
        ],
        "file": [
          "STRING",
          {
            "default": "notify.mp3"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "mode",
        "volume",
        "file"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [true],
    "output_name": [
      "*"
    ],
    "name": "PlaySound|pysssss",
    "display_name": "PlaySound 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "Repeater|pysssss": {
    "input": {
      "required": {
        "source": [
          "*",
          {

          }
        ],
        "repeats": [
          "INT",
          {
            "min": 0,
            "max": 5000,
            "default": 2
          }
        ],
        "output": [
          [
            "single",
            "multi"
          ],
          {

          }
        ],
        "node_mode": [
          [
            "reuse",
            "create"
          ],
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "repeats",
        "output",
        "node_mode"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [true],
    "output_name": [
      "*"
    ],
    "name": "Repeater|pysssss",
    "display_name": "Repeater 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": false
  },
  "ReroutePrimitive|pysssss": {
    "input": {
      "required": {
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "ReroutePrimitive|pysssss",
    "display_name": "Reroute Primitive 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "__hidden__",
    "output_node": false
  },
  "ShowText|pysssss": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [true],
    "output_name": [
      "STRING"
    ],
    "name": "ShowText|pysssss",
    "display_name": "Show Text 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "StringFunction|pysssss": {
    "input": {
      "required": {
        "action": [
          [
            "append",
            "replace"
          ],
          {

          }
        ],
        "tidy_tags": [
          [
            "yes",
            "no"
          ],
          {

          }
        ]
      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "text_b": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "text_c": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "action",
        "tidy_tags"
      ],
      "optional": [
        "text_a",
        "text_b",
        "text_c"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "StringFunction|pysssss",
    "display_name": "String Function 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "SystemNotification|pysssss": {
    "input": {
      "required": {
        "message": [
          "STRING",
          {
            "default": "Your notification has triggered."
          }
        ],
        "any": [
          "*",
          {

          }
        ],
        "mode": [
          [
            "always",
            "on empty queue"
          ],
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "message",
        "any",
        "mode"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [true],
    "output_name": [
      "*"
    ],
    "name": "SystemNotification|pysssss",
    "display_name": "SystemNotification 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "LoadText|pysssss": {
    "input": {
      "required": {
        "root_dir": [
          [
            "input",
            "output",
            "temp"
          ],
          {

          }
        ],
        "file": [
          [
            "[none]"
          ],
          {
            "pysssss.binding": [
              {
                "source": "root_dir",
                "callback": [
                  {
                    "type": "set",
                    "target": "$this.disabled",
                    "value": true
                  },
                  {
                    "type": "fetch",
                    "url": "/pysssss/text-file/{$source.value}",
                    "then": [
                      {
                        "type": "set",
                        "target": "$this.options.values",
                        "value": "$result"
                      },
                      {
                        "type": "validate-combo"
                      },
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": false
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "root_dir",
        "file"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "LoadText|pysssss",
    "display_name": "Load Text 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": false
  },
  "SaveText|pysssss": {
    "input": {
      "required": {
        "root_dir": [
          [
            "input",
            "output",
            "temp"
          ],
          {

          }
        ],
        "file": [
          "STRING",
          {
            "default": "file.txt"
          }
        ],
        "append": [
          [
            "append",
            "overwrite",
            "new only"
          ],
          {

          }
        ],
        "insert": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "new line",
            "label_off": "none",
            "pysssss.binding": [
              {
                "source": "append",
                "callback": [
                  {
                    "type": "if",
                    "condition": [
                      {
                        "left": "$source.value",
                        "op": "eq",
                        "right": "\"append\""
                      }
                    ],
                    "true": [
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": false
                      }
                    ],
                    "false": [
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": true
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "text": [
          "STRING",
          {
            "forceInput": true,
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "root_dir",
        "file",
        "append",
        "insert",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "SaveText|pysssss",
    "display_name": "Save Text 🐍",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "DetailDaemonSamplerNode": {
    "input": {
      "required": {
        "sampler": [
          "SAMPLER"
        ],
        "detail_amount": [
          "FLOAT",
          {
            "default": 0.1,
            "min": -5,
            "max": 5,
            "step": 0.01
          }
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "bias": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.05
          }
        ],
        "start_offset": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ],
        "end_offset": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ],
        "fade": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "smooth": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "cfg_scale_override": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.5,
            "round": 0.01,
            "tooltip": "If set to 0, the sampler will automatically determine the CFG scale (if possible). Set to some other value to override."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler",
        "detail_amount",
        "start",
        "end",
        "bias",
        "exponent",
        "start_offset",
        "end_offset",
        "fade",
        "smooth",
        "cfg_scale_override"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "DetailDaemonSamplerNode",
    "display_name": "Detail Daemon Sampler",
    "description": "This sampler wrapper works by adjusting the sigma passed to the model, while the rest of sampling stays the same.",
    "python_module": "custom_nodes.ComfyUI-Detail-Daemon",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "DetailDaemonGraphSigmasNode": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS",
          {
            "forceInput": true
          }
        ],
        "detail_amount": [
          "FLOAT",
          {
            "default": 0.1,
            "min": -5,
            "max": 5,
            "step": 0.01
          }
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "bias": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.05
          }
        ],
        "start_offset": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ],
        "end_offset": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ],
        "fade": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "smooth": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "detail_amount",
        "start",
        "end",
        "bias",
        "exponent",
        "start_offset",
        "end_offset",
        "fade",
        "smooth",
        "cfg_scale"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "DetailDaemonGraphSigmasNode",
    "display_name": "Detail Daemon Graph Sigmas",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Detail-Daemon",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": true
  },
  "MultiplySigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS",
          {
            "forceInput": true
          }
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.001
          }
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "factor",
        "start",
        "end"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "MultiplySigmas",
    "display_name": "Multiply Sigmas (stateless)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Detail-Daemon",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "LyingSigmaSampler": {
    "input": {
      "required": {
        "sampler": [
          "SAMPLER"
        ],
        "dishonesty_factor": [
          "FLOAT",
          {
            "default": -0.05,
            "min": -0.999,
            "step": 0.01,
            "tooltip": "Multiplier for sigmas passed to the model. -0.05 means we reduce the sigma by 5%."
          }
        ]
      },
      "optional": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler",
        "dishonesty_factor"
      ],
      "optional": [
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAMPLER"
    ],
    "name": "LyingSigmaSampler",
    "display_name": "Lying Sigma Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Detail-Daemon",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "easy showLoaderSettingsNames": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "ckpt_name",
      "vae_name",
      "lora_name"
    ],
    "name": "easy showLoaderSettingsNames",
    "display_name": "Show Loader Settings Names",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Util",
    "output_node": true
  },
  "easy sliderControl": {
    "input": {
      "required": {
        "mode": [
          [
            "ipadapter layer weights"
          ]
        ],
        "model_type": [
          [
            "sdxl",
            "sd1"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model_type"
      ],
      "hidden": [
        "prompt",
        "my_unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "layer_weights"
    ],
    "name": "easy sliderControl",
    "display_name": "Easy Slider Control",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Util",
    "output_node": false
  },
  "easy ckptNames": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "ckpt_name"
    ],
    "name": "easy ckptNames",
    "display_name": "Ckpt Names",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Util",
    "output_node": false
  },
  "easy controlnetNames": {
    "input": {
      "required": {
        "controlnet_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "controlnet_name"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "controlnet_name"
    ],
    "name": "easy controlnetNames",
    "display_name": "ControlNet Names",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Util",
    "output_node": false
  },
  "easy loraNames": {
    "input": {
      "required": {
        "lora_name": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "lora_name"
    ],
    "name": "easy loraNames",
    "display_name": "Lora Names",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Util",
    "output_node": false
  },
  "easy seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "seed"
    ],
    "name": "easy seed",
    "display_name": "EasySeed",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Seed",
    "output_node": false
  },
  "easy seedList": {
    "input": {
      "required": {
        "min_num": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "max_num": [
          "INT",
          {
            "default": 1125899906842624,
            "min": 0
          }
        ],
        "method": [
          [
            "random",
            "increment",
            "decrement"
          ],
          {
            "default": "random"
          }
        ],
        "total": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100000
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "min_num",
        "max_num",
        "method",
        "total",
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "seed",
      "total"
    ],
    "name": "easy seedList",
    "display_name": "EasySeedList",
    "description": "Random number seed that can be used in a for loop, by connecting index and easy indexAny node to realize different seed values in the loop.",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Seed",
    "output_node": false
  },
  "easy globalSeed": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "control_before_generate",
            "label_off": "control_after_generate"
          }
        ],
        "action": [
          [
            "fixed",
            "increment",
            "decrement",
            "randomize",
            "increment for each node",
            "decrement for each node",
            "randomize for each node"
          ]
        ],
        "last_seed": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "mode",
        "action",
        "last_seed"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy globalSeed",
    "display_name": "EasyGlobalSeed",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Seed",
    "output_node": true
  },
  "easy positive": {
    "input": {
      "required": {
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Positive"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "positive"
    ],
    "name": "easy positive",
    "display_name": "Positive",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy negative": {
    "input": {
      "required": {
        "negative": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Negative"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "negative"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "negative"
    ],
    "name": "easy negative",
    "display_name": "Negative",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy wildcards": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "(Support wildcard)"
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text",
            "__example__"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "multiline_mode": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "text",
        "Select to add LoRA",
        "Select to add Wildcard",
        "seed",
        "multiline_mode"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [true, true],
    "output_name": [
      "text",
      "populated_text"
    ],
    "name": "easy wildcards",
    "display_name": "Wildcards",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy wildcardsMatrix": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "(Support Lora Block Weight and wildcard)"
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text",
            "__example__"
          ]
        ],
        "offset": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1,
            "control_after_generate": true
          }
        ]
      },
      "optional": {
        "output_limit": [
          "INT",
          {
            "default": 1,
            "min": -1,
            "step": 1,
            "tooltip": "Output All Probilities"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "text",
        "Select to add LoRA",
        "Select to add Wildcard",
        "offset"
      ],
      "optional": [
        "output_limit"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING",
      "INT",
      "INT"
    ],
    "output_is_list": [true, false, true],
    "output_name": [
      "populated_text",
      "total",
      "factors"
    ],
    "name": "easy wildcardsMatrix",
    "display_name": "Wildcards Matrix",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy prompt": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Prompt"
          }
        ],
        "prefix": [
          [
            "Select the prefix add to the text",
            "Detailed photo of",
            "Amateur photo of",
            "Flicker 2008 photo of",
            "Fantastic artwork of",
            "Vintage photograph of",
            "Unreal 5 render of",
            "Surrealist painting of",
            "Professional advertising design of"
          ],
          {
            "default": "Select the prefix add to the text"
          }
        ],
        "subject": [
          [
            "👤Select the subject add to the text",
            "a man",
            "a woman",
            "a young man",
            "a young woman",
            "a handsome man",
            "a beautiful woman",
            "a monster",
            "a toy",
            "a product",
            "a buddha",
            "a dog",
            "a cat"
          ],
          {
            "default": "👤Select the subject add to the text"
          }
        ],
        "action": [
          [
            "🎬Select the action add to the text",
            "looking at viewer",
            "looking away",
            "looking up",
            "looking down",
            "looking back",
            "open mouth",
            "half-closed mouth",
            "closed mouth",
            "open eyes",
            "half-closed eyes",
            "closed eyes",
            "wink",
            "standing",
            "sitting",
            "lying",
            "walking",
            "running",
            "adjusting hair",
            "waving",
            "hand on hip",
            "crossed arms",
            "smile",
            "sad",
            "angry",
            "sleepy",
            "tired",
            "expressionless"
          ],
          {
            "default": "🎬Select the action add to the text"
          }
        ],
        "clothes": [
          [
            "👚Select the clothes add to the text",
            "underwear",
            "clothed",
            "casual",
            "dress",
            "swimsuit",
            "uniform",
            "bikini",
            "one-piece swimsuit",
            "shirt",
            "blouse",
            "sweater",
            "hoodie",
            "jeans",
            "pants",
            "shorts",
            "skirt",
            "vest",
            "coat",
            "trenchoat",
            "jacket",
            "short dress",
            "long dress",
            "off-shoulder",
            "backless",
            "hairbow",
            "hair ribbon",
            "hair tie",
            "hairband",
            "cap",
            "beanie",
            "bucket hat",
            "sun hat",
            "straw hat",
            "rice hat",
            "witch hat",
            "crown",
            "chain necklace",
            "tooth necklace",
            "choker",
            "pendant",
            "bracelet",
            "watch",
            "ring",
            "earring",
            "anklet",
            "belt",
            "scarf",
            "gloves",
            "mittens",
            "socks",
            "stockings",
            "tights",
            "leggings",
            "boots",
            "sneakers",
            "heels",
            "sandals",
            "flip-flops",
            "slippers",
            "loafers",
            "mules",
            "oxfords",
            "brogues",
            "derbies",
            "monk shoes",
            "chelsea boots",
            "combat boots",
            "riding boots",
            "rain boots",
            "wedge heels",
            "platform heels",
            "stilettos",
            "block heels",
            "kitten heels",
            "moccasins",
            "espadrilles",
            "pumps",
            "flats",
            "ballet flats",
            "mary janes",
            "slingbacks",
            "peep-toe",
            "mule sandals",
            "gladiator sandals",
            "thong sandals",
            "slide sandals",
            "espadrille sandals",
            "wedge sandals",
            "platform sandals",
            "ankle boots",
            "knee-high boots",
            "over-the-knee boots",
            "thigh-high boots",
            "wellington boots",
            "chukka boots",
            "desert boots",
            "chelsea boots",
            "hiking boots",
            "work boots",
            "snow boots",
            "rain boots",
            "riding boots",
            "cowboy boots",
            "combat boots",
            "biker boots",
            "duck boots",
            "military boots",
            "western boots",
            "ankle strap heels",
            "block heels",
            "chunky heels",
            "cone heels",
            "kitten heels",
            "platform heels",
            "pumps",
            "slingback heels",
            "stiletto heels",
            "wedge heels",
            "mules",
            "slingbacks",
            "slides",
            "thong sandals",
            "gladiator sandals",
            "espadrilles",
            "wedge sandals",
            "platform sandals",
            "ankle boots",
            "knee-high boots",
            "over-the-knee boots",
            "thigh-high boots",
            "wellington boots",
            "chukka boots",
            "desert boots",
            "chelsea boots",
            "hiking boots",
            "work boots",
            "snow boots",
            "rain boots",
            "riding boots",
            "cowboy boots",
            "combat boots",
            "biker boots",
            "duck boots",
            "military boots",
            "western boots",
            "ankle strap heels",
            "block heels"
          ],
          {
            "default": "👚Select the clothes add to the text"
          }
        ],
        "environment": [
          [
            "☀️Select the illumination environment add to the text",
            "sunshine from window",
            "neon night, city",
            "sunset over sea",
            "golden time",
            "sci-fi RGB glowing, cyberpunk",
            "natural lighting",
            "warm atmosphere, at home, bedroom",
            "magic lit",
            "evil, gothic, in a cave",
            "light and shadow",
            "shadow from window",
            "soft studio lighting",
            "home atmosphere, cozy bedroom illumination",
            "neon, Wong Kar-wai, warm",
            "moonlight through curtains",
            "stormy sky lighting",
            "underwater glow, deep sea",
            "foggy forest at dawn",
            "golden hour in a meadow",
            "rainbow reflections, neon",
            "cozy candlelight",
            "apocalyptic, smoky atmosphere",
            "red glow, emergency lights",
            "mystical glow, enchanted forest",
            "campfire light",
            "harsh, industrial lighting",
            "sunrise in the mountains",
            "evening glow in the desert",
            "moonlight in a dark alley",
            "golden glow at a fairground",
            "midnight in the forest",
            "purple and pink hues at twilight",
            "foggy morning, muted light",
            "candle-lit room, rustic vibe",
            "fluorescent office lighting",
            "lightning flash in storm",
            "night, cozy warm light from fireplace",
            "ethereal glow, magical forest",
            "dusky evening on a beach",
            "afternoon light filtering through trees",
            "blue neon light, urban street",
            "red and blue police lights in rain",
            "aurora borealis glow, arctic landscape",
            "sunrise through foggy mountains",
            "golden hour on a city skyline",
            "mysterious twilight, heavy mist",
            "early morning rays, forest clearing",
            "colorful lantern light at festival",
            "soft glow through stained glass",
            "harsh spotlight in dark room",
            "mellow evening glow on a lake",
            "crystal reflections in a cave",
            "vibrant autumn lighting in a forest",
            "gentle snowfall at dusk",
            "hazy light of a winter morning",
            "soft, diffused foggy glow",
            "underwater luminescence",
            "rain-soaked reflections in city lights",
            "golden sunlight streaming through trees",
            "fireflies lighting up a summer night",
            "glowing embers from a forge",
            "dim candlelight in a gothic castle",
            "midnight sky with bright starlight",
            "warm sunset in a rural village",
            "flickering light in a haunted house",
            "desert sunset with mirage-like glow",
            "golden beams piercing through storm clouds"
          ],
          {
            "default": "☀️Select the illumination environment add to the text"
          }
        ],
        "background": [
          [
            "🎞️Select the background add to the text",
            "cars and people",
            "a cozy bed and a lamp",
            "a forest clearing with mist",
            "a bustling marketplace",
            "a quiet beach at dusk",
            "an old, cobblestone street",
            "a futuristic cityscape",
            "a tranquil lake with mountains",
            "a mysterious cave entrance",
            "bookshelves and plants in the background",
            "an ancient temple in ruins",
            "tall skyscrapers and neon signs",
            "a starry sky over a desert",
            "a bustling café",
            "rolling hills and farmland",
            "a modern living room with a fireplace",
            "an abandoned warehouse",
            "a picturesque mountain range",
            "a starry night sky",
            "the interior of a futuristic spaceship",
            "the cluttered workshop of an inventor",
            "the glowing embers of a bonfire",
            "a misty lake surrounded by trees",
            "an ornate palace hall",
            "a busy street market",
            "a vast desert landscape",
            "a peaceful library corner",
            "bustling train station",
            "a mystical, enchanted forest",
            "an underwater reef with colorful fish",
            "a quiet rural village",
            "a sandy beach with palm trees",
            "a vibrant coral reef, teeming with life",
            "snow-capped mountains in distance",
            "a stormy ocean, waves crashing",
            "a rustic barn in open fields",
            "a futuristic lab with glowing screens",
            "a dark, abandoned castle",
            "the ruins of an ancient civilization",
            "a bustling urban street in rain",
            "an elegant grand ballroom",
            "a sprawling field of wildflowers",
            "a dense jungle with sunlight filtering through",
            "a dimly lit, vintage bar",
            "an ice cave with sparkling crystals",
            "a serene riverbank at sunset",
            "a narrow alley with graffiti walls",
            "a peaceful zen garden with koi pond",
            "a high-tech control room",
            "a quiet mountain village at dawn",
            "a lighthouse on a rocky coast",
            "a rainy street with flickering lights",
            "a frozen lake with ice formations",
            "an abandoned theme park",
            "a small fishing village on a pier",
            "rolling sand dunes in a desert",
            "a dense forest with towering redwoods",
            "a snowy cabin in the mountains",
            "a mystical cave with bioluminescent plants",
            "a castle courtyard under moonlight",
            "a bustling open-air night market",
            "an old train station with steam",
            "a tranquil waterfall surrounded by trees",
            "a vineyard in the countryside",
            "a quaint medieval village",
            "a bustling harbor with boats",
            "a high-tech futuristic mall",
            "a lush tropical rainforest"
          ],
          {
            "default": "🎞️Select the background add to the text"
          }
        ],
        "nsfw": [
          [
            "🔞Select the nsfw add to the text",
            "nude",
            "breast",
            "small breast",
            "middle breast",
            "large breast",
            "nipples",
            "clothes lift",
            "pussy juice trail",
            "pussy juice puddle",
            "small testicles",
            "medium testicles",
            "large testicles",
            "disembodied penis",
            "cum on body",
            "cum inside",
            "cum outside",
            "fingering",
            "handjob",
            "fellatio",
            "licking penis",
            "paizuri",
            "doggystyle",
            "cowgirl",
            "reversed cowgirl",
            "piledriver",
            "suspended congress",
            "full nelson"
          ],
          {
            "default": "🔞️Select the nsfw add to the text"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "text",
        "prefix",
        "subject",
        "action",
        "clothes",
        "environment",
        "background",
        "nsfw"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "prompt"
    ],
    "name": "easy prompt",
    "display_name": "Prompt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptList": {
    "input": {
      "required": {
        "prompt_1": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_2": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_3": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_4": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_5": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "optional_prompt_list": [
          "LIST"
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_1",
        "prompt_2",
        "prompt_3",
        "prompt_4",
        "prompt_5"
      ],
      "optional": [
        "optional_prompt_list"
      ]
    },
    "output": [
      "LIST",
      "STRING"
    ],
    "output_is_list": [false, true],
    "output_name": [
      "prompt_list",
      "prompt_strings"
    ],
    "name": "easy promptList",
    "display_name": "PromptList",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptLine": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_rows": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 9999
          }
        ]
      },
      "hidden": {
        "workflow_prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "start_index",
        "max_rows"
      ],
      "hidden": [
        "workflow_prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING",
      "*"
    ],
    "output_is_list": [true, true],
    "output_name": [
      "STRING",
      "COMBO"
    ],
    "name": "easy promptLine",
    "display_name": "PromptLine",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptAwait": {
    "input": {
      "required": {
        "now": [
          "*"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "placeholder": "Enter a prompt or use voice to enter to text"
          }
        ],
        "toolbar": [
          "EASY_PROMPT_AWAIT_BAR"
        ]
      },
      "optional": {
        "prev": [
          "*"
        ]
      },
      "hidden": {
        "workflow_prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "now",
        "prompt",
        "toolbar"
      ],
      "optional": [
        "prev"
      ],
      "hidden": [
        "workflow_prompt",
        "my_unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "STRING",
      "BOOLEAN",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "output",
      "prompt",
      "continue",
      "seed"
    ],
    "name": "easy promptAwait",
    "display_name": "PromptAwait",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptConcat": {
    "input": {
      "required": {

      },
      "optional": {
        "prompt1": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "prompt2": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "prompt1",
        "prompt2",
        "separator"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "prompt"
    ],
    "name": "easy promptConcat",
    "display_name": "PromptConcat",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptReplace": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ]
      },
      "optional": {
        "find1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "find2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "find3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "find1",
        "replace1",
        "find2",
        "replace2",
        "find3",
        "replace3"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "prompt"
    ],
    "name": "easy promptReplace",
    "display_name": "PromptReplace",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy stylesSelector": {
    "input": {
      "required": {
        "styles": [
          [
            "fooocus_styles"
          ],
          {
            "default": "fooocus_styles"
          }
        ]
      },
      "optional": {
        "positive": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "negative": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "select_styles": [
          "EASY_PROMPT_STYLES",
          {

          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "styles"
      ],
      "optional": [
        "positive",
        "negative",
        "select_styles"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "easy stylesSelector",
    "display_name": "Styles Selector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy portraitMaster": {
    "input": {
      "required": {
        "shot": [
          [
            "-",
            "Head portrait",
            "Head and shoulders portrait",
            "Half-length portrait",
            "Full-length portrait",
            "Face",
            "Portrait",
            "Full body",
            "Close-up"
          ],
          {
            "key": "shot_list"
          }
        ],
        "shot_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "gender": [
          [
            "-",
            "Man",
            "Woman"
          ],
          {
            "default": "Woman",
            "key": "gender_list"
          }
        ],
        "age": [
          "INT",
          {
            "default": 30,
            "min": 18,
            "max": 90,
            "step": 1,
            "display": "slider"
          }
        ],
        "nationality_1": [
          [
            "-",
            "Afghan",
            "Albanian",
            "Algerian",
            "Andorran",
            "Angolan",
            "Antiguans Barbudans",
            "Argentine",
            "Armenian",
            "Australian",
            "Austrian",
            "Azerbaijani",
            "Bahamian",
            "Bahraini",
            "Bangladeshi",
            "Barbadian",
            "Belarusian",
            "Belgian",
            "Belizean",
            "Beninese",
            "Bhutanese",
            "Bolivian",
            "Bosnian Herzegovinian",
            "Brazilian",
            "British",
            "Bruneian",
            "Bulgarian",
            "Burkinabe",
            "Burundian",
            "Cambodian",
            "Cameroonian",
            "Canadian",
            "Cape Verdian",
            "Central African",
            "Chadian",
            "Chilean",
            "Chinese",
            "Colombian",
            "Comoran",
            "Congolese",
            "Costa Rican",
            "Croatian",
            "Cuban",
            "Cypriot",
            "Czech",
            "Danish",
            "Djibouti",
            "Dominican",
            "Dutch",
            "East Timorese",
            "Ecuadorean",
            "Egyptian",
            "Emirian",
            "Equatorial Guinean",
            "Eritrean",
            "Estonian",
            "Ethiopian",
            "Fijian",
            "Filipino",
            "Finnish",
            "French",
            "Gabonese",
            "Gambian",
            "Georgian",
            "German",
            "Ghanaian",
            "Greek",
            "Grenadian",
            "Guatemalan",
            "Guinean",
            "Guyanese",
            "Haitian",
            "Herzegovinian",
            "Honduran",
            "Hungarian",
            "Icelander",
            "Indian",
            "Indonesian",
            "Iranian",
            "Iraqi",
            "Irish",
            "Israeli",
            "Italian",
            "Ivorian",
            "Jamaican",
            "Japanese",
            "Jordanian",
            "Kazakhstani",
            "Kenyan",
            "Kiribati",
            "North Korean",
            "South Korean",
            "Kuwaiti",
            "Kyrgyz",
            "Laotian",
            "Latvian",
            "Lebanese",
            "Liberian",
            "Libyan",
            "Liechtensteiner",
            "Lithuanian",
            "Luxembourgish",
            "Macedonian",
            "Malagasy",
            "Malawian",
            "Malaysian",
            "Maldivan",
            "Malian",
            "Maltese",
            "Marshallese",
            "Mauritanian",
            "Mauritian",
            "Mexican",
            "Micronesian",
            "Moldovan",
            "Monegasque",
            "Mongolian",
            "Montenegrin",
            "Moroccan",
            "Mosotho",
            "Motswana",
            "Mozambican",
            "Namibian",
            "Nauruan",
            "Nepalese",
            "New Zealander",
            "Ni-Vanuatu",
            "Nicaraguan",
            "Nigerian",
            "Nigerien",
            "North Korean",
            "Northern Irish",
            "Norwegian",
            "Omani",
            "Pakistani",
            "Palauan",
            "Palestinian",
            "Panamanian",
            "Papua New Guinean",
            "Paraguayan",
            "Peruvian",
            "Polish",
            "Portuguese",
            "Qatari",
            "Romanian",
            "Russian",
            "Rwandan",
            "Saint Lucian",
            "Salvadoran",
            "Samoan",
            "San Marinese",
            "Sao Tomean",
            "Saudi",
            "Scottish",
            "Senegalese",
            "Serbian",
            "Seychellois",
            "Sierra Leonean",
            "Singaporean",
            "Slovakian",
            "Slovenian",
            "Solomon Islander",
            "Somali",
            "South African",
            "South Korean",
            "South Sudanese",
            "Spanish",
            "Sri Lankan",
            "Sudanese",
            "Surinamer",
            "Swazi",
            "Swedish",
            "Swiss",
            "Syrian",
            "Tajikistani",
            "Tanzanian",
            "Thai",
            "Togolese",
            "Tongan",
            "Trinidadian Tobagonian",
            "Tunisian",
            "Turkish",
            "Turkmen",
            "Tuvaluan",
            "Ugandan",
            "Ukrainian",
            "Uruguayan",
            "Uzbekistani",
            "Venezuelan",
            "Vietnamese",
            "Welsh",
            "Yemeni",
            "Zambian",
            "Zimbabwean"
          ],
          {
            "default": "Chinese",
            "key": "nationality_list"
          }
        ],
        "nationality_2": [
          [
            "-",
            "Afghan",
            "Albanian",
            "Algerian",
            "Andorran",
            "Angolan",
            "Antiguans Barbudans",
            "Argentine",
            "Armenian",
            "Australian",
            "Austrian",
            "Azerbaijani",
            "Bahamian",
            "Bahraini",
            "Bangladeshi",
            "Barbadian",
            "Belarusian",
            "Belgian",
            "Belizean",
            "Beninese",
            "Bhutanese",
            "Bolivian",
            "Bosnian Herzegovinian",
            "Brazilian",
            "British",
            "Bruneian",
            "Bulgarian",
            "Burkinabe",
            "Burundian",
            "Cambodian",
            "Cameroonian",
            "Canadian",
            "Cape Verdian",
            "Central African",
            "Chadian",
            "Chilean",
            "Chinese",
            "Colombian",
            "Comoran",
            "Congolese",
            "Costa Rican",
            "Croatian",
            "Cuban",
            "Cypriot",
            "Czech",
            "Danish",
            "Djibouti",
            "Dominican",
            "Dutch",
            "East Timorese",
            "Ecuadorean",
            "Egyptian",
            "Emirian",
            "Equatorial Guinean",
            "Eritrean",
            "Estonian",
            "Ethiopian",
            "Fijian",
            "Filipino",
            "Finnish",
            "French",
            "Gabonese",
            "Gambian",
            "Georgian",
            "German",
            "Ghanaian",
            "Greek",
            "Grenadian",
            "Guatemalan",
            "Guinean",
            "Guyanese",
            "Haitian",
            "Herzegovinian",
            "Honduran",
            "Hungarian",
            "Icelander",
            "Indian",
            "Indonesian",
            "Iranian",
            "Iraqi",
            "Irish",
            "Israeli",
            "Italian",
            "Ivorian",
            "Jamaican",
            "Japanese",
            "Jordanian",
            "Kazakhstani",
            "Kenyan",
            "Kiribati",
            "North Korean",
            "South Korean",
            "Kuwaiti",
            "Kyrgyz",
            "Laotian",
            "Latvian",
            "Lebanese",
            "Liberian",
            "Libyan",
            "Liechtensteiner",
            "Lithuanian",
            "Luxembourgish",
            "Macedonian",
            "Malagasy",
            "Malawian",
            "Malaysian",
            "Maldivan",
            "Malian",
            "Maltese",
            "Marshallese",
            "Mauritanian",
            "Mauritian",
            "Mexican",
            "Micronesian",
            "Moldovan",
            "Monegasque",
            "Mongolian",
            "Montenegrin",
            "Moroccan",
            "Mosotho",
            "Motswana",
            "Mozambican",
            "Namibian",
            "Nauruan",
            "Nepalese",
            "New Zealander",
            "Ni-Vanuatu",
            "Nicaraguan",
            "Nigerian",
            "Nigerien",
            "North Korean",
            "Northern Irish",
            "Norwegian",
            "Omani",
            "Pakistani",
            "Palauan",
            "Palestinian",
            "Panamanian",
            "Papua New Guinean",
            "Paraguayan",
            "Peruvian",
            "Polish",
            "Portuguese",
            "Qatari",
            "Romanian",
            "Russian",
            "Rwandan",
            "Saint Lucian",
            "Salvadoran",
            "Samoan",
            "San Marinese",
            "Sao Tomean",
            "Saudi",
            "Scottish",
            "Senegalese",
            "Serbian",
            "Seychellois",
            "Sierra Leonean",
            "Singaporean",
            "Slovakian",
            "Slovenian",
            "Solomon Islander",
            "Somali",
            "South African",
            "South Korean",
            "South Sudanese",
            "Spanish",
            "Sri Lankan",
            "Sudanese",
            "Surinamer",
            "Swazi",
            "Swedish",
            "Swiss",
            "Syrian",
            "Tajikistani",
            "Tanzanian",
            "Thai",
            "Togolese",
            "Tongan",
            "Trinidadian Tobagonian",
            "Tunisian",
            "Turkish",
            "Turkmen",
            "Tuvaluan",
            "Ugandan",
            "Ukrainian",
            "Uruguayan",
            "Uzbekistani",
            "Venezuelan",
            "Vietnamese",
            "Welsh",
            "Yemeni",
            "Zambian",
            "Zimbabwean"
          ],
          {
            "key": "nationality_list"
          }
        ],
        "nationality_mix": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "body_type": [
          [
            "-",
            "Underweight",
            "Normal weight",
            "Overweight",
            "Obese"
          ],
          {
            "key": "body_type_list"
          }
        ],
        "body_type_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "model_pose": [
          [
            "-",
            "Power Pose",
            "Walking Pose",
            "The Over-the-Shoulder Look",
            "S-curve Pose",
            "Sitting Pose",
            "Close-Up Beauty Shot Pose",
            "Leaning Pose",
            "Arms Up Pose",
            "Casual Stroll Pose",
            "Headshot Pose",
            "Sitting Cross-Legged Pose",
            "Back Arch Pose",
            "Hand-on-Hip Pose",
            "Gazing into the Distance Pose",
            "Candid Laugh Pose",
            "Dynamic Action Pose",
            "Contrapposto Pose",
            "High Fashion Pose"
          ],
          {
            "key": "model_pose_list"
          }
        ],
        "eyes_color": [
          [
            "-",
            "Brown",
            "Blue",
            "Green",
            "Hazel",
            "Gray",
            "Amber",
            "Red",
            "Violet"
          ],
          {
            "key": "eyes_color_list"
          }
        ],
        "facial_expression": [
          [
            "-",
            "Happy",
            "Sad",
            "Angry",
            "Surprised",
            "Fearful",
            "Disgusted",
            "Contemptuous",
            "Excited",
            "Nervous",
            "Confused",
            "Amused",
            "Content",
            "Disappointed",
            "Bored",
            "Relieved",
            "In love",
            "Shy",
            "Envious",
            "Proud",
            "Cautious",
            "Serious",
            "Serene",
            "Peaceful",
            "Calm"
          ],
          {
            "key": "face_expression_list"
          }
        ],
        "facial_expression_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "face_shape": [
          [
            "-",
            "Oval",
            "Round",
            "Square",
            "Heart-shaped",
            "Long",
            "Rectangle",
            "Triangle",
            "Inverted Triangle",
            "Pear-shaped",
            "Oblong",
            "Square Round",
            "Square Oval"
          ],
          {
            "key": "face_shape_list"
          }
        ],
        "face_shape_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "facial_asymmetry": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "hair_style": [
          [
            "-",
            "Asymmetrical cut",
            "Blunt cut",
            "Bob cut",
            "Braided bob",
            "Buzz cut",
            "Choppy cut",
            "Curly bob",
            "Curtain bangs",
            "Faux hawk",
            "Feathered cut",
            "French bob",
            "Layered cut",
            "Long bob",
            "Mohawk",
            "Pixie cut",
            "Shag cut",
            "Side-swept bangs",
            "Textured cut",
            "Undercut",
            "Wavy bob",
            "Faux hawk short pixie",
            "Brave short haircut with shaved sides",
            "Tapered haricut wuth shaved side",
            "Stacked bob",
            "Lemonade braids",
            "Middle part ponytails",
            "Stitch braids",
            "Deep side part",
            "French braids",
            "Box braids",
            "Two dutch braids",
            "Wavy cut with curtains bangs",
            "Right side shaved",
            "Sweeping pixie",
            "Smooth lob",
            "Long pixie",
            "Sideswept pixie",
            "Italian bob",
            "Shullet"
          ],
          {
            "key": "hair_style_list"
          }
        ],
        "hair_color": [
          [
            "-",
            "Black",
            "Brown",
            "Blonde",
            "Red",
            "Auburn",
            "Chestnut",
            "Gray",
            "White",
            "Salt and pepper"
          ],
          {
            "key": "hair_color_list"
          }
        ],
        "disheveled": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "beard": [
          [
            "-",
            "Stubble Beard",
            "Goatee",
            "Full Beard",
            "Van Dyke Beard",
            "Soul Patch",
            "Garibaldi Beard",
            "Mutton Chops",
            "Circle Beard",
            "Corporate Beard",
            "Balbo Beard",
            "Ducktail Beard",
            "Chinstrap Beard",
            "Anchor Beard",
            "Chevron Mustache",
            "Horseshoe Mustache",
            "Handlebar Mustache",
            "Imperial Mustache",
            "Pencil Mustache",
            "Friendly Mutton Chops",
            "Zappa Mustache"
          ],
          {
            "key": "beard_list"
          }
        ],
        "skin_details": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "skin_pores": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "dimples": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "freckles": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "moles": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "skin_imperfections": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "skin_acne": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "tanned_skin": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "eyes_details": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "iris_details": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "circular_iris": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "circular_pupil": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "light_type": [
          [
            "-",
            "Natural sunlight",
            "Soft ambient light",
            "Harsh sunlight",
            "Overcast sky",
            "Sunset glow",
            "Sunrise warmth",
            "Twilight hues",
            "Candlelight",
            "Incandescent lighting",
            "Fluorescent lighting",
            "Moonlight",
            "Dappled sunlight",
            "Backlit silhouette",
            "Spotlight",
            "Rim lighting",
            "Firelight",
            "City streetlights",
            "Studio lighting",
            "Lantern light",
            "Tungsten lighting",
            "Cloudy day diffused light",
            "Skylight",
            "Golden hour light",
            "Blue hour light",
            "Flash photography",
            "Stage lighting",
            "Neon lights",
            "Torchlight",
            "Softbox lighting",
            "Rim light",
            "Lightning",
            "Abstract light patterns"
          ],
          {
            "key": "light_type_list"
          }
        ],
        "light_direction": [
          [
            "-",
            "top",
            "bottom",
            "right",
            "left",
            "front",
            "rear",
            "top-right",
            "top-left",
            "bottom-right",
            "bottom-left"
          ],
          {
            "key": "light_direction_list"
          }
        ],
        "light_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "photorealism_improvement": [
          [
            "enable",
            "disable"
          ]
        ],
        "prompt_start": [
          "STRING",
          {
            "multiline": true,
            "default": "raw photo, (realistic:1.5)"
          }
        ],
        "prompt_additional": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_end": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shot",
        "shot_weight",
        "gender",
        "age",
        "nationality_1",
        "nationality_2",
        "nationality_mix",
        "body_type",
        "body_type_weight",
        "model_pose",
        "eyes_color",
        "facial_expression",
        "facial_expression_weight",
        "face_shape",
        "face_shape_weight",
        "facial_asymmetry",
        "hair_style",
        "hair_color",
        "disheveled",
        "beard",
        "skin_details",
        "skin_pores",
        "dimples",
        "freckles",
        "moles",
        "skin_imperfections",
        "skin_acne",
        "tanned_skin",
        "eyes_details",
        "iris_details",
        "circular_iris",
        "circular_pupil",
        "light_type",
        "light_direction",
        "light_weight",
        "photorealism_improvement",
        "prompt_start",
        "prompt_additional",
        "prompt_end",
        "negative_prompt"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "easy portraitMaster",
    "display_name": "Portrait Master",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy fullLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors",
            "None"
          ]
        ],
        "config_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "512 x 512"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "comfy++",
            "compel",
            "fixed attention"
          ]
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "comfy++",
            "compel",
            "fixed attention"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "vae_override": [
          "VAE"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "a1111_prompt_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "video_length": "INT",
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "config_name",
        "vae_name",
        "clip_skip",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "negative",
        "negative_token_normalization",
        "negative_weight_interpretation",
        "batch_size"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "vae_override",
        "optional_lora_stack",
        "optional_controlnet_stack",
        "a1111_prompt_style"
      ],
      "hidden": [
        "video_length",
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false, false, false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae",
      "clip",
      "positive",
      "negative",
      "latent"
    ],
    "name": "easy fullLoader",
    "display_name": "EasyLoader (Full)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy a1111Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "512 x 512"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "a1111_prompt_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "clip_skip",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack",
        "optional_controlnet_stack",
        "a1111_prompt_style"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy a1111Loader",
    "display_name": "EasyLoader (A1111)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy comfyLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "512 x 512"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "clip_skip",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack",
        "optional_controlnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy comfyLoader",
    "display_name": "EasyLoader (Comfy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy svdLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          []
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "clip_name": [
          [
            "None",
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "init_image": [
          "IMAGE"
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 576"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 14,
            "min": 1,
            "max": 4096
          }
        ],
        "motion_bucket_id": [
          "INT",
          {
            "default": 127,
            "min": 1,
            "max": 1023
          }
        ],
        "fps": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 1024
          }
        ],
        "augmentation_level": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "optional_positive": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "optional_negative": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "clip_name",
        "init_image",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "video_frames",
        "motion_bucket_id",
        "fps",
        "augmentation_level"
      ],
      "optional": [
        "optional_positive",
        "optional_negative"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy svdLoader",
    "display_name": "EasyLoader (SVD)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy sv3dLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          []
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "init_image": [
          "IMAGE"
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "interp_easing": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ],
          {
            "default": "linear"
          }
        ],
        "easing_mode": [
          [
            "azimuth",
            "elevation",
            "custom"
          ],
          {
            "default": "azimuth"
          }
        ]
      },
      "optional": {
        "scheduler": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "init_image",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size",
        "interp_easing",
        "easing_mode"
      ],
      "optional": [
        "scheduler"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "interp_log"
    ],
    "name": "easy sv3dLoader",
    "display_name": "EasyLoader (SV3D)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy zero123Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          []
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "init_image": [
          "IMAGE"
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "init_image",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size",
        "elevation",
        "azimuth"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy zero123Loader",
    "display_name": "EasyLoader (Zero123)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy cascadeLoader": {
    "input": {
      "required": {
        "stage_c": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "stage_b": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "stage_a": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "clip_name": [
          [
            "None",
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 1024"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 32,
            "max": 64,
            "step": 1
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "stage_c",
        "stage_b",
        "stage_a",
        "clip_name",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "compression",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "pipe",
      "model_c",
      "latent_c",
      "vae"
    ],
    "name": "easy cascadeLoader",
    "display_name": "EasyCascadeLoader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy kolorsLoader": {
    "input": {
      "required": {
        "unet_name": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ]
        ],
        "vae_name": [
          [
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "chatglm3_name": [
          [
            "Florence-2-large-PromptGen-v2.0\\model.safetensors",
            "Llama-3.2-3B-Instruct\\model-00001-of-00002.safetensors",
            "Llama-3.2-3B-Instruct\\model-00002-of-00002.safetensors",
            "Llama-3.2-3B-Instruct\\model.safetensors"
          ]
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 576"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "vae_override": [
          "VAE"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "auto_clean_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "vae_name",
        "chatglm3_name",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "model_override",
        "vae_override",
        "optional_lora_stack",
        "auto_clean_gpu"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy kolorsLoader",
    "display_name": "EasyLoader (Kolors)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy fluxLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors",
            "None"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 1024"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "vae_override": [
          "VAE"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "batch_size"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "vae_override",
        "optional_lora_stack",
        "optional_controlnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy fluxLoader",
    "display_name": "EasyLoader (Flux)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy hunyuanDiTLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 1024"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack",
        "optional_controlnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy hunyuanDiTLoader",
    "display_name": "EasyLoader (HunyuanDiT)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy pixArtLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "model_name": [
          [
            "PixArtMS_XL_2",
            "PixArtMS_Sigma_XL_2",
            "PixArtMS_Sigma_XL_2_900M",
            "PixArtMS_Sigma_XL_2_2K",
            "PixArt_XL_2",
            "ControlPixArtHalf",
            "ControlPixArtMSHalf"
          ]
        ],
        "vae_name": [
          [
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "t5_type": [
          [
            "sd3"
          ]
        ],
        "clip_name": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "padding": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 300
          }
        ],
        "t5_name": [
          []
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ],
          {
            "default": "cpu"
          }
        ],
        "dtype": [
          [
            "default",
            "auto (comfy)",
            "FP32",
            "FP16",
            "BF16"
          ]
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "ratio": [
          [
            "custom",
            "0.25",
            "0.26",
            "0.27",
            "0.28",
            "0.32",
            "0.33",
            "0.35",
            "0.40",
            "0.42",
            "0.48",
            "0.50",
            "0.52",
            "0.57",
            "0.60",
            "0.68",
            "0.72",
            "0.78",
            "0.82",
            "0.88",
            "0.94",
            "1.00",
            "1.07",
            "1.13",
            "1.21",
            "1.29",
            "1.38",
            "1.46",
            "1.67",
            "1.75",
            "2.00",
            "2.09",
            "2.40",
            "2.50",
            "2.89",
            "3.00",
            "3.11",
            "3.62",
            "3.75",
            "3.88",
            "4.00"
          ],
          {
            "default": "1.00"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "model_name",
        "vae_name",
        "t5_type",
        "clip_name",
        "padding",
        "t5_name",
        "device",
        "dtype",
        "lora_name",
        "lora_model_strength",
        "ratio",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy pixArtLoader",
    "display_name": "EasyLoader (PixArt)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy mochiLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ],
          {
            "default": "mochi_vae.safetensors"
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "width x height (custom)"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 848,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 7,
            "max": 16384,
            "step": 6
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "vae_override": [
          "VAE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "positive",
        "negative",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "length",
        "batch_size"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "vae_override"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy mochiLoader",
    "display_name": "EasyLoader (Mochi)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy loraStack": {
    "input": {
      "required": {
        "toggle": [
          "BOOLEAN",
          {
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "mode": [
          [
            "simple",
            "advanced"
          ]
        ],
        "num_loras": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "lora_1_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_1_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_1_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_1_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_2_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_2_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_2_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_2_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_3_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_3_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_3_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_3_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_4_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_4_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_4_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_4_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_5_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_5_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_5_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_5_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_6_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_6_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_6_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_6_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_7_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_7_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_7_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_7_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_8_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_8_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_8_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_8_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_9_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_9_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_9_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_9_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_10_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_10_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_10_model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_10_clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "toggle",
        "mode",
        "num_loras"
      ],
      "optional": [
        "optional_lora_stack",
        "lora_1_name",
        "lora_1_strength",
        "lora_1_model_strength",
        "lora_1_clip_strength",
        "lora_2_name",
        "lora_2_strength",
        "lora_2_model_strength",
        "lora_2_clip_strength",
        "lora_3_name",
        "lora_3_strength",
        "lora_3_model_strength",
        "lora_3_clip_strength",
        "lora_4_name",
        "lora_4_strength",
        "lora_4_model_strength",
        "lora_4_clip_strength",
        "lora_5_name",
        "lora_5_strength",
        "lora_5_model_strength",
        "lora_5_clip_strength",
        "lora_6_name",
        "lora_6_strength",
        "lora_6_model_strength",
        "lora_6_clip_strength",
        "lora_7_name",
        "lora_7_strength",
        "lora_7_model_strength",
        "lora_7_clip_strength",
        "lora_8_name",
        "lora_8_strength",
        "lora_8_model_strength",
        "lora_8_clip_strength",
        "lora_9_name",
        "lora_9_strength",
        "lora_9_model_strength",
        "lora_9_clip_strength",
        "lora_10_name",
        "lora_10_strength",
        "lora_10_model_strength",
        "lora_10_clip_strength"
      ]
    },
    "output": [
      "LORA_STACK"
    ],
    "output_is_list": [false],
    "output_name": [
      "lora_stack"
    ],
    "name": "easy loraStack",
    "display_name": "EasyLoraStack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy controlnetStack": {
    "input": {
      "required": {
        "toggle": [
          "BOOLEAN",
          {
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "mode": [
          [
            "simple",
            "advanced"
          ]
        ],
        "num_controlnet": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 3
          }
        ]
      },
      "optional": {
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "controlnet_1": [
          [
            "None",
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "controlnet_1_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent_1": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent_1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "scale_soft_weight_1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "controlnet_2": [
          [
            "None",
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "controlnet_2_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent_2": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent_2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "scale_soft_weight_2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "image_2": [
          "IMAGE"
        ],
        "controlnet_3": [
          [
            "None",
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "controlnet_3_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent_3": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent_3": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "scale_soft_weight_3": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "image_3": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "toggle",
        "mode",
        "num_controlnet"
      ],
      "optional": [
        "optional_controlnet_stack",
        "controlnet_1",
        "controlnet_1_strength",
        "start_percent_1",
        "end_percent_1",
        "scale_soft_weight_1",
        "image_1",
        "controlnet_2",
        "controlnet_2_strength",
        "start_percent_2",
        "end_percent_2",
        "scale_soft_weight_2",
        "image_2",
        "controlnet_3",
        "controlnet_3_strength",
        "start_percent_3",
        "end_percent_3",
        "scale_soft_weight_3",
        "image_3"
      ]
    },
    "output": [
      "CONTROL_NET_STACK"
    ],
    "output_is_list": [false],
    "output_name": [
      "controlnet_stack"
    ],
    "name": "easy controlnetStack",
    "display_name": "EasyControlnetStack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy controlnetLoader": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      },
      "optional": {
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "scale_soft_weights": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "control_net_name"
      ],
      "optional": [
        "control_net",
        "strength",
        "scale_soft_weights"
      ]
    },
    "output": [
      "PIPE_LINE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "positive",
      "negative"
    ],
    "name": "easy controlnetLoader",
    "display_name": "EasyControlnet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy controlnetLoaderADV": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      },
      "optional": {
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "scale_soft_weights": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "control_net_name"
      ],
      "optional": [
        "control_net",
        "strength",
        "start_percent",
        "end_percent",
        "scale_soft_weights"
      ]
    },
    "output": [
      "PIPE_LINE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "positive",
      "negative"
    ],
    "name": "easy controlnetLoaderADV",
    "display_name": "EasyControlnet (Advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy controlnetLoader++": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ]
      },
      "optional": {
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "scale_soft_weights": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "union_type": [
          [
            "auto",
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/anime_lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "repaint"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "control_net_name"
      ],
      "optional": [
        "control_net",
        "strength",
        "start_percent",
        "end_percent",
        "scale_soft_weights",
        "union_type"
      ]
    },
    "output": [
      "PIPE_LINE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "positive",
      "negative"
    ],
    "name": "easy controlnetLoader++",
    "display_name": "EasyControlnet++",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy LLLiteLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "model_name": [
          []
        ],
        "cond_image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 200,
            "step": 1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "model_name",
        "cond_image",
        "strength",
        "steps",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "easy LLLiteLoader",
    "display_name": "EasyLLLite",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy loraStackApply": {
    "input": {
      "required": {
        "lora_stack": [
          "LORA_STACK"
        ],
        "model": [
          "MODEL"
        ]
      },
      "optional": {
        "optional_clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_stack",
        "model"
      ],
      "optional": [
        "optional_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model",
      "clip"
    ],
    "name": "easy loraStackApply",
    "display_name": "Easy Apply LoraStack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy controlnetStackApply": {
    "input": {
      "required": {
        "controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "controlnet_stack",
        "pipe"
      ],
      "optional": []
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy controlnetStackApply",
    "display_name": "Easy Apply CnetStack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION",
            "FACEID",
            "FACEID PLUS - SD1.5 only",
            "FACEID PLUS KOLORS",
            "FACEID PLUS V2",
            "FACEID PORTRAIT (style transfer)",
            "FACEID PORTRAIT UNNORM - SDXL only (strong)"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ],
          {
            "default": "CUDA"
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "all"
          }
        ],
        "use_tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "preset",
        "lora_strength",
        "provider",
        "weight",
        "weight_faceidv2",
        "start_at",
        "end_at",
        "cache_mode",
        "use_tiled"
      ],
      "optional": [
        "attn_mask",
        "optional_ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK",
      "IPADAPTER"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "model",
      "images",
      "masks",
      "ipadapter"
    ],
    "name": "easy ipadapterApply",
    "display_name": "Easy Apply IPAdapter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyADV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION",
            "FACEID",
            "FACEID PLUS - SD1.5 only",
            "FACEID PLUS KOLORS",
            "FACEID PLUS V2",
            "FACEID PORTRAIT (style transfer)",
            "FACEID PORTRAIT UNNORM - SDXL only (strong)"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ],
          {
            "default": "CUDA"
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "all"
          }
        ],
        "use_tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ],
        "layer_weights": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Mad Scientist Layer Weights"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "preset",
        "lora_strength",
        "provider",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "cache_mode",
        "use_tiled",
        "use_batch",
        "sharpening"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "optional_ipadapter",
        "layer_weights"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK",
      "IPADAPTER"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "model",
      "images",
      "masks",
      "ipadapter"
    ],
    "name": "easy ipadapterApplyADV",
    "display_name": "Easy Apply IPAdapter (Advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyFaceIDKolors": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "preset": [
          [
            "FACEID PLUS KOLORS"
          ],
          {
            "default": "FACEID PLUS KOLORS"
          }
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ],
          {
            "default": "CUDA"
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_kolors": [
          "FLOAT",
          {
            "default": 0.8,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "all"
          }
        ],
        "use_tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "preset",
        "lora_strength",
        "provider",
        "weight",
        "weight_faceidv2",
        "weight_kolors",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "cache_mode",
        "use_tiled",
        "use_batch",
        "sharpening"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "optional_ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK",
      "IPADAPTER"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "model",
      "images",
      "masks",
      "ipadapter"
    ],
    "name": "easy ipadapterApplyFaceIDKolors",
    "display_name": "Easy Apply IPAdapter (FaceID Kolors)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyEncoder": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image1": [
          "IMAGE"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION"
          ]
        ],
        "num_embeds": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 4
          }
        ]
      },
      "optional": {
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ],
        "mask1": [
          "MASK"
        ],
        "weight1": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "mask2": [
          "MASK"
        ],
        "weight2": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "mask3": [
          "MASK"
        ],
        "weight3": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "mask4": [
          "MASK"
        ],
        "weight4": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "combine_method": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average",
            "max",
            "min"
          ]
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ],
        "pos_embeds": [
          "EMBEDS"
        ],
        "neg_embeds": [
          "EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "image1",
        "preset",
        "num_embeds"
      ],
      "optional": [
        "image2",
        "image3",
        "image4",
        "mask1",
        "weight1",
        "mask2",
        "weight2",
        "mask3",
        "weight3",
        "mask4",
        "weight4",
        "combine_method",
        "optional_ipadapter",
        "pos_embeds",
        "neg_embeds"
      ]
    },
    "output": [
      "MODEL",
      "CLIP_VISION",
      "IPADAPTER",
      "EMBEDS",
      "EMBEDS"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "model",
      "clip_vision",
      "ipadapter",
      "pos_embed",
      "neg_embed"
    ],
    "name": "easy ipadapterApplyEncoder",
    "display_name": "Easy Apply IPAdapter (Encoder)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyEmbeds": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "pos_embed": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "neg_embed": [
          "EMBEDS"
        ],
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "ipadapter",
        "pos_embed",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "neg_embed",
        "attn_mask"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "easy ipadapterApplyEmbeds",
    "display_name": "Easy Apply IPAdapter (Embeds)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyRegional": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "negative",
            "multiline": true
          }
        ],
        "image_weight": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "prompt_weight": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "optional_ipadapter_params": [
          "IPADAPTER_PARAMS"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "positive",
        "negative",
        "image_weight",
        "prompt_weight",
        "weight_type",
        "start_at",
        "end_at"
      ],
      "optional": [
        "mask",
        "optional_ipadapter_params"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IPADAPTER_PARAMS",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "pipe",
      "ipadapter_params",
      "positive",
      "negative"
    ],
    "name": "easy ipadapterApplyRegional",
    "display_name": "Easy Apply IPAdapter (Regional)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyFromParams": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION"
          ]
        ],
        "ipadapter_params": [
          "IPADAPTER_PARAMS"
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average",
            "max",
            "min"
          ]
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "insightface only"
          }
        ]
      },
      "optional": {
        "optional_ipadapter": [
          "IPADAPTER"
        ],
        "image_negative": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset",
        "ipadapter_params",
        "combine_embeds",
        "embeds_scaling",
        "cache_mode"
      ],
      "optional": [
        "optional_ipadapter",
        "image_negative"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "easy ipadapterApplyFromParams",
    "display_name": "Easy Apply IPAdapter (From Params)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterStyleComposition": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image_style": [
          "IMAGE"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION"
          ]
        ],
        "weight_style": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_composition": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "expand_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ],
          {
            "default": "average"
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "all"
          }
        ]
      },
      "optional": {
        "image_composition": [
          "IMAGE"
        ],
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image_style",
        "preset",
        "weight_style",
        "weight_composition",
        "expand_style",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "cache_mode"
      ],
      "optional": [
        "image_composition",
        "image_negative",
        "attn_mask",
        "clip_vision",
        "optional_ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "easy ipadapterStyleComposition",
    "display_name": "Easy Apply IPAdapter (StyleComposition)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy instantIDApply": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "instantid_file": [
          []
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ],
        "cn_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "cn_soft_weights": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_kps": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "instantid_file",
        "insightface",
        "control_net_name",
        "cn_strength",
        "cn_soft_weights",
        "weight",
        "start_at",
        "end_at",
        "noise"
      ],
      "optional": [
        "image_kps",
        "mask",
        "control_net"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative"
    ],
    "name": "easy instantIDApply",
    "display_name": "Easy Apply InstantID",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy instantIDApplyADV": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "instantid_file": [
          []
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ],
        "cn_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "cn_soft_weights": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_kps": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "instantid_file",
        "insightface",
        "control_net_name",
        "cn_strength",
        "cn_soft_weights",
        "weight",
        "start_at",
        "end_at",
        "noise"
      ],
      "optional": [
        "image_kps",
        "mask",
        "control_net",
        "positive",
        "negative"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative"
    ],
    "name": "easy instantIDApplyADV",
    "display_name": "Easy Apply InstantID (Advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy pulIDApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "pulid_file": [
          []
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "image": [
          "IMAGE"
        ],
        "method": [
          [
            "fidelity",
            "style",
            "neutral"
          ]
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "pulid_file",
        "insightface",
        "image",
        "method",
        "weight",
        "start_at",
        "end_at"
      ],
      "optional": [
        "attn_mask"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "easy pulIDApply",
    "display_name": "Easy Apply PuLID",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy pulIDApplyADV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "pulid_file": [
          []
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "projection": [
          [
            "ortho_v2",
            "ortho",
            "none"
          ],
          {
            "default": "ortho_v2"
          }
        ],
        "fidelity": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.1
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "pulid_file",
        "insightface",
        "image",
        "weight",
        "projection",
        "fidelity",
        "noise",
        "start_at",
        "end_at"
      ],
      "optional": [
        "attn_mask"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "easy pulIDApplyADV",
    "display_name": "Easy Apply PuLID (Advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy styleAlignedBatchAlign": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "share_norm": [
          [
            "both",
            "group",
            "layer",
            "disabled"
          ]
        ],
        "share_attn": [
          [
            "q+k",
            "q+k+v",
            "disabled"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "share_norm",
        "share_attn",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "easy styleAlignedBatchAlign",
    "display_name": "Easy Apply StyleAlign",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy icLightApply": {
    "input": {
      "required": {
        "mode": [
          [
            "Foreground",
            "Foreground&Background"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "lighting": [
          [
            "None",
            "Left Light",
            "Right Light",
            "Top Light",
            "Bottom Light",
            "Circle Light"
          ],
          {
            "default": "None"
          }
        ],
        "source": [
          [
            "Use Background Image",
            "Use Flipped Background Image",
            "Left Light",
            "Right Light",
            "Top Light",
            "Bottom Light",
            "Ambient"
          ],
          {
            "default": "Use Background Image"
          }
        ],
        "remove_bg": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model",
        "image",
        "vae",
        "lighting",
        "source",
        "remove_bg"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model",
      "lighting_image"
    ],
    "name": "easy icLightApply",
    "display_name": "Easy Apply ICLight",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy applyFooocusInpaint": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT"
        ],
        "head": [
          [
            "fooocus_inpaint_head"
          ]
        ],
        "patch": [
          [
            "inpaint_v26 (1.32GB)",
            "inpaint_v25 (2.58GB)",
            "inpaint (1.32GB)"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "head",
        "patch"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "easy applyFooocusInpaint",
    "display_name": "Easy Apply Fooocus Inpaint",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Inpaint",
    "output_node": false
  },
  "easy applyBrushNet": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "brushnet": [
          []
        ],
        "dtype": [
          [
            "float16",
            "bfloat16",
            "float32",
            "float64"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10
          }
        ],
        "start_at": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "mask",
        "brushnet",
        "dtype",
        "scale",
        "start_at",
        "end_at"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy applyBrushNet",
    "display_name": "Easy Apply BrushNet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Inpaint",
    "output_node": false
  },
  "easy applyPowerPaint": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "powerpaint_model": [
          []
        ],
        "powerpaint_clip": [
          []
        ],
        "dtype": [
          [
            "float16",
            "bfloat16",
            "float32",
            "float64"
          ]
        ],
        "fitting": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.3,
            "max": 1
          }
        ],
        "function": [
          [
            "text guided",
            "shape guided",
            "object removal",
            "context aware",
            "image outpainting"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10
          }
        ],
        "start_at": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "save_memory": [
          [
            "none",
            "auto",
            "max"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "mask",
        "powerpaint_model",
        "powerpaint_clip",
        "dtype",
        "fitting",
        "function",
        "scale",
        "start_at",
        "end_at",
        "save_memory"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy applyPowerPaint",
    "display_name": "Easy Apply PowerPaint",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Inpaint",
    "output_node": false
  },
  "easy applyInpaint": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "inpaint_mode": [
          [
            "normal",
            "fooocus_inpaint",
            "brushnet_random",
            "brushnet_segmentation",
            "powerpaint"
          ]
        ],
        "encode": [
          [
            "none",
            "vae_encode_inpaint",
            "inpaint_model_conditioning",
            "different_diffusion"
          ],
          {
            "default": "none"
          }
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "dtype": [
          [
            "float16",
            "bfloat16",
            "float32",
            "float64"
          ]
        ],
        "fitting": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.3,
            "max": 1
          }
        ],
        "function": [
          [
            "text guided",
            "shape guided",
            "object removal",
            "context aware",
            "image outpainting"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10
          }
        ],
        "start_at": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ]
      },
      "optional": {
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "mask",
        "inpaint_mode",
        "encode",
        "grow_mask_by",
        "dtype",
        "fitting",
        "function",
        "scale",
        "start_at",
        "end_at"
      ],
      "optional": [
        "noise_mask"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy applyInpaint",
    "display_name": "Easy Apply Inpaint",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Inpaint",
    "output_node": false
  },
  "easy preSampling": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "image_to_latent",
        "latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSampling",
    "display_name": "PreSampling",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingAdvanced": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "add_noise": [
          [
            "enable (CPU)",
            "enable (GPU=A1111)",
            "disable"
          ],
          {
            "default": "enable (CPU)"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ]
      },
      "optional": {
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "start_at_step",
        "end_at_step",
        "add_noise",
        "seed",
        "return_with_leftover_noise"
      ],
      "optional": [
        "image_to_latent",
        "latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingAdvanced",
    "display_name": "PreSampling (Advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingNoiseIn": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "optional_noise_seed": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "optional_latent": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "factor",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "optional_noise_seed",
        "optional_latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingNoiseIn",
    "display_name": "PreSampling (NoiseIn)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingCustom": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "guider": [
          [
            "CFG",
            "DualCFG",
            "Basic",
            "IP2P+CFG",
            "IP2P+DualCFG",
            "IP2P+Basic"
          ],
          {
            "default": "Basic"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0,
            "max": 100
          }
        ],
        "cfg_negative": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
            "inversed_euler"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal",
            "karrasADV",
            "exponentialADV",
            "polyExponential",
            "sdturbo",
            "vp",
            "alignYourSteps",
            "gits"
          ]
        ],
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0,
            "max": 1000,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0,
            "max": 1000,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 7,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_d": [
          "FLOAT",
          {
            "default": 19.9,
            "min": 0,
            "max": 1000,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_min": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1000,
            "step": 0.01,
            "round": false
          }
        ],
        "eps_s": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0,
            "max": 1,
            "step": 0.0001,
            "round": false
          }
        ],
        "flip_sigmas": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "add_noise": [
          [
            "enable (CPU)",
            "enable (GPU=A1111)",
            "disable"
          ],
          {
            "default": "enable (CPU)"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ],
        "optional_sampler": [
          "SAMPLER"
        ],
        "optional_sigmas": [
          "SIGMAS"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "guider",
        "cfg",
        "cfg_negative",
        "sampler_name",
        "scheduler",
        "coeff",
        "steps",
        "sigma_max",
        "sigma_min",
        "rho",
        "beta_d",
        "beta_min",
        "eps_s",
        "flip_sigmas",
        "denoise",
        "add_noise",
        "seed"
      ],
      "optional": [
        "image_to_latent",
        "latent",
        "optional_sampler",
        "optional_sigmas"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingCustom",
    "display_name": "PreSampling (Custom)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingSdTurbo": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "round": false
          }
        ],
        "upscale_ratio": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 16,
            "step": 0.01,
            "round": false
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "end_step": [
          "INT",
          {
            "default": 15,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "upscale_n_step": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "unsharp_kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 21,
            "step": 1
          }
        ],
        "unsharp_sigma": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "round": false
          }
        ],
        "unsharp_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "round": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "sampler_name",
        "eta",
        "s_noise",
        "upscale_ratio",
        "start_step",
        "end_step",
        "upscale_n_step",
        "unsharp_kernel_size",
        "unsharp_sigma",
        "unsharp_strength",
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingSdTurbo",
    "display_name": "PreSampling (SDTurbo)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingDynamicCFG": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "cfg_mode": [
          [
            "Constant",
            "Linear Down",
            "Cosine Down",
            "Half Cosine Down",
            "Linear Up",
            "Cosine Up",
            "Half Cosine Up",
            "Power Up",
            "Power Down",
            "Linear Repeating",
            "Cosine Repeating",
            "Sawtooth"
          ]
        ],
        "cfg_scale_min": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0,
            "max": 100,
            "step": 0.5
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "cfg_mode",
        "cfg_scale_min",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "image_to_latent",
        "latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingDynamicCFG",
    "display_name": "PreSampling (DynamicCFG)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingCascade": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "encode_vae_name": [
          [
            "None",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "decode_vae_name": [
          [
            "None",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 4,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "default": "euler_ancestral"
          }
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "default": "simple"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent_c": [
          "IMAGE"
        ],
        "latent_c": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "encode_vae_name",
        "decode_vae_name",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "image_to_latent_c",
        "latent_c"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingCascade",
    "display_name": "PreSampling (Cascade)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingLayerDiffusion": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "method": [
          [
            "Attention Injection",
            "Conv Injection",
            "Everything",
            "Foreground",
            "Background"
          ]
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "default": "euler"
          }
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ],
          {
            "default": "normal"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "blended_image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "method",
        "weight",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "image",
        "blended_image",
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingLayerDiffusion",
    "display_name": "PreSampling (LayerDiffuse)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingLayerDiffusionADDTL": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "foreground_prompt": [
          "STRING",
          {
            "default": "",
            "placeholder": "Foreground Additional Prompt",
            "multiline": true
          }
        ],
        "background_prompt": [
          "STRING",
          {
            "default": "",
            "placeholder": "Background Additional Prompt",
            "multiline": true
          }
        ],
        "blended_prompt": [
          "STRING",
          {
            "default": "",
            "placeholder": "Blended Additional Prompt",
            "multiline": true
          }
        ]
      },
      "optional": {
        "optional_fg_cond": [
          "CONDITIONING"
        ],
        "optional_bg_cond": [
          "CONDITIONING"
        ],
        "optional_blended_cond": [
          "CONDITIONING"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "foreground_prompt",
        "background_prompt",
        "blended_prompt"
      ],
      "optional": [
        "optional_fg_cond",
        "optional_bg_cond",
        "optional_blended_cond"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingLayerDiffusionADDTL",
    "display_name": "PreSampling (LayerDiffuse ADDTL)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "dynamicThresholdingFull": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "mimic_scale": [
          "FLOAT",
          {
            "default": 7,
            "min": 0,
            "max": 100,
            "step": 0.5
          }
        ],
        "threshold_percentile": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "mimic_mode": [
          [
            "Constant",
            "Linear Down",
            "Cosine Down",
            "Half Cosine Down",
            "Linear Up",
            "Cosine Up",
            "Half Cosine Up",
            "Power Up",
            "Power Down",
            "Linear Repeating",
            "Cosine Repeating",
            "Sawtooth"
          ]
        ],
        "mimic_scale_min": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.5
          }
        ],
        "cfg_mode": [
          [
            "Constant",
            "Linear Down",
            "Cosine Down",
            "Half Cosine Down",
            "Linear Up",
            "Cosine Up",
            "Half Cosine Up",
            "Power Up",
            "Power Down",
            "Linear Repeating",
            "Cosine Repeating",
            "Sawtooth"
          ]
        ],
        "cfg_scale_min": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.5
          }
        ],
        "sched_val": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "separate_feature_channels": [
          [
            "enable",
            "disable"
          ]
        ],
        "scaling_startpoint": [
          [
            "MEAN",
            "ZERO"
          ]
        ],
        "variability_measure": [
          [
            "AD",
            "STD"
          ]
        ],
        "interpolate_phi": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "mimic_scale",
        "threshold_percentile",
        "mimic_mode",
        "mimic_scale_min",
        "cfg_mode",
        "cfg_scale_min",
        "sched_val",
        "separate_feature_channels",
        "scaling_startpoint",
        "variability_measure",
        "interpolate_phi"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "dynamicThresholdingFull",
    "display_name": "DynamicThresholdingFull",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy fullkSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Preview&Choose",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save",
            "None"
          ]
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "xyPlot": [
          "XYPLOT"
        ],
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "seed",
        "model",
        "positive",
        "negative",
        "latent",
        "vae",
        "clip",
        "xyPlot",
        "image"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false],
    "output_name": [
      "pipe",
      "image",
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "seed"
    ],
    "name": "easy fullkSampler",
    "display_name": "EasyKSampler (Full)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Preview&Choose",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save",
            "None"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy kSampler",
    "display_name": "EasyKSampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerCustom": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Preview&Choose",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save",
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LATENT",
      "LATENT",
      "IMAGE"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "pipe",
      "output",
      "denoised_output",
      "image"
    ],
    "name": "easy kSamplerCustom",
    "display_name": "EasyKSampler (Custom)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerTiled": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save",
            "None"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "tile_size",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy kSamplerTiled",
    "display_name": "EasyKSampler (Tiled Decode)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerLayerDiffusion": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false, false, true],
    "output_name": [
      "pipe",
      "final_image",
      "original_image",
      "alpha"
    ],
    "name": "easy kSamplerLayerDiffusion",
    "display_name": "EasyKSampler (LayerDiffuse)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerInpainting": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "additional": [
          [
            "None",
            "InpaintModelCond",
            "Differential Diffusion",
            "Fooocus Inpaint",
            "Fooocus Inpaint + DD",
            "Brushnet Random",
            "Brushnet Random + DD",
            "Brushnet Segmentation",
            "Brushnet Segmentation + DD"
          ],
          {
            "default": "None"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "grow_mask_by",
        "image_output",
        "link_id",
        "save_prefix",
        "additional"
      ],
      "optional": [
        "model",
        "mask"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "image",
      "vae"
    ],
    "name": "easy kSamplerInpainting",
    "display_name": "EasyKSampler (Inpainting)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerDownscaleUnet": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "downscale_mode": [
          [
            "None",
            "Auto",
            "Custom"
          ],
          {
            "default": "Auto"
          }
        ],
        "block_number": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 32,
            "step": 1
          }
        ],
        "downscale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.1,
            "max": 9,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "downscale_after_skip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "upscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "downscale_mode",
        "block_number",
        "downscale_factor",
        "start_percent",
        "end_percent",
        "downscale_after_skip",
        "downscale_method",
        "upscale_method",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy kSamplerDownscaleUnet",
    "display_name": "EasyKsampler (Downscale Unet)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerSDTurbo": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy kSamplerSDTurbo",
    "display_name": "EasyKSampler (SDTurbo)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy fullCascadeKSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "encode_vae_name": [
          [
            "None",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "decode_vae_name": [
          [
            "None",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 4,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "default": "euler_ancestral"
          }
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "default": "simple"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ]
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent_c": [
          "IMAGE"
        ],
        "latent_c": [
          "LATENT"
        ],
        "model_c": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "encode_vae_name",
        "decode_vae_name",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "image_output",
        "link_id",
        "save_prefix",
        "seed"
      ],
      "optional": [
        "image_to_latent_c",
        "latent_c",
        "model_c"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "model_b",
      "latent_b"
    ],
    "name": "easy fullCascadeKSampler",
    "display_name": "EasyCascadeKsampler (Full)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy cascadeKSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model_c": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model_c"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy cascadeKSampler",
    "display_name": "EasyCascadeKsampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy unSampler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "normalize": [
          [
            "disable",
            "enable"
          ]
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_positive": [
          "CONDITIONING"
        ],
        "optional_negative": [
          "CONDITIONING"
        ],
        "optional_latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "end_at_step",
        "cfg",
        "sampler_name",
        "scheduler",
        "normalize"
      ],
      "optional": [
        "pipe",
        "optional_model",
        "optional_positive",
        "optional_negative",
        "optional_latent"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LATENT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "pipe",
      "latent"
    ],
    "name": "easy unSampler",
    "display_name": "EasyUnSampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Sampler",
    "output_node": false
  },
  "easy hiresFix": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x_Nomos_2_HQ_DRCT-L.pth",
            "4x_Nomos_8k_SCHAT-L.pth",
            "realSR_BSRGAN_DFO_s64w8_SwinIR-M_x2_GAN.pth"
          ]
        ],
        "rescale_after_model": [
          [false, true],
          {
            "default": true
          }
        ],
        "rescale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos",
            "bislerp"
          ]
        ],
        "rescale": [
          [
            "by percentage",
            "to Width/Height",
            "to longer side - maintain aspect"
          ]
        ],
        "percent": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "longer_side": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "rescale_after_model",
        "rescale_method",
        "rescale",
        "percent",
        "width",
        "height",
        "longer_side",
        "crop",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "pipe",
        "image",
        "vae"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "image",
      "latent"
    ],
    "name": "easy hiresFix",
    "display_name": "HiresFix",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Fix",
    "output_node": true
  },
  "easy preDetailerFix": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 256,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "bbox_segm_pipe": [
          "PIPE_LINE"
        ],
        "sam_pipe": [
          "PIPE_LINE"
        ],
        "optional_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "drop_size",
        "wildcard",
        "cycle"
      ],
      "optional": [
        "bbox_segm_pipe",
        "sam_pipe",
        "optional_image"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preDetailerFix",
    "display_name": "PreDetailerFix",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Fix",
    "output_node": false
  },
  "easy preMaskDetailerFix": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "mask": [
          "MASK"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 384,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "mask_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "masked only",
            "label_off": "whole"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "optional_image": [
          "IMAGE"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "mask",
        "guide_size",
        "guide_size_for",
        "max_size",
        "mask_mode",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "crop_factor",
        "drop_size",
        "refiner_ratio",
        "batch_size",
        "cycle"
      ],
      "optional": [
        "optional_image",
        "inpaint_model",
        "noise_mask_feather"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy preMaskDetailerFix",
    "display_name": "preMaskDetailerFix",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Fix",
    "output_node": false
  },
  "easy ultralyticsDetectorPipe": {
    "input": {
      "required": {
        "model_name": [
          [
            "bbox/face_yolov8m.pt",
            "bbox/hand_yolov8s.pt",
            "segm/person_yolov8m-seg.pt"
          ]
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "bbox_segm_pipe"
    ],
    "name": "easy ultralyticsDetectorPipe",
    "display_name": "UltralyticsDetector (Pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Fix",
    "output_node": false
  },
  "easy samLoaderPipe": {
    "input": {
      "required": {
        "model_name": [
          [
            "sam_vit_b_01ec64.pth"
          ]
        ],
        "device_mode": [
          [
            "AUTO",
            "Prefer GPU",
            "CPU"
          ],
          {
            "default": "AUTO"
          }
        ],
        "sam_detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "sam_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "sam_mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "device_mode",
        "sam_detection_hint",
        "sam_dilation",
        "sam_threshold",
        "sam_bbox_expansion",
        "sam_mask_hint_threshold",
        "sam_mask_hint_use_negative"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "sam_pipe"
    ],
    "name": "easy samLoaderPipe",
    "display_name": "SAMLoader (Pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Fix",
    "output_node": false
  },
  "easy detailerFix": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9.223372036854776e+18,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false, true, true],
    "output_name": [
      "pipe",
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha"
    ],
    "name": "easy detailerFix",
    "display_name": "DetailerFix",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Fix",
    "output_node": true
  },
  "easy pipeIn": {
    "input": {
      "required": {

      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "image": [
          "IMAGE"
        ],
        "xyPlot": [
          "XYPLOT"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "pipe",
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "image",
        "xyPlot"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy pipeIn",
    "display_name": "Pipe In",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeOut": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false],
    "output_name": [
      "pipe",
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "image",
      "seed"
    ],
    "name": "easy pipeOut",
    "display_name": "Pipe Out",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeEdit": {
    "input": {
      "required": {
        "clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "optional_positive": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "comfy++",
            "compel",
            "fixed attention"
          ]
        ],
        "optional_negative": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "comfy++",
            "compel",
            "fixed attention"
          ]
        ],
        "a1111_prompt_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "conditioning_mode": [
          [
            "replace",
            "concat",
            "combine",
            "average",
            "timestep"
          ],
          {
            "default": "replace"
          }
        ],
        "average_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "old_cond_start": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "old_cond_end": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "new_cond_start": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "new_cond_end": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "clip_skip",
        "optional_positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "optional_negative",
        "negative_token_normalization",
        "negative_weight_interpretation",
        "a1111_prompt_style",
        "conditioning_mode",
        "average_strength",
        "old_cond_start",
        "old_cond_end",
        "new_cond_start",
        "new_cond_end"
      ],
      "optional": [
        "pipe",
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "image"
      ],
      "hidden": [
        "my_unique_id",
        "prompt"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false],
    "output_name": [
      "pipe",
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "image"
    ],
    "name": "easy pipeEdit",
    "display_name": "Pipe Edit",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeEditPrompt": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "positive",
        "negative"
      ],
      "hidden": [
        "my_unique_id",
        "prompt"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy pipeEditPrompt",
    "display_name": "Pipe Edit Prompt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeToBasicPipe": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "BASIC_PIPE"
    ],
    "output_is_list": [false],
    "output_name": [
      "basic_pipe"
    ],
    "name": "easy pipeToBasicPipe",
    "display_name": "Pipe -\u003E BasicPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeBatchIndex": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 63
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "batch_index",
        "length"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy pipeBatchIndex",
    "display_name": "Pipe Batch Index",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy XYPlot": {
    "input": {
      "required": {
        "grid_spacing": [
          "INT",
          {
            "min": 0,
            "max": 500,
            "step": 5,
            "default": 0
          }
        ],
        "output_individuals": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ],
        "flip_xy": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ],
        "x_axis": [
          [
            "None",
            "---------------------",
            "preSampling: steps",
            "preSampling: cfg",
            "preSampling: sampler_name",
            "preSampling: scheduler",
            "preSampling: denoise",
            "preSampling: seed",
            "---------------------",
            "loader: ckpt_name",
            "loader: vae_name",
            "loader: clip_skip",
            "loader: lora_name",
            "loader: lora_model_strength",
            "loader: lora_clip_strength",
            "loader: positive",
            "loader: negative"
          ],
          {
            "default": "None"
          }
        ],
        "x_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "insert values seperated by \"; \""
          }
        ],
        "y_axis": [
          [
            "None",
            "---------------------",
            "preSampling: steps",
            "preSampling: cfg",
            "preSampling: sampler_name",
            "preSampling: scheduler",
            "preSampling: denoise",
            "preSampling: seed",
            "---------------------",
            "loader: ckpt_name",
            "loader: vae_name",
            "loader: clip_skip",
            "loader: lora_name",
            "loader: lora_model_strength",
            "loader: lora_clip_strength",
            "loader: positive",
            "loader: negative"
          ],
          {
            "default": "None"
          }
        ],
        "y_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "insert values seperated by \"; \""
          }
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "plot_dict": [
          {
            "steps": {
              "min": 1,
              "max": 100,
              "step": 1
            },
            "cfg": {
              "min": 0,
              "max": 100,
              "step": 1
            },
            "sampler_name": [
              "euler",
              "euler_cfg_pp",
              "euler_ancestral",
              "euler_ancestral_cfg_pp",
              "heun",
              "heunpp2",
              "dpm_2",
              "dpm_2_ancestral",
              "lms",
              "dpm_fast",
              "dpm_adaptive",
              "dpmpp_2s_ancestral",
              "dpmpp_2s_ancestral_cfg_pp",
              "dpmpp_sde",
              "dpmpp_sde_gpu",
              "dpmpp_2m",
              "dpmpp_2m_cfg_pp",
              "dpmpp_2m_sde",
              "dpmpp_2m_sde_gpu",
              "dpmpp_3m_sde",
              "dpmpp_3m_sde_gpu",
              "ddpm",
              "lcm",
              "ipndm",
              "ipndm_v",
              "deis",
              "res_multistep",
              "res_multistep_cfg_pp",
              "res_multistep_ancestral",
              "res_multistep_ancestral_cfg_pp",
              "gradient_estimation",
              "gradient_estimation_cfg_pp",
              "er_sde",
              "seeds_2",
              "seeds_3",
              "sa_solver",
              "sa_solver_pece",
              "ddim",
              "uni_pc",
              "uni_pc_bh2"
            ],
            "scheduler": [
              "simple",
              "sgm_uniform",
              "karras",
              "exponential",
              "ddim_uniform",
              "beta",
              "normal",
              "linear_quadratic",
              "kl_optimal"
            ],
            "denoise": {
              "min": 0,
              "max": 1,
              "step": 0.01
            },
            "seed": {
              "min": 0,
              "max": 1125899906842624
            },
            "ckpt_name": [
              "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
            ],
            "vae_name": [
              "Baked-VAE",
              "FLUX.1\\AE.safetensors",
              "FLUX.1\\AE_BF16.safetensors",
              "Wan2.1\\Wan2.1_VAE.safetensors"
            ],
            "clip_skip": {
              "min": -24,
              "max": -1,
              "step": 1
            },
            "lora_name": [
              "None",
              "FLUX.1\\80s_comedy_ita.safetensors",
              "FLUX.1\\Amateurphoto_v6.safetensors",
              "FLUX.1\\Classic_Painting_v1.safetensors",
              "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
              "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
              "FLUX.1\\Ghibli.safetensors",
              "FLUX.1\\Graffiti_Logo_Style.safetensors",
              "FLUX.1\\Provvisoria\\assexpose.safetensors",
              "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
              "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
              "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
              "FLUX.1\\Renaissance_Art_Style.safetensors",
              "FLUX.1\\Tarot_v1.0.safetensors",
              "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
              "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
              "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
              "Wan2.1\\Lightning\\High_Speed.safetensors",
              "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
              "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
              "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
              "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
              "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
              "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
            ],
            "lora_model_strength": {
              "min": -4,
              "max": 4,
              "step": 0.01
            },
            "lora_clip_strength": {
              "min": -4,
              "max": 4,
              "step": 0.01
            },
            "positive": [],
            "negative": []
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "grid_spacing",
        "output_individuals",
        "flip_xy",
        "x_axis",
        "x_values",
        "y_axis",
        "y_values"
      ],
      "optional": [
        "pipe"
      ],
      "hidden": [
        "plot_dict"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy XYPlot",
    "display_name": "XY Plot",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy XYPlotAdvanced": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "grid_spacing": [
          "INT",
          {
            "min": 0,
            "max": 500,
            "step": 5,
            "default": 0
          }
        ],
        "output_individuals": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ],
        "flip_xy": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ]
      },
      "optional": {
        "X": [
          "X_Y"
        ],
        "Y": [
          "X_Y"
        ],
        "font": [
          [
            "None",
            "Alef-Bold.ttf",
            "Alef-Regular.ttf",
            "Amiri-Bold.ttf",
            "Amiri-BoldItalic.ttf",
            "Amiri-Italic.ttf",
            "Amiri-Regular.ttf",
            "AmiriQuran.ttf",
            "AniMe Vision - MB_EN Regular.ttf",
            "arial.ttf",
            "arialbd.ttf",
            "arialbi.ttf",
            "ariali.ttf",
            "ariblk.ttf",
            "bahnschrift.ttf",
            "Caladea-Bold.ttf",
            "Caladea-BoldItalic.ttf",
            "Caladea-Italic.ttf",
            "Caladea-Regular.ttf",
            "calibri.ttf",
            "calibrib.ttf",
            "calibrii.ttf",
            "calibril.ttf",
            "calibrili.ttf",
            "calibriz.ttf",
            "cambriab.ttf",
            "cambriai.ttf",
            "cambriaz.ttf",
            "Candara.ttf",
            "Candarab.ttf",
            "Candarai.ttf",
            "Candaral.ttf",
            "Candarali.ttf",
            "Candaraz.ttf",
            "Carlito-Bold.ttf",
            "Carlito-BoldItalic.ttf",
            "Carlito-Italic.ttf",
            "Carlito-Regular.ttf",
            "CascadiaCode.ttf",
            "CascadiaMono.ttf",
            "comic.ttf",
            "comicbd.ttf",
            "comici.ttf",
            "comicz.ttf",
            "consola.ttf",
            "consolab.ttf",
            "consolai.ttf",
            "consolaz.ttf",
            "constan.ttf",
            "constanb.ttf",
            "constani.ttf",
            "constanz.ttf",
            "corbel.ttf",
            "corbelb.ttf",
            "corbeli.ttf",
            "corbell.ttf",
            "corbelli.ttf",
            "corbelz.ttf",
            "cour.ttf",
            "courbd.ttf",
            "courbi.ttf",
            "couri.ttf",
            "DavidCLM-Bold.ttf",
            "DavidCLM-BoldItalic.ttf",
            "DavidCLM-Medium.ttf",
            "DavidCLM-MediumItalic.ttf",
            "DavidLibre-Bold.ttf",
            "DavidLibre-Regular.ttf",
            "DejaVuMathTeXGyre.ttf",
            "DejaVuSans-Bold.ttf",
            "DejaVuSans-BoldOblique.ttf",
            "DejaVuSans-ExtraLight.ttf",
            "DejaVuSans-Oblique.ttf",
            "DejaVuSans.ttf",
            "DejaVuSansCondensed-Bold.ttf",
            "DejaVuSansCondensed-BoldOblique.ttf",
            "DejaVuSansCondensed-Oblique.ttf",
            "DejaVuSansCondensed.ttf",
            "DejaVuSansMono-Bold.ttf",
            "DejaVuSansMono-BoldOblique.ttf",
            "DejaVuSansMono-Oblique.ttf",
            "DejaVuSansMono.ttf",
            "DejaVuSerif-Bold.ttf",
            "DejaVuSerif-BoldItalic.ttf",
            "DejaVuSerif-Italic.ttf",
            "DejaVuSerif.ttf",
            "DejaVuSerifCondensed-Bold.ttf",
            "DejaVuSerifCondensed-BoldItalic.ttf",
            "DejaVuSerifCondensed-Italic.ttf",
            "DejaVuSerifCondensed.ttf",
            "ebrima.ttf",
            "ebrimabd.ttf",
            "framd.ttf",
            "framdit.ttf",
            "Gabriola.ttf",
            "gadugi.ttf",
            "gadugib.ttf",
            "GenBasB.ttf",
            "GenBasBI.ttf",
            "GenBasI.ttf",
            "GenBasR.ttf",
            "GenBkBasB.ttf",
            "GenBkBasBI.ttf",
            "GenBkBasI.ttf",
            "GenBkBasR.ttf",
            "georgia.ttf",
            "georgiab.ttf",
            "georgiai.ttf",
            "georgiaz.ttf",
            "himalaya.ttf",
            "impact.ttf",
            "Inkfree.ttf",
            "javatext.ttf",
            "LatoWeb-Bold.ttf",
            "LatoWeb-BoldItalic.ttf",
            "LatoWeb-Italic.ttf",
            "LatoWeb-Light.ttf",
            "LatoWeb-LightItalic.ttf",
            "LatoWeb-Regular.ttf",
            "LatoWeb-Semibold.ttf",
            "LatoWeb-SemiboldItalic.ttf",
            "LeelaUIb.ttf",
            "LeelawUI.ttf",
            "LeelUIsl.ttf",
            "LiberationMono-Bold.ttf",
            "LiberationMono-BoldItalic.ttf",
            "LiberationMono-Italic.ttf",
            "LiberationMono-Regular.ttf",
            "LiberationSans-Bold.ttf",
            "LiberationSans-BoldItalic.ttf",
            "LiberationSans-Italic.ttf",
            "LiberationSans-Regular.ttf",
            "LiberationSansNarrow-Bold.ttf",
            "LiberationSansNarrow-BoldItalic.ttf",
            "LiberationSansNarrow-Italic.ttf",
            "LiberationSansNarrow-Regular.ttf",
            "LiberationSerif-Bold.ttf",
            "LiberationSerif-BoldItalic.ttf",
            "LiberationSerif-Italic.ttf",
            "LiberationSerif-Regular.ttf",
            "LinBiolinum_RB_G.ttf",
            "LinBiolinum_RI_G.ttf",
            "LinBiolinum_R_G.ttf",
            "LinLibertine_DR_G.ttf",
            "LinLibertine_RBI_G.ttf",
            "LinLibertine_RB_G.ttf",
            "LinLibertine_RI_G.ttf",
            "LinLibertine_RZI_G.ttf",
            "LinLibertine_RZ_G.ttf",
            "LinLibertine_R_G.ttf",
            "lucon.ttf",
            "l_10646.ttf",
            "malgun.ttf",
            "malgunbd.ttf",
            "malgunsl.ttf",
            "marlett.ttf",
            "micross.ttf",
            "MiriamMonoCLM-Bold.ttf",
            "MiriamMonoCLM-BoldOblique.ttf",
            "MiriamMonoCLM-Book.ttf",
            "MiriamMonoCLM-BookOblique.ttf",
            "mmrtext.ttf",
            "mmrtextb.ttf",
            "monbaiti.ttf",
            "msyi.ttf",
            "mvboli.ttf",
            "NotoKufiArabic-Bold.ttf",
            "NotoKufiArabic-Regular.ttf",
            "NotoNaskhArabic-Bold.ttf",
            "NotoNaskhArabic-Regular.ttf",
            "NotoSans-Bold.ttf",
            "NotoSans-BoldItalic.ttf",
            "NotoSans-Italic.ttf",
            "NotoSans-Regular.ttf",
            "NotoSansArabic-Bold.ttf",
            "NotoSansArabic-Regular.ttf",
            "NotoSansArmenian-Bold.ttf",
            "NotoSansArmenian-Regular.ttf",
            "NotoSansGeorgian-Bold.ttf",
            "NotoSansGeorgian-Regular.ttf",
            "NotoSansHebrew-Bold.ttf",
            "NotoSansHebrew-Regular.ttf",
            "NotoSansLao-Bold.ttf",
            "NotoSansLao-Regular.ttf",
            "NotoSansLisu-Bold.ttf",
            "NotoSansLisu-Regular.ttf",
            "NotoSerif-Bold.ttf",
            "NotoSerif-BoldItalic.ttf",
            "NotoSerif-Italic.ttf",
            "NotoSerif-Regular.ttf",
            "NotoSerifArmenian-Bold.ttf",
            "NotoSerifArmenian-Regular.ttf",
            "NotoSerifGeorgian-Bold.ttf",
            "NotoSerifGeorgian-Regular.ttf",
            "NotoSerifHebrew-Bold.ttf",
            "NotoSerifHebrew-Regular.ttf",
            "NotoSerifLao-Bold.ttf",
            "NotoSerifLao-Regular.ttf",
            "ntailu.ttf",
            "ntailub.ttf",
            "opens___.ttf",
            "pala.ttf",
            "palab.ttf",
            "palabi.ttf",
            "palai.ttf",
            "phagspa.ttf",
            "phagspab.ttf",
            "ReemKufi-Bold.ttf",
            "ReemKufi-Regular.ttf",
            "ReemKufi.ttf",
            "Rubik-Bold.ttf",
            "Rubik-BoldItalic.ttf",
            "Rubik-Italic.ttf",
            "Rubik-Regular.ttf",
            "SansSerifCollection.ttf",
            "Scheherazade-Bold.ttf",
            "Scheherazade-Regular.ttf",
            "segmdl2.ttf",
            "SegoeIcons.ttf",
            "segoepr.ttf",
            "segoeprb.ttf",
            "segoesc.ttf",
            "segoescb.ttf",
            "segoeui.ttf",
            "segoeuib.ttf",
            "segoeuii.ttf",
            "segoeuil.ttf",
            "segoeuisl.ttf",
            "segoeuiz.ttf",
            "seguibl.ttf",
            "seguibli.ttf",
            "seguiemj.ttf",
            "seguihis.ttf",
            "seguili.ttf",
            "seguisb.ttf",
            "seguisbi.ttf",
            "seguisli.ttf",
            "seguisym.ttf",
            "SegUIVar.ttf",
            "simsunb.ttf",
            "SimsunExtG.ttf",
            "SitkaVF-Italic.ttf",
            "SitkaVF.ttf",
            "sylfaen.ttf",
            "symbol.ttf",
            "tahoma.ttf",
            "tahomabd.ttf",
            "taile.ttf",
            "taileb.ttf",
            "times.ttf",
            "timesbd.ttf",
            "timesbi.ttf",
            "timesi.ttf",
            "trebuc.ttf",
            "trebucbd.ttf",
            "trebucbi.ttf",
            "trebucit.ttf",
            "Tungsten-Semibold.ttf",
            "unispace bd.ttf",
            "verdana.ttf",
            "verdanab.ttf",
            "verdanai.ttf",
            "verdanaz.ttf",
            "Vermin Vibes 2 Soft.ttf",
            "webdings.ttf",
            "wingding.ttf",
            "ZWAdobeF.TTF",
            "Agdasima-Bold.ttf",
            "Agdasima-Regular.ttf",
            "Anton-Regular.ttf",
            "BigShouldersStencilText-VariableFont_wght.ttf",
            "BodaciousDemibold-0ng9.ttf",
            "BreitkopfFraktur.ttf",
            "CASPER.TTF",
            "Casps2.ttf",
            "CHILLER.TTF",
            "ChristmasSparkle_PERSONAL.ttf",
            "Comica BD Bold.ttf",
            "Comica BD.ttf",
            "digistrip.ttf",
            "digistrip_0.ttf",
            "digistrip_i.ttf",
            "Doto-VariableFont_ROND,wght.ttf",
            "EBGaramond-VariableFont_wght.ttf",
            "Iceberg-Regular.ttf",
            "JMH ROCAMBOLE ITALIC.ttf",
            "JMH ROCAMBOLE.ttf",
            "Kindergarten Cam.ttf",
            "Legionary.ttf",
            "LegionaryCondensed.ttf",
            "manbow lines.ttf",
            "manbow solid.ttf",
            "mangat.ttf",
            "mangatb.ttf",
            "mangati.ttf",
            "OdibeeSans-Regular.ttf",
            "Perfect DOS VGA 437 Win.ttf",
            "Perfect DOS VGA 437.ttf",
            "Plateia Bold.ttf",
            "ProtestGuerrilla-Regular.ttf",
            "rage italic.ttf",
            "ReenieBeanie-Regular.ttf",
            "Roboto-Italic-VariableFont_wdth,wght.ttf",
            "Roboto-VariableFont_wdth,wght.ttf",
            "Soviet2.ttf",
            "Soviet23D.ttf",
            "Soviet23Di.ttf",
            "Soviet2b.ttf",
            "Soviet2be.ttf",
            "Soviet2bei.ttf",
            "Soviet2bi.ttf",
            "Soviet2e.ttf",
            "Soviet2e3D.ttf",
            "Soviet2e3Di.ttf",
            "Soviet2ee.ttf",
            "Soviet2eei.ttf",
            "Soviet2ei.ttf",
            "Soviet2i.ttf"
          ]
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "grid_spacing",
        "output_individuals",
        "flip_xy"
      ],
      "optional": [
        "X",
        "Y",
        "font"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [false],
    "output_name": [
      "pipe"
    ],
    "name": "easy XYPlotAdvanced",
    "display_name": "XY Plot Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy XYInputs: Seeds++ Batch": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 50
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Seeds++ Batch",
    "display_name": "XY Inputs: Seeds++ Batch //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Steps": {
    "input": {
      "required": {
        "target_parameter": [
          [
            "steps",
            "start_at_step",
            "end_at_step"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_step": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "last_step": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "first_start_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "last_start_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "first_end_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "last_end_step": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_parameter",
        "batch_count",
        "first_step",
        "last_step",
        "first_start_step",
        "last_start_step",
        "first_end_step",
        "last_end_step"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Steps",
    "display_name": "XY Inputs: Steps //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: CFG Scale": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_cfg": [
          "FLOAT",
          {
            "default": 7,
            "min": 0,
            "max": 100
          }
        ],
        "last_cfg": [
          "FLOAT",
          {
            "default": 9,
            "min": 0,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_cfg",
        "last_cfg"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: CFG Scale",
    "display_name": "XY Inputs: CFG Scale //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: FluxGuidance": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_guidance": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100
          }
        ],
        "last_guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_guidance",
        "last_guidance"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: FluxGuidance",
    "display_name": "XY Inputs: Flux Guidance //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Sampler/Scheduler": {
    "input": {
      "required": {
        "target_parameter": [
          [
            "sampler",
            "scheduler",
            "sampler & scheduler"
          ]
        ],
        "input_count": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 30,
            "step": 1
          }
        ],
        "sampler_1": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_1": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_2": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_2": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_3": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_3": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_4": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_4": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_5": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_5": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_6": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_6": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_7": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_7": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_8": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_8": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_9": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_9": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_10": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_10": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_11": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_11": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_12": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_12": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_13": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_13": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_14": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_14": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_15": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_15": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_16": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_16": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_17": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_17": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_18": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_18": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_19": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_19": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_20": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_20": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_21": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_21": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_22": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_22": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_23": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_23": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_24": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_24": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_25": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_25": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_26": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_26": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_27": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_27": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_28": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_28": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_29": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_29": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_30": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_30": [
          [
            "None",
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "target_parameter",
        "input_count",
        "sampler_1",
        "scheduler_1",
        "sampler_2",
        "scheduler_2",
        "sampler_3",
        "scheduler_3",
        "sampler_4",
        "scheduler_4",
        "sampler_5",
        "scheduler_5",
        "sampler_6",
        "scheduler_6",
        "sampler_7",
        "scheduler_7",
        "sampler_8",
        "scheduler_8",
        "sampler_9",
        "scheduler_9",
        "sampler_10",
        "scheduler_10",
        "sampler_11",
        "scheduler_11",
        "sampler_12",
        "scheduler_12",
        "sampler_13",
        "scheduler_13",
        "sampler_14",
        "scheduler_14",
        "sampler_15",
        "scheduler_15",
        "sampler_16",
        "scheduler_16",
        "sampler_17",
        "scheduler_17",
        "sampler_18",
        "scheduler_18",
        "sampler_19",
        "scheduler_19",
        "sampler_20",
        "scheduler_20",
        "sampler_21",
        "scheduler_21",
        "sampler_22",
        "scheduler_22",
        "sampler_23",
        "scheduler_23",
        "sampler_24",
        "scheduler_24",
        "sampler_25",
        "scheduler_25",
        "sampler_26",
        "scheduler_26",
        "sampler_27",
        "scheduler_27",
        "sampler_28",
        "scheduler_28",
        "sampler_29",
        "scheduler_29",
        "sampler_30",
        "scheduler_30"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Sampler/Scheduler",
    "display_name": "XY Inputs: Sampler/Scheduler //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Denoise": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.1
          }
        ],
        "last_denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_denoise",
        "last_denoise"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Denoise",
    "display_name": "XY Inputs: Denoise //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Checkpoint": {
    "input": {
      "required": {
        "input_mode": [
          [
            "Ckpt Names",
            "Ckpt Names+ClipSkip",
            "Ckpt Names+ClipSkip+VAE"
          ]
        ],
        "ckpt_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "ckpt_name_1": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_1": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_1": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_2": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_2": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_2": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_3": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_3": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_3": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_4": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_4": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_4": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_5": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_5": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_5": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_6": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_6": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_6": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_7": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_7": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_7": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_8": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_8": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_8": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_9": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_9": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_9": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "ckpt_name_10": [
          [
            "None",
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "clip_skip_10": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_10": [
          [
            "Baked VAE",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "ckpt_count",
        "ckpt_name_1",
        "clip_skip_1",
        "vae_name_1",
        "ckpt_name_2",
        "clip_skip_2",
        "vae_name_2",
        "ckpt_name_3",
        "clip_skip_3",
        "vae_name_3",
        "ckpt_name_4",
        "clip_skip_4",
        "vae_name_4",
        "ckpt_name_5",
        "clip_skip_5",
        "vae_name_5",
        "ckpt_name_6",
        "clip_skip_6",
        "vae_name_6",
        "ckpt_name_7",
        "clip_skip_7",
        "vae_name_7",
        "ckpt_name_8",
        "clip_skip_8",
        "vae_name_8",
        "ckpt_name_9",
        "clip_skip_9",
        "vae_name_9",
        "ckpt_name_10",
        "clip_skip_10",
        "vae_name_10"
      ],
      "optional": [
        "optional_lora_stack"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Checkpoint",
    "display_name": "XY Inputs: Checkpoint //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Lora": {
    "input": {
      "required": {
        "input_mode": [
          [
            "Lora Names",
            "Lora Names+Weights"
          ]
        ],
        "lora_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "model_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_1": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_1": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_1": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_2": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_2": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_2": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_3": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_3": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_3": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_4": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_4": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_4": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_5": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_5": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_5": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_6": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_6": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_6": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_7": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_7": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_7": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_8": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_8": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_8": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_9": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_9": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_9": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_name_10": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "model_str_10": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "clip_str_10": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "display_trigger_word": [
          "BOOLEAN",
          {
            "display_trigger_word": true,
            "tooltip": "Trigger words showing lora model pass through the model's metadata, but not necessarily accurately."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "lora_count",
        "model_strength",
        "clip_strength",
        "lora_name_1",
        "model_str_1",
        "clip_str_1",
        "lora_name_2",
        "model_str_2",
        "clip_str_2",
        "lora_name_3",
        "model_str_3",
        "clip_str_3",
        "lora_name_4",
        "model_str_4",
        "clip_str_4",
        "lora_name_5",
        "model_str_5",
        "clip_str_5",
        "lora_name_6",
        "model_str_6",
        "clip_str_6",
        "lora_name_7",
        "model_str_7",
        "clip_str_7",
        "lora_name_8",
        "model_str_8",
        "clip_str_8",
        "lora_name_9",
        "model_str_9",
        "clip_str_9",
        "lora_name_10",
        "model_str_10",
        "clip_str_10"
      ],
      "optional": [
        "optional_lora_stack",
        "display_trigger_word"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Lora",
    "display_name": "XY Inputs: Lora //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: ModelMergeBlocks": {
    "input": {
      "required": {
        "ckpt_name_1": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "ckpt_name_2": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "vae_use": [
          [
            "Use Model 1",
            "Use Model 2",
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ],
          {
            "default": "Use Model 1"
          }
        ],
        "preset": [
          [
            "Preset",
            "MMB-ALL:1,1,1",
            "MMB-IN:1,0,0",
            "MMB-MID:0,1,0",
            "MMB-OUT:0,0,1",
            "MMB-INMID:1,1,0",
            "MMB-INOUT:1,0,1",
            "MMB-MIDOUT:0,1,1",
            "MMB-NONE:0,0,0",
            "@MMBN-FULL-TEST:27"
          ],
          {
            "default": "preset"
          }
        ],
        "values": [
          "STRING",
          {
            "default": "1,0,0; \n0,1,0; \n0,0,1; \n1,1,0; \n1,0,1; \n0,1,1; ",
            "multiline": true,
            "placeholder": "Support 2 methods:\n\n1.input, middle, out in same line and insert values seperated by \"; \"\n\n2.model merge block number seperated by \", \" in same line and insert values seperated by \"; \""
          }
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name_1",
        "ckpt_name_2",
        "vae_use",
        "preset",
        "values"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: ModelMergeBlocks",
    "display_name": "XY Inputs: ModelMergeBlocks //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: PromptSR": {
    "input": {
      "required": {
        "target_prompt": [
          [
            "positive",
            "negative"
          ]
        ],
        "search_txt": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_all_text": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "replace_count": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 29
          }
        ],
        "replace_1": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_1"
          }
        ],
        "replace_2": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_2"
          }
        ],
        "replace_3": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_3"
          }
        ],
        "replace_4": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_4"
          }
        ],
        "replace_5": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_5"
          }
        ],
        "replace_6": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_6"
          }
        ],
        "replace_7": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_7"
          }
        ],
        "replace_8": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_8"
          }
        ],
        "replace_9": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_9"
          }
        ],
        "replace_10": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_10"
          }
        ],
        "replace_11": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_11"
          }
        ],
        "replace_12": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_12"
          }
        ],
        "replace_13": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_13"
          }
        ],
        "replace_14": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_14"
          }
        ],
        "replace_15": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_15"
          }
        ],
        "replace_16": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_16"
          }
        ],
        "replace_17": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_17"
          }
        ],
        "replace_18": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_18"
          }
        ],
        "replace_19": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_19"
          }
        ],
        "replace_20": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_20"
          }
        ],
        "replace_21": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_21"
          }
        ],
        "replace_22": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_22"
          }
        ],
        "replace_23": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_23"
          }
        ],
        "replace_24": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_24"
          }
        ],
        "replace_25": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_25"
          }
        ],
        "replace_26": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_26"
          }
        ],
        "replace_27": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_27"
          }
        ],
        "replace_28": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_28"
          }
        ],
        "replace_29": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_29"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_prompt",
        "search_txt",
        "replace_all_text",
        "replace_count",
        "replace_1",
        "replace_2",
        "replace_3",
        "replace_4",
        "replace_5",
        "replace_6",
        "replace_7",
        "replace_8",
        "replace_9",
        "replace_10",
        "replace_11",
        "replace_12",
        "replace_13",
        "replace_14",
        "replace_15",
        "replace_16",
        "replace_17",
        "replace_18",
        "replace_19",
        "replace_20",
        "replace_21",
        "replace_22",
        "replace_23",
        "replace_24",
        "replace_25",
        "replace_26",
        "replace_27",
        "replace_28",
        "replace_29"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: PromptSR",
    "display_name": "XY Inputs: PromptSR //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: ControlNet": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ]
        ],
        "image": [
          "IMAGE"
        ],
        "target_parameter": [
          [
            "strength",
            "start_percent",
            "end_percent"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 30
          }
        ],
        "first_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "last_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "first_start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "last_start_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "first_end_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "last_end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name",
        "image",
        "target_parameter",
        "batch_count",
        "first_strength",
        "last_strength",
        "first_start_percent",
        "last_start_percent",
        "first_end_percent",
        "last_end_percent",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: ControlNet",
    "display_name": "XY Inputs: Controlnet //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: PositiveCond": {
    "input": {
      "optional": {
        "positive_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "positive_4": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "optional": [
        "positive_1",
        "positive_2",
        "positive_3",
        "positive_4"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: PositiveCond",
    "display_name": "XY Inputs: PosCond //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: PositiveCondList": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: PositiveCondList",
    "display_name": "XY Inputs: PosCondList //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: NegativeCond": {
    "input": {
      "optional": {
        "negative_1": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "negative_4": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "optional": [
        "negative_1",
        "negative_2",
        "negative_3",
        "negative_4"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: NegativeCond",
    "display_name": "XY Inputs: NegCond //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: NegativeCondList": {
    "input": {
      "required": {
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "negative"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [false],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: NegativeCondList",
    "display_name": "XY Inputs: NegCondList //EasyUse",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy imageInsetCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "measurement": [
          [
            "Pixels",
            "Percentage"
          ]
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "measurement",
        "left",
        "right",
        "top",
        "bottom"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageInsetCrop",
    "display_name": "ImageInsetCrop",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageCount": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "count"
    ],
    "name": "easy imageCount",
    "display_name": "ImageCount",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imagesCountInDirectory": {
    "input": {
      "required": {
        "directory": [
          "STRING"
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "limit": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "directory",
        "start_index",
        "limit"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "count"
    ],
    "name": "easy imagesCountInDirectory",
    "display_name": "imagesCountInDirectory",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width_int",
      "height_int"
    ],
    "name": "easy imageSize",
    "display_name": "ImageSize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageSizeBySide": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "side": [
          [
            "Longest",
            "Shortest"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "side"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "resolution"
    ],
    "name": "easy imageSizeBySide",
    "display_name": "ImageSize (Side)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageSizeByLongerSide": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "resolution"
    ],
    "name": "easy imageSizeByLongerSide",
    "display_name": "ImageSize (LongerSide)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imagePixelPerfect": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "resize_mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "resolution"
    ],
    "name": "easy imagePixelPerfect",
    "display_name": "ImagePixelPerfect",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageScaleDown": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageScaleDown",
    "display_name": "Image Scale Down",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageScaleDownBy": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.01,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageScaleDownBy",
    "display_name": "Image Scale Down By",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageScaleDownToSize": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "max",
            "label_off": "min"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "size",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageScaleDownToSize",
    "display_name": "Image Scale Down To Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageScaleToNormPixels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 8,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "easy imageScaleToNormPixels",
    "display_name": "ImageScaleToNormPixels",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageRatio": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "width_ratio_int",
      "height_ratio_int",
      "width_ratio_float",
      "height_ratio_float"
    ],
    "name": "easy imageRatio",
    "display_name": "ImageRatio",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageConcat": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "direction",
        "match_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageConcat",
    "display_name": "imageConcat",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageListToImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageListToImageBatch",
    "display_name": "Image List To Image Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageBatchToImageList": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [true],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageBatchToImageList",
    "display_name": "Image Batch To Image List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSplitList": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "images",
      "images",
      "images"
    ],
    "name": "easy imageSplitList",
    "display_name": "imageSplitList",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSplitGrid": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "row": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "column": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "row",
        "column"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "easy imageSplitGrid",
    "display_name": "imageSplitGrid",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imagesSplitImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "image1",
      "image2",
      "image3",
      "image4",
      "image5"
    ],
    "name": "easy imagesSplitImage",
    "display_name": "imagesSplitImage",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSplitTiles": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "overlap_ratio": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "overlap_offset": [
          "INT",
          {
            "default": 0,
            "min": -8192,
            "max": 8192,
            "step": 1
          }
        ],
        "tiles_rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "tiles_cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ]
      },
      "optional": {
        "norm": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "overlap_ratio",
        "overlap_offset",
        "tiles_rows",
        "tiles_cols"
      ],
      "optional": [
        "norm"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "OVERLAP",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "tiles",
      "masks",
      "overlap",
      "total"
    ],
    "name": "easy imageSplitTiles",
    "display_name": "imageSplitTiles",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageTilesFromBatch": {
    "input": {
      "required": {
        "tiles": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "overlap": [
          "OVERLAP"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tiles",
        "masks",
        "overlap",
        "index"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "x",
      "y"
    ],
    "name": "easy imageTilesFromBatch",
    "display_name": "imageTilesFromBatch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageCropFromMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "image_crop_multi": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "mask_crop_multi": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "bbox_smooth_alpha": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "image_crop_multi",
        "mask_crop_multi",
        "bbox_smooth_alpha"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "crop_image",
      "crop_mask",
      "bbox"
    ],
    "name": "easy imageCropFromMask",
    "display_name": "imageCropFromMask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageUncropFromBBOX": {
    "input": {
      "required": {
        "original_image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "bbox": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "use_square_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "optional_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "original_image",
        "crop_image",
        "bbox",
        "border_blending",
        "use_square_mask"
      ],
      "optional": [
        "optional_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "easy imageUncropFromBBOX",
    "display_name": "imageUncropFromBBOX",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSave": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "only_preview": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "only_preview"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy imageSave",
    "display_name": "Save Image (Simple)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageRemBg": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "rem_mode": [
          [
            "RMBG-2.0",
            "RMBG-1.4",
            "Inspyrenet",
            "BEN2"
          ],
          {
            "default": "RMBG-1.4"
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "torchscript_jit": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "add_background": [
          [
            "none",
            "white",
            "black"
          ],
          {
            "default": "none"
          }
        ],
        "refine_foreground": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "rem_mode",
        "image_output",
        "save_prefix"
      ],
      "optional": [
        "torchscript_jit",
        "add_background",
        "refine_foreground"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "easy imageRemBg",
    "display_name": "Image Remove Bg",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageChooser": {
    "input": {
      "required": {
        "mode": [
          [
            "Always Pause",
            "Keep Last Selection"
          ],
          {
            "default": "Always Pause"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mode"
      ],
      "optional": [
        "images"
      ],
      "hidden": [
        "prompt",
        "my_unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "easy imageChooser",
    "display_name": "Image Chooser",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageColorMatch": {
    "input": {
      "required": {
        "image_ref": [
          "IMAGE"
        ],
        "image_target": [
          "IMAGE"
        ],
        "method": [
          [
            "wavelet",
            "adain",
            "mkl",
            "hm",
            "reinhard",
            "mvgd",
            "hm-mvgd-hm",
            "hm-mkl-hm"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image_ref",
        "image_target",
        "method",
        "image_output",
        "save_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "easy imageColorMatch",
    "display_name": "Image Color Match",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageDetailTransfer": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "mode": [
          [
            "add",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "hard_light",
            "color_dodge",
            "color_burn",
            "difference",
            "exclusion",
            "divide"
          ],
          {
            "default": "add"
          }
        ],
        "blur_sigma": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 100,
            "step": 0.01
          }
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.001,
            "round": 0.001
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "target",
        "source",
        "mode",
        "blur_sigma",
        "blend_factor",
        "image_output",
        "save_prefix"
      ],
      "optional": [
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "easy imageDetailTransfer",
    "display_name": "Image Detail Transfer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageInterrogator": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "fast",
            "classic",
            "best",
            "negative"
          ]
        ],
        "use_lowvram": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "use_lowvram"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [true],
    "output_name": [
      "prompt"
    ],
    "name": "easy imageInterrogator",
    "display_name": "Image To Prompt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy loadImagesForLoop": {
    "input": {
      "required": {
        "directory": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "limit": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 10000
          }
        ],
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ]
      },
      "hidden": {
        "initial_value0": [
          "*"
        ],
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "start_index",
        "limit",
        "initial_value1",
        "initial_value2"
      ],
      "hidden": [
        "initial_value0",
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "FLOW_CONTROL",
      "INT",
      "IMAGE",
      "MASK",
      "STRING",
      "*",
      "*"
    ],
    "output_is_list": [false, false, false, false, false, false, false],
    "output_name": [
      "flow",
      "index",
      "image",
      "mask",
      "name",
      "value1",
      "value2"
    ],
    "name": "easy loadImagesForLoop",
    "display_name": "Load Images For Loop",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "image",
    "output_node": false
  },
  "easy loadImageBase64": {
    "input": {
      "required": {
        "base64_data": [
          "STRING",
          {
            "default": ""
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "base64_data",
        "image_output",
        "save_prefix"
      ],
      "optional": [],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "easy loadImageBase64",
    "display_name": "Load Image (Base64)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image/LoadImage",
    "output_node": true
  },
  "easy imageToBase64": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "easy imageToBase64",
    "display_name": "Image To Base64",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy joinImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "horizontal",
            "vertical"
          ],
          {
            "default": "horizontal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "easy joinImageBatch",
    "display_name": "JoinImageBatch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy humanSegmentation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "method": [
          [
            "selfie_multiclass_256x256",
            "human_parsing_lip",
            "human_parts (deeplabv3p)",
            "segformer_b3_clothes",
            "segformer_b3_fashion",
            "face_parsing"
          ]
        ],
        "confidence": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.05,
            "max": 0.95,
            "step": 0.01
          }
        ],
        "crop_multi": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "mask_components": [
          "EASY_COMBO",
          {
            "options": [
              {
                "label": "Background",
                "value": 0
              }
            ],
            "multi_select": {
              "placeholder": "select mask components",
              "chip": true,
              "max_selected_labels": 4
            }
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "method",
        "confidence",
        "crop_multi",
        "mask_components"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "image",
      "mask",
      "bbox"
    ],
    "name": "easy humanSegmentation",
    "display_name": "Human Segmentation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Segmentation",
    "output_node": false
  },
  "easy removeLocalImage": {
    "input": {
      "required": {
        "any": [
          "*"
        ],
        "file_name": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "file_name"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy removeLocalImage",
    "display_name": "Remove Local Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy makeImageForICLora": {
    "input": {
      "required": {
        "image_1": [
          "IMAGE"
        ],
        "direction": [
          [
            "top-bottom",
            "left-right"
          ],
          {
            "default": "left-right"
          }
        ],
        "pixels": [
          "INT",
          {
            "default": 0,
            "max": 16384,
            "min": 0,
            "step": 8,
            "tooltip": "The pixel of the output image is not set when it is 0"
          }
        ],
        "method": [
          [
            "uniform height",
            "uniform width",
            "auto"
          ],
          {
            "default": "auto"
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_1",
        "direction",
        "pixels",
        "method"
      ],
      "optional": [
        "image_2",
        "mask_1",
        "mask_2"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MASK",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "context_mask",
      "width",
      "height",
      "x",
      "y"
    ],
    "name": "easy makeImageForICLora",
    "display_name": "Make Image For ICLora",
    "description": "make Image for ICLora to Re-paint",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy string": {
    "input": {
      "required": {
        "value": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "string"
    ],
    "name": "easy string",
    "display_name": "String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy int": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -999999,
            "max": 999999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "int"
    ],
    "name": "easy int",
    "display_name": "Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy rangeInt": {
    "input": {
      "required": {
        "range_mode": [
          [
            "step",
            "num_steps"
          ],
          {
            "default": "step"
          }
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "stop": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "step": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "num_steps": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "end_mode": [
          [
            "Inclusive",
            "Exclusive"
          ],
          {
            "default": "Inclusive"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "range_mode",
        "start",
        "stop",
        "step",
        "num_steps",
        "end_mode"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [true, true],
    "output_name": [
      "range",
      "range_sizes"
    ],
    "name": "easy rangeInt",
    "display_name": "Range(Int)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy float": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.01,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "float"
    ],
    "name": "easy float",
    "display_name": "Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy rangeFloat": {
    "input": {
      "required": {
        "range_mode": [
          [
            "step",
            "num_steps"
          ],
          {
            "default": "step"
          }
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ],
        "stop": [
          "FLOAT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ],
        "num_steps": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "end_mode": [
          [
            "Inclusive",
            "Exclusive"
          ],
          {
            "default": "Inclusive"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "range_mode",
        "start",
        "stop",
        "step",
        "num_steps",
        "end_mode"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [true, true],
    "output_name": [
      "range",
      "range_sizes"
    ],
    "name": "easy rangeFloat",
    "display_name": "Range(Float)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy boolean": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "boolean"
    ],
    "name": "easy boolean",
    "display_name": "Boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy mathString": {
    "input": {
      "required": {
        "a": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "b": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "operation": [
          [
            "a == b",
            "a != b",
            "a IN b",
            "a MATCH REGEX(b)",
            "a BEGINSWITH b",
            "a ENDSWITH b"
          ]
        ],
        "case_sensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation",
        "case_sensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "easy mathString",
    "display_name": "Math String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Math",
    "output_node": false
  },
  "easy mathInt": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ],
        "operation": [
          [
            "add",
            "subtract",
            "multiply",
            "divide",
            "modulo",
            "power"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "easy mathInt",
    "display_name": "Math Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Math",
    "output_node": false
  },
  "easy mathFloat": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -999999999999,
            "max": 999999999999,
            "step": 0.01
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -999999999999,
            "max": 999999999999,
            "step": 0.01
          }
        ],
        "operation": [
          [
            "add",
            "subtract",
            "multiply",
            "divide",
            "modulo",
            "power"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "easy mathFloat",
    "display_name": "Math Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Math",
    "output_node": false
  },
  "easy compare": {
    "input": {
      "required": {
        "a": [
          "*",
          {
            "default": 0
          }
        ],
        "b": [
          "*",
          {
            "default": 0
          }
        ],
        "comparison": [
          [
            "a == b",
            "a != b",
            "a \u003C b",
            "a \u003E b",
            "a \u003C= b",
            "a \u003E= b"
          ],
          {
            "default": "a == b"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "comparison"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "boolean"
    ],
    "name": "easy compare",
    "display_name": "Compare",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Math",
    "output_node": false
  },
  "easy imageSwitch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "boolean"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageSwitch",
    "display_name": "Image Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Switch",
    "output_node": false
  },
  "easy textSwitch": {
    "input": {
      "required": {
        "input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "text1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ],
      "optional": [
        "text1",
        "text2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "easy textSwitch",
    "display_name": "Text Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Switch",
    "output_node": false
  },
  "easy imageIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "image0": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image1": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image2": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image3": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image4": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image5": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image6": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image7": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image8": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image9": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image10": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image11": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image12": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image13": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image14": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image15": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image16": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image17": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image18": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image19": [
          "IMAGE",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index"
      ],
      "optional": [
        "image0",
        "image1",
        "image2",
        "image3",
        "image4",
        "image5",
        "image6",
        "image7",
        "image8",
        "image9",
        "image10",
        "image11",
        "image12",
        "image13",
        "image14",
        "image15",
        "image16",
        "image17",
        "image18",
        "image19"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "easy imageIndexSwitch",
    "display_name": "Image Index Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Index Switch",
    "output_node": false
  },
  "easy textIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "text0": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text1": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text3": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text4": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text5": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text6": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text7": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text8": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text9": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text10": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text11": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text12": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text13": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text14": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text15": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text16": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text17": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text18": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text19": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index"
      ],
      "optional": [
        "text0",
        "text1",
        "text2",
        "text3",
        "text4",
        "text5",
        "text6",
        "text7",
        "text8",
        "text9",
        "text10",
        "text11",
        "text12",
        "text13",
        "text14",
        "text15",
        "text16",
        "text17",
        "text18",
        "text19"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "text"
    ],
    "name": "easy textIndexSwitch",
    "display_name": "Text Index Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Index Switch",
    "output_node": false
  },
  "easy conditioningIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "cond0": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond1": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond2": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond3": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond4": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond5": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond6": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond7": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond8": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond9": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond10": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond11": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond12": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond13": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond14": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond15": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond16": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond17": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond18": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond19": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index"
      ],
      "optional": [
        "cond0",
        "cond1",
        "cond2",
        "cond3",
        "cond4",
        "cond5",
        "cond6",
        "cond7",
        "cond8",
        "cond9",
        "cond10",
        "cond11",
        "cond12",
        "cond13",
        "cond14",
        "cond15",
        "cond16",
        "cond17",
        "cond18",
        "cond19"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "conditioning"
    ],
    "name": "easy conditioningIndexSwitch",
    "display_name": "Conditioning Index Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Index Switch",
    "output_node": false
  },
  "easy anythingIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "value0": [
          "*",
          {
            "lazy": true
          }
        ],
        "value1": [
          "*",
          {
            "lazy": true
          }
        ],
        "value2": [
          "*",
          {
            "lazy": true
          }
        ],
        "value3": [
          "*",
          {
            "lazy": true
          }
        ],
        "value4": [
          "*",
          {
            "lazy": true
          }
        ],
        "value5": [
          "*",
          {
            "lazy": true
          }
        ],
        "value6": [
          "*",
          {
            "lazy": true
          }
        ],
        "value7": [
          "*",
          {
            "lazy": true
          }
        ],
        "value8": [
          "*",
          {
            "lazy": true
          }
        ],
        "value9": [
          "*",
          {
            "lazy": true
          }
        ],
        "value10": [
          "*",
          {
            "lazy": true
          }
        ],
        "value11": [
          "*",
          {
            "lazy": true
          }
        ],
        "value12": [
          "*",
          {
            "lazy": true
          }
        ],
        "value13": [
          "*",
          {
            "lazy": true
          }
        ],
        "value14": [
          "*",
          {
            "lazy": true
          }
        ],
        "value15": [
          "*",
          {
            "lazy": true
          }
        ],
        "value16": [
          "*",
          {
            "lazy": true
          }
        ],
        "value17": [
          "*",
          {
            "lazy": true
          }
        ],
        "value18": [
          "*",
          {
            "lazy": true
          }
        ],
        "value19": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index"
      ],
      "optional": [
        "value0",
        "value1",
        "value2",
        "value3",
        "value4",
        "value5",
        "value6",
        "value7",
        "value8",
        "value9",
        "value10",
        "value11",
        "value12",
        "value13",
        "value14",
        "value15",
        "value16",
        "value17",
        "value18",
        "value19"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "value"
    ],
    "name": "easy anythingIndexSwitch",
    "display_name": "Any Index Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/Index Switch",
    "output_node": false
  },
  "easy ab": {
    "input": {
      "required": {
        "A or B": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "A",
            "label_off": "B"
          }
        ],
        "in": [
          "*"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "A or B",
        "in"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "*",
      "*"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "A",
      "B"
    ],
    "name": "easy ab",
    "display_name": "A or B",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy anythingInversedSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ],
        "in": [
          "*"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "index",
        "in"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "out0"
    ],
    "name": "easy anythingInversedSwitch",
    "display_name": "Any Inversed Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy whileLoopStart": {
    "input": {
      "required": {
        "condition": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "initial_value0": [
          "*"
        ],
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ],
        "initial_value5": [
          "*"
        ],
        "initial_value6": [
          "*"
        ],
        "initial_value7": [
          "*"
        ],
        "initial_value8": [
          "*"
        ],
        "initial_value9": [
          "*"
        ],
        "initial_value10": [
          "*"
        ],
        "initial_value11": [
          "*"
        ],
        "initial_value12": [
          "*"
        ],
        "initial_value13": [
          "*"
        ],
        "initial_value14": [
          "*"
        ],
        "initial_value15": [
          "*"
        ],
        "initial_value16": [
          "*"
        ],
        "initial_value17": [
          "*"
        ],
        "initial_value18": [
          "*"
        ],
        "initial_value19": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "condition"
      ],
      "optional": [
        "initial_value0",
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4",
        "initial_value5",
        "initial_value6",
        "initial_value7",
        "initial_value8",
        "initial_value9",
        "initial_value10",
        "initial_value11",
        "initial_value12",
        "initial_value13",
        "initial_value14",
        "initial_value15",
        "initial_value16",
        "initial_value17",
        "initial_value18",
        "initial_value19"
      ]
    },
    "output": [
      "FLOW_CONTROL",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
    "output_name": [
      "flow",
      "value0",
      "value1",
      "value2",
      "value3",
      "value4",
      "value5",
      "value6",
      "value7",
      "value8",
      "value9",
      "value10",
      "value11",
      "value12",
      "value13",
      "value14",
      "value15",
      "value16",
      "value17",
      "value18",
      "value19"
    ],
    "name": "easy whileLoopStart",
    "display_name": "While Loop Start",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/While Loop",
    "output_node": false
  },
  "easy whileLoopEnd": {
    "input": {
      "required": {
        "flow": [
          "FLOW_CONTROL",
          {
            "rawLink": true
          }
        ],
        "condition": [
          "BOOLEAN",
          {

          }
        ]
      },
      "optional": {
        "initial_value0": [
          "*"
        ],
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ],
        "initial_value5": [
          "*"
        ],
        "initial_value6": [
          "*"
        ],
        "initial_value7": [
          "*"
        ],
        "initial_value8": [
          "*"
        ],
        "initial_value9": [
          "*"
        ],
        "initial_value10": [
          "*"
        ],
        "initial_value11": [
          "*"
        ],
        "initial_value12": [
          "*"
        ],
        "initial_value13": [
          "*"
        ],
        "initial_value14": [
          "*"
        ],
        "initial_value15": [
          "*"
        ],
        "initial_value16": [
          "*"
        ],
        "initial_value17": [
          "*"
        ],
        "initial_value18": [
          "*"
        ],
        "initial_value19": [
          "*"
        ]
      },
      "hidden": {
        "dynprompt": "DYNPROMPT",
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "flow",
        "condition"
      ],
      "optional": [
        "initial_value0",
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4",
        "initial_value5",
        "initial_value6",
        "initial_value7",
        "initial_value8",
        "initial_value9",
        "initial_value10",
        "initial_value11",
        "initial_value12",
        "initial_value13",
        "initial_value14",
        "initial_value15",
        "initial_value16",
        "initial_value17",
        "initial_value18",
        "initial_value19"
      ],
      "hidden": [
        "dynprompt",
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
    "output_name": [
      "value0",
      "value1",
      "value2",
      "value3",
      "value4",
      "value5",
      "value6",
      "value7",
      "value8",
      "value9",
      "value10",
      "value11",
      "value12",
      "value13",
      "value14",
      "value15",
      "value16",
      "value17",
      "value18",
      "value19"
    ],
    "name": "easy whileLoopEnd",
    "display_name": "While Loop End",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/While Loop",
    "output_node": false
  },
  "easy forLoopStart": {
    "input": {
      "required": {
        "total": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100000,
            "step": 1
          }
        ]
      },
      "optional": {
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ],
        "initial_value5": [
          "*"
        ],
        "initial_value6": [
          "*"
        ],
        "initial_value7": [
          "*"
        ],
        "initial_value8": [
          "*"
        ],
        "initial_value9": [
          "*"
        ],
        "initial_value10": [
          "*"
        ],
        "initial_value11": [
          "*"
        ],
        "initial_value12": [
          "*"
        ],
        "initial_value13": [
          "*"
        ],
        "initial_value14": [
          "*"
        ],
        "initial_value15": [
          "*"
        ],
        "initial_value16": [
          "*"
        ],
        "initial_value17": [
          "*"
        ],
        "initial_value18": [
          "*"
        ],
        "initial_value19": [
          "*"
        ]
      },
      "hidden": {
        "initial_value0": [
          "*"
        ],
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "total"
      ],
      "optional": [
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4",
        "initial_value5",
        "initial_value6",
        "initial_value7",
        "initial_value8",
        "initial_value9",
        "initial_value10",
        "initial_value11",
        "initial_value12",
        "initial_value13",
        "initial_value14",
        "initial_value15",
        "initial_value16",
        "initial_value17",
        "initial_value18",
        "initial_value19"
      ],
      "hidden": [
        "initial_value0",
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "FLOW_CONTROL",
      "INT",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
    "output_name": [
      "flow",
      "index",
      "value1",
      "value2",
      "value3",
      "value4",
      "value5",
      "value6",
      "value7",
      "value8",
      "value9",
      "value10",
      "value11",
      "value12",
      "value13",
      "value14",
      "value15",
      "value16",
      "value17",
      "value18",
      "value19"
    ],
    "name": "easy forLoopStart",
    "display_name": "For Loop Start",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/For Loop",
    "output_node": false
  },
  "easy forLoopEnd": {
    "input": {
      "required": {
        "flow": [
          "FLOW_CONTROL",
          {
            "rawLink": true
          }
        ]
      },
      "optional": {
        "initial_value1": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value2": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value3": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value4": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value5": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value6": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value7": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value8": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value9": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value10": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value11": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value12": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value13": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value14": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value15": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value16": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value17": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value18": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value19": [
          "*",
          {
            "rawLink": true
          }
        ]
      },
      "hidden": {
        "dynprompt": "DYNPROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "flow"
      ],
      "optional": [
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4",
        "initial_value5",
        "initial_value6",
        "initial_value7",
        "initial_value8",
        "initial_value9",
        "initial_value10",
        "initial_value11",
        "initial_value12",
        "initial_value13",
        "initial_value14",
        "initial_value15",
        "initial_value16",
        "initial_value17",
        "initial_value18",
        "initial_value19"
      ],
      "hidden": [
        "dynprompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
    "output_name": [
      "value1",
      "value2",
      "value3",
      "value4",
      "value5",
      "value6",
      "value7",
      "value8",
      "value9",
      "value10",
      "value11",
      "value12",
      "value13",
      "value14",
      "value15",
      "value16",
      "value17",
      "value18",
      "value19"
    ],
    "name": "easy forLoopEnd",
    "display_name": "For Loop End",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic/For Loop",
    "output_node": false
  },
  "easy blocker": {
    "input": {
      "required": {
        "continue": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "in": [
          "*",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "continue",
        "in"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "out"
    ],
    "name": "easy blocker",
    "display_name": "Blocker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy ifElse": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN"
        ],
        "on_true": [
          "*",
          {
            "lazy": true
          }
        ],
        "on_false": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean",
        "on_true",
        "on_false"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "easy ifElse",
    "display_name": "If else",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy isMaskEmpty": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "mask"
      ],
      "optional": []
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "boolean"
    ],
    "name": "easy isMaskEmpty",
    "display_name": "Is Mask Empty",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy isNone": {
    "input": {
      "required": {
        "any": [
          "*"
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "any"
      ],
      "optional": []
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "boolean"
    ],
    "name": "easy isNone",
    "display_name": "Is None",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy isSDXL": {
    "input": {
      "required": {

      },
      "optional": {
        "optional_pipe": [
          "PIPE_LINE"
        ],
        "optional_clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "optional_pipe",
        "optional_clip"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "boolean"
    ],
    "name": "easy isSDXL",
    "display_name": "Is SDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy isFileExist": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "default": ""
          }
        ],
        "file_extension": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "file_path",
        "file_name",
        "file_extension"
      ],
      "optional": []
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "boolean"
    ],
    "name": "easy isFileExist",
    "display_name": "Is File Exist",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy outputToList": {
    "input": {
      "required": {
        "tuple": [
          "*",
          {

          }
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "tuple"
      ],
      "optional": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [true],
    "output_name": [
      "list"
    ],
    "name": "easy outputToList",
    "display_name": "Output to List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy pixels": {
    "input": {
      "required": {
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.001,
            "max": 10,
            "step": 0.001
          }
        ],
        "flip_w/h": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "width",
        "height",
        "scale",
        "flip_w/h"
      ]
    },
    "output": [
      "INT",
      "INT",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "width_norm",
      "height_norm",
      "width",
      "height",
      "scale_factor"
    ],
    "name": "easy pixels",
    "display_name": "Pixels W/H Norm",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy xyAny": {
    "input": {
      "required": {
        "X": [
          "*",
          {

          }
        ],
        "Y": [
          "*",
          {

          }
        ],
        "direction": [
          [
            "horizontal",
            "vertical"
          ],
          {
            "default": "horizontal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "X",
        "Y",
        "direction"
      ]
    },
    "output": [
      "*",
      "*"
    ],
    "output_is_list": [true, true],
    "output_name": [
      "X",
      "Y"
    ],
    "name": "easy xyAny",
    "display_name": "XY Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy lengthAnything": {
    "input": {
      "required": {
        "any": [
          "*",
          {

          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "any"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "length"
    ],
    "name": "easy lengthAnything",
    "display_name": "Length Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy indexAnything": {
    "input": {
      "required": {
        "any": [
          "*",
          {

          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000000,
            "step": 1
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "any",
        "index"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "out"
    ],
    "name": "easy indexAnything",
    "display_name": "Index Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy batchAnything": {
    "input": {
      "required": {
        "any_1": [
          "*",
          {

          }
        ],
        "any_2": [
          "*",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any_1",
        "any_2"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "batch"
    ],
    "name": "easy batchAnything",
    "display_name": "Batch Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy convertAnything": {
    "input": {
      "required": {
        "*": [
          "*"
        ],
        "output_type": [
          [
            "string",
            "int",
            "float",
            "boolean"
          ],
          {
            "default": "string"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "*",
        "output_type"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "easy convertAnything",
    "display_name": "Convert Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy showAnything": {
    "input": {
      "required": {

      },
      "optional": {
        "anything": [
          "*",
          {

          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "anything"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "output"
    ],
    "name": "easy showAnything",
    "display_name": "Show Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy showTensorShape": {
    "input": {
      "required": {
        "tensor": [
          "*"
        ]
      },
      "optional": {

      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "tensor"
      ],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy showTensorShape",
    "display_name": "Show Tensor Shape",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy clearCacheKey": {
    "input": {
      "required": {
        "anything": [
          "*",
          {

          }
        ],
        "cache_key": [
          "STRING",
          {
            "default": "*"
          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "anything",
        "cache_key"
      ],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "output"
    ],
    "name": "easy clearCacheKey",
    "display_name": "Clear Cache Key",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy clearCacheAll": {
    "input": {
      "required": {
        "anything": [
          "*",
          {

          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "anything"
      ],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "output"
    ],
    "name": "easy clearCacheAll",
    "display_name": "Clear Cache All",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy cleanGpuUsed": {
    "input": {
      "required": {
        "anything": [
          "*",
          {

          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "anything"
      ],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "output"
    ],
    "name": "easy cleanGpuUsed",
    "display_name": "Clean VRAM Used",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy saveText": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "output_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "output_file_path",
        "file_name",
        "file_extension",
        "overwrite"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "STRING",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "text",
      "image"
    ],
    "name": "easy saveText",
    "display_name": "Save Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy sleep": {
    "input": {
      "required": {
        "any": [
          "*",
          {

          }
        ],
        "delay": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1000000,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "delay"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "out"
    ],
    "name": "easy sleep",
    "display_name": "Sleep",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy joyCaption2API": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "do_sample": [
          [true, false]
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 2,
            "step": 0.01,
            "round": 0.001,
            "display": "number"
          }
        ],
        "max_tokens": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 512,
            "step": 16,
            "display": "number"
          }
        ],
        "caption_type": [
          [
            "Descriptive",
            "Descriptive (Informal)",
            "Training Prompt",
            "MidJourney",
            "Booru tag list",
            "Booru-like tag list",
            "Art Critic",
            "Product Listing",
            "Social Media Post"
          ]
        ],
        "caption_length": [
          [
            "any",
            "very short",
            "short",
            "medium-length",
            "long",
            "very long",
            "20",
            "30",
            "40",
            "50",
            "60",
            "70",
            "80",
            "90",
            "100",
            "110",
            "120",
            "130",
            "140",
            "150",
            "160",
            "170",
            "180",
            "190",
            "200",
            "210",
            "220",
            "230",
            "240",
            "250",
            "260"
          ]
        ],
        "extra_options": [
          "STRING",
          {
            "placeholder": "Extra options(e.g):\nIf there is a person/character in the image you must refer to them as {name}.",
            "tooltip": "Extra options for the model",
            "multiline": true
          }
        ],
        "name_input": [
          "STRING",
          {
            "default": "",
            "tooltip": "Name input is only used if an Extra Option is selected that requires it."
          }
        ],
        "custom_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "apikey_override": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "Override the API key in the local config"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "do_sample",
        "temperature",
        "max_tokens",
        "caption_type",
        "caption_length",
        "extra_options",
        "name_input",
        "custom_prompt"
      ],
      "optional": [
        "apikey_override"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "caption"
    ],
    "name": "easy joyCaption2API",
    "display_name": "JoyCaption2 (BizyAIR)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/API",
    "output_node": false
  },
  "easy joyCaption3API": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "do_sample": [
          [true, false]
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 2,
            "step": 0.01,
            "round": 0.001,
            "display": "number"
          }
        ],
        "max_tokens": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 512,
            "step": 16,
            "display": "number"
          }
        ],
        "caption_type": [
          [
            "Descriptive",
            "Descriptive (Informal)",
            "Training Prompt",
            "MidJourney",
            "Booru tag list",
            "Booru-like tag list",
            "Art Critic",
            "Product Listing",
            "Social Media Post"
          ]
        ],
        "caption_length": [
          [
            "any",
            "very short",
            "short",
            "medium-length",
            "long",
            "very long",
            "20",
            "30",
            "40",
            "50",
            "60",
            "70",
            "80",
            "90",
            "100",
            "110",
            "120",
            "130",
            "140",
            "150",
            "160",
            "170",
            "180",
            "190",
            "200",
            "210",
            "220",
            "230",
            "240",
            "250",
            "260"
          ]
        ],
        "extra_options": [
          "STRING",
          {
            "placeholder": "Extra options(e.g):\nIf there is a person/character in the image you must refer to them as {name}.",
            "tooltip": "Extra options for the model",
            "multiline": true
          }
        ],
        "name_input": [
          "STRING",
          {
            "default": "",
            "tooltip": "Name input is only used if an Extra Option is selected that requires it."
          }
        ],
        "custom_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "apikey_override": [
          "STRING",
          {
            "default": "",
            "forceInput": true,
            "tooltip": "Override the API key in the local config"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "do_sample",
        "temperature",
        "max_tokens",
        "caption_type",
        "caption_length",
        "extra_options",
        "name_input",
        "custom_prompt"
      ],
      "optional": [
        "apikey_override"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "caption"
    ],
    "name": "easy joyCaption3API",
    "display_name": "JoyCaption3 (BizyAIR)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/API",
    "output_node": false
  },
  "easy if": {
    "input": {
      "required": {
        "any": [
          "*"
        ],
        "if": [
          "*"
        ],
        "else": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "if",
        "else"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "?"
    ],
    "name": "easy if",
    "display_name": "If (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy poseEditor": {
    "input": {
      "required": {
        "image": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy poseEditor",
    "display_name": "PoseEditor (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy imageToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "easy imageToMask",
    "display_name": "ImageToMask (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy showSpentTime": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy showSpentTime",
    "display_name": "Show Spent Time (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": true,
    "deprecated": true
  },
  "easy latentNoisy": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 1,
            "max": 10000
          }
        ],
        "source": [
          [
            "CPU",
            "GPU"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name",
        "scheduler",
        "steps",
        "start_at_step",
        "end_at_step",
        "source",
        "seed"
      ],
      "optional": [
        "pipe",
        "optional_model",
        "optional_latent"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LATENT",
      "FLOAT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "pipe",
      "latent",
      "sigma"
    ],
    "name": "easy latentNoisy",
    "display_name": "LatentNoisy (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy latentCompositeMaskedWithCond": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "text_combine": [
          "LIST"
        ],
        "source_latent": [
          "LATENT"
        ],
        "source_mask": [
          "MASK"
        ],
        "destination_mask": [
          "MASK"
        ],
        "text_combine_mode": [
          [
            "add",
            "replace",
            "cover"
          ],
          {
            "default": "add"
          }
        ],
        "replace_text": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "text_combine",
        "source_latent",
        "source_mask",
        "destination_mask",
        "text_combine_mode",
        "replace_text"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LATENT",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, true],
    "output_name": [
      "pipe",
      "latent",
      "conditioning"
    ],
    "name": "easy latentCompositeMaskedWithCond",
    "display_name": "LatentCompositeMaskedWithCond (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy injectNoiseToLatent": {
    "input": {
      "required": {
        "strength": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 200,
            "step": 0.0001
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "average": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "pipe_to_noise": [
          "PIPE_LINE"
        ],
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ],
        "noise": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ],
        "mix_randn_amount": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "strength",
        "normalize",
        "average"
      ],
      "optional": [
        "pipe_to_noise",
        "image_to_latent",
        "latent",
        "noise",
        "mask",
        "mix_randn_amount",
        "seed"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "easy injectNoiseToLatent",
    "display_name": "InjectNoiseToLatent (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy stableDiffusion3API": {
    "input": {
      "required": {
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "model": [
          [
            "sd3",
            "sd3-turbo"
          ]
        ],
        "aspect_ratio": [
          [
            "16:9",
            "1:1",
            "21:9",
            "2:3",
            "3:2",
            "4:5",
            "5:4",
            "9:16",
            "9:21"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1
          }
        ]
      },
      "optional": {
        "optional_image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "model",
        "aspect_ratio",
        "seed",
        "denoise"
      ],
      "optional": [
        "optional_image"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "easy stableDiffusion3API",
    "display_name": "StableDiffusion3API (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy saveImageLazy": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "save_metadata": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {

      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "save_metadata"
      ],
      "optional": [],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "easy saveImageLazy",
    "display_name": "SaveImageLazy (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy saveTextLazy": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "output_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "output_file_path",
        "file_name",
        "file_extension",
        "overwrite"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "STRING",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "text",
      "image"
    ],
    "name": "easy saveTextLazy",
    "display_name": "SaveTextLazy (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy showAnythingLazy": {
    "input": {
      "required": {

      },
      "optional": {
        "anything": [
          "*",
          {

          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "anything"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "output"
    ],
    "name": "easy showAnythingLazy",
    "display_name": "ShowAnythingLazy (🚫Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Easy-Use",
    "category": "EasyUse/🚫 Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "DownloadAndLoadFlorence2Model": {
    "input": {
      "required": {
        "model": [
          [
            "microsoft/Florence-2-base",
            "microsoft/Florence-2-base-ft",
            "microsoft/Florence-2-large",
            "microsoft/Florence-2-large-ft",
            "HuggingFaceM4/Florence-2-DocVQA",
            "thwri/CogFlorence-2.1-Large",
            "thwri/CogFlorence-2.2-Large",
            "gokaygokay/Florence-2-SD3-Captioner",
            "gokaygokay/Florence-2-Flux-Large",
            "MiaoshouAI/Florence-2-base-PromptGen-v1.5",
            "MiaoshouAI/Florence-2-large-PromptGen-v1.5",
            "MiaoshouAI/Florence-2-base-PromptGen-v2.0",
            "MiaoshouAI/Florence-2-large-PromptGen-v2.0"
          ],
          {
            "default": "microsoft/Florence-2-base"
          }
        ],
        "precision": [
          [
            "fp16",
            "bf16",
            "fp32"
          ],
          {
            "default": "fp16"
          }
        ],
        "attention": [
          [
            "flash_attention_2",
            "sdpa",
            "eager"
          ],
          {
            "default": "sdpa"
          }
        ]
      },
      "optional": {
        "lora": [
          "PEFTLORA"
        ],
        "convert_to_safetensors": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Some of the older model weights are not saved in .safetensors format, which seem to cause longer loading times, this option converts the .bin weights to .safetensors"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "precision",
        "attention"
      ],
      "optional": [
        "lora",
        "convert_to_safetensors"
      ]
    },
    "output": [
      "FL2MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "florence2_model"
    ],
    "name": "DownloadAndLoadFlorence2Model",
    "display_name": "DownloadAndLoadFlorence2Model",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Florence2",
    "category": "Florence2",
    "output_node": false
  },
  "DownloadAndLoadFlorence2Lora": {
    "input": {
      "required": {
        "model": [
          [
            "NikshepShetty/Florence-2-pixelprose"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "PEFTLORA"
    ],
    "output_is_list": [false],
    "output_name": [
      "lora"
    ],
    "name": "DownloadAndLoadFlorence2Lora",
    "display_name": "DownloadAndLoadFlorence2Lora",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Florence2",
    "category": "Florence2",
    "output_node": false
  },
  "Florence2ModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "Florence-2-large-PromptGen-v2.0",
            "Llama-3.2-3B-Instruct"
          ],
          {
            "tooltip": "models are expected to be in Comfyui/models/LLM folder"
          }
        ],
        "precision": [
          [
            "fp16",
            "bf16",
            "fp32"
          ]
        ],
        "attention": [
          [
            "flash_attention_2",
            "sdpa",
            "eager"
          ],
          {
            "default": "sdpa"
          }
        ]
      },
      "optional": {
        "lora": [
          "PEFTLORA"
        ],
        "convert_to_safetensors": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Some of the older model weights are not saved in .safetensors format, which seem to cause longer loading times, this option converts the .bin weights to .safetensors"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "precision",
        "attention"
      ],
      "optional": [
        "lora",
        "convert_to_safetensors"
      ]
    },
    "output": [
      "FL2MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "florence2_model"
    ],
    "name": "Florence2ModelLoader",
    "display_name": "Florence2ModelLoader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Florence2",
    "category": "Florence2",
    "output_node": false
  },
  "Florence2Run": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "florence2_model": [
          "FL2MODEL"
        ],
        "text_input": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "task": [
          [
            "region_caption",
            "dense_region_caption",
            "region_proposal",
            "caption",
            "detailed_caption",
            "more_detailed_caption",
            "caption_to_phrase_grounding",
            "referring_expression_segmentation",
            "ocr",
            "ocr_with_region",
            "docvqa",
            "prompt_gen_tags",
            "prompt_gen_mixed_caption",
            "prompt_gen_analyze",
            "prompt_gen_mixed_caption_plus"
          ]
        ],
        "fill_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "keep_model_loaded": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "max_new_tokens": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096
          }
        ],
        "num_beams": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 64
          }
        ],
        "do_sample": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "output_mask_select": [
          "STRING",
          {
            "default": ""
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "florence2_model",
        "text_input",
        "task",
        "fill_mask"
      ],
      "optional": [
        "keep_model_loaded",
        "max_new_tokens",
        "num_beams",
        "do_sample",
        "output_mask_select",
        "seed"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "JSON"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "caption",
      "data"
    ],
    "name": "Florence2Run",
    "display_name": "Florence2Run",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Florence2",
    "category": "Florence2",
    "output_node": false
  },
  "KSampler Gradually Adding More Denoise (efficient)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "start_denoise": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "denoise_increment": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.1
          }
        ],
        "denoise_increment_steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ]
      },
      "optional": {
        "optional_vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "latent_image",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "start_denoise",
        "denoise_increment",
        "denoise_increment_steps"
      ],
      "optional": [
        "optional_vae"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "MODEL",
      "CONDITIONING+",
      "CONDITIONING-",
      "LATENT",
      "VAE"
    ],
    "name": "KSampler Gradually Adding More Denoise (efficient)",
    "display_name": "KSampler Gradually Adding More Denoise (efficient)",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/others",
    "output_node": true
  },
  "GMFSS Fortuna VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "GMFSS_fortuna_union",
            "GMFSS_fortuna"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "GMFSS Fortuna VFI",
    "display_name": "GMFSS Fortuna VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "IFRNet VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "IFRNet_S_Vimeo90K.pth",
            "IFRNet_L_Vimeo90K.pth",
            "IFRNet_S_GoPro.pth",
            "IFRNet_L_GoPro.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ],
        "scale_factor": [
          [0.25, 0.5, 1, 2, 4],
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "scale_factor"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "IFRNet VFI",
    "display_name": "IFRNet VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "IFUnet VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "IFUNet.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 100,
            "step": 0.1
          }
        ],
        "ensemble": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "scale_factor",
        "ensemble"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "IFUnet VFI",
    "display_name": "IFUnet VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "M2M VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "M2M.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "M2M VFI",
    "display_name": "M2M VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "RIFE VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "rife40.pth",
            "rife41.pth",
            "sudo_rife4_269.662_testV1_scale1.pth",
            "rife42.pth",
            "rife43.pth",
            "rife44.pth",
            "rife45.pth",
            "rife46.pth",
            "rife47.pth",
            "rife48.pth",
            "rife49.pth"
          ],
          {
            "default": "rife47.pth"
          }
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 1
          }
        ],
        "fast_mode": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "ensemble": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "scale_factor": [
          [0.25, 0.5, 1, 2, 4],
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "fast_mode",
        "ensemble",
        "scale_factor"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RIFE VFI",
    "display_name": "RIFE VFI (recommend rife47 and rife49)",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "Sepconv VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "sepconv.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Sepconv VFI",
    "display_name": "Sepconv VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "AMT VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "amt-s.pth",
            "amt-l.pth",
            "amt-g.pth",
            "gopro_amt-s.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "AMT VFI",
    "display_name": "AMT VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "FILM VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "film_net_fp32.pt"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FILM VFI",
    "display_name": "FILM VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "Make Interpolation State List": {
    "input": {
      "required": {
        "frame_indices": [
          "STRING",
          {
            "multiline": true,
            "default": "1,2,3"
          }
        ],
        "is_skip_list": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "frame_indices",
        "is_skip_list"
      ]
    },
    "output": [
      "INTERPOLATION_STATES"
    ],
    "output_is_list": [false],
    "output_name": [
      "INTERPOLATION_STATES"
    ],
    "name": "Make Interpolation State List",
    "display_name": "Make Interpolation State List",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "STMFNet VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "stmfnet.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 2
          }
        ],
        "duplicate_first_last_frames": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "duplicate_first_last_frames"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "STMFNet VFI",
    "display_name": "STMFNet VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "FLAVR VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "FLAVR_2x.pth",
            "FLAVR_4x.pth",
            "FLAVR_8x.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 2
          }
        ],
        "duplicate_first_last_frames": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "duplicate_first_last_frames"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FLAVR VFI",
    "display_name": "FLAVR VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "CAIN VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "pretrained_cain.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "CAIN VFI",
    "display_name": "CAIN VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "VFI FloatToInt": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "VFI FloatToInt",
    "display_name": "VFI FloatToInt",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation",
    "output_node": false
  },
  "DownloadAndLoadFramePackModel": {
    "input": {
      "required": {
        "model": [
          [
            "lllyasviel/FramePackI2V_HY"
          ]
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16"
          ],
          {
            "default": "bf16"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ]
      },
      "optional": {
        "attention_mode": [
          [
            "sdpa",
            "flash_attn",
            "sageattn"
          ],
          {
            "default": "sdpa"
          }
        ],
        "compile_args": [
          "FRAMEPACKCOMPILEARGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision",
        "quantization"
      ],
      "optional": [
        "attention_mode",
        "compile_args"
      ]
    },
    "output": [
      "FramePackMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "DownloadAndLoadFramePackModel",
    "display_name": "(Down)Load FramePackModel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-FramePackWrapper",
    "category": "FramePackWrapper",
    "output_node": false
  },
  "FramePackSampler": {
    "input": {
      "required": {
        "model": [
          "FramePackMODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "start_latent": [
          "LATENT",
          {
            "tooltip": "init Latents to use for image2video"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "use_teacache": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Use teacache for faster sampling."
          }
        ],
        "teacache_rel_l1_thresh": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "The threshold for the relative L1 loss."
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "guidance_scale": [
          "FLOAT",
          {
            "default": 10,
            "min": 0,
            "max": 32,
            "step": 0.01
          }
        ],
        "shift": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "latent_window_size": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 33,
            "step": 1,
            "tooltip": "The size of the latent window to use for sampling."
          }
        ],
        "total_second_length": [
          "FLOAT",
          {
            "default": 5,
            "min": 0.1,
            "max": 120,
            "step": 0.1,
            "tooltip": "The total length of the video in seconds."
          }
        ],
        "gpu_memory_preservation": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 128,
            "step": 0.1,
            "tooltip": "The amount of GPU memory to preserve."
          }
        ],
        "sampler": [
          [
            "unipc_bh1",
            "unipc_bh2"
          ],
          {
            "default": "unipc_bh1"
          }
        ]
      },
      "optional": {
        "image_embeds": [
          "CLIP_VISION_OUTPUT"
        ],
        "end_latent": [
          "LATENT",
          {
            "tooltip": "end Latents to use for image2video"
          }
        ],
        "end_image_embeds": [
          "CLIP_VISION_OUTPUT",
          {
            "tooltip": "end Image's clip embeds"
          }
        ],
        "embed_interpolation": [
          [
            "disabled",
            "weighted_average",
            "linear"
          ],
          {
            "default": "disabled",
            "tooltip": "Image embedding interpolation type. If linear, will smoothly interpolate with time, else it'll be weighted average with the specified weight."
          }
        ],
        "start_embed_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Weighted average constant for image embed interpolation. If end image is not set, the embed's strength won't be affected"
          }
        ],
        "initial_samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video"
          }
        ],
        "denoise_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "start_latent",
        "steps",
        "use_teacache",
        "teacache_rel_l1_thresh",
        "cfg",
        "guidance_scale",
        "shift",
        "seed",
        "latent_window_size",
        "total_second_length",
        "gpu_memory_preservation",
        "sampler"
      ],
      "optional": [
        "image_embeds",
        "end_latent",
        "end_image_embeds",
        "embed_interpolation",
        "start_embed_strength",
        "initial_samples",
        "denoise_strength"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "FramePackSampler",
    "display_name": "FramePackSampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-FramePackWrapper",
    "category": "FramePackWrapper",
    "output_node": false
  },
  "FramePackTorchCompileSettings": {
    "input": {
      "required": {
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_single_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Enable single block compilation"
          }
        ],
        "compile_double_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Enable double block compilation"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_single_blocks",
        "compile_double_blocks"
      ]
    },
    "output": [
      "FRAMEPACKCOMPILEARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "torch_compile_args"
    ],
    "name": "FramePackTorchCompileSettings",
    "display_name": "Torch Compile Settings",
    "description": "torch.compile settings, when connected to the model loader, torch.compile of the selected layers is attempted. Requires Triton and torch 2.5.0 is recommended",
    "python_module": "custom_nodes.ComfyUI-FramePackWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "FramePackFindNearestBucket": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "Image to resize"
          }
        ],
        "base_resolution": [
          "INT",
          {
            "default": 640,
            "min": 64,
            "max": 2048,
            "step": 16,
            "tooltip": "Width of the image to encode"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "base_resolution"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "FramePackFindNearestBucket",
    "display_name": "Find Nearest Bucket",
    "description": "Finds the closes resolution bucket as defined in the orignal code",
    "python_module": "custom_nodes.ComfyUI-FramePackWrapper",
    "category": "FramePackWrapper",
    "output_node": false
  },
  "LoadFramePackModel": {
    "input": {
      "required": {
        "model": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16"
          ],
          {
            "default": "bf16"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "cuda",
            "tooltip": "Initialize the model on the main device or offload device"
          }
        ]
      },
      "optional": {
        "attention_mode": [
          [
            "sdpa",
            "flash_attn",
            "sageattn"
          ],
          {
            "default": "sdpa"
          }
        ],
        "compile_args": [
          "FRAMEPACKCOMPILEARGS"
        ],
        "lora": [
          "FPLORA",
          {
            "default": null,
            "tooltip": "LORA model to load"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision",
        "quantization",
        "load_device"
      ],
      "optional": [
        "attention_mode",
        "compile_args",
        "lora"
      ]
    },
    "output": [
      "FramePackMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "LoadFramePackModel",
    "display_name": "Load FramePackModel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-FramePackWrapper",
    "category": "FramePackWrapper",
    "output_node": false
  },
  "FramePackLoraSelect": {
    "input": {
      "required": {
        "lora": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "tooltip": "LORA models are expected to be in ComfyUI/models/loras with .safetensors extension"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ],
        "fuse_lora": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Fuse the LORA model with the base model. This is recommended for better performance."
          }
        ]
      },
      "optional": {
        "prev_lora": [
          "FPLORA",
          {
            "default": null,
            "tooltip": "For loading multiple LoRAs"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "lora",
        "strength",
        "fuse_lora"
      ],
      "optional": [
        "prev_lora"
      ]
    },
    "output": [
      "FPLORA"
    ],
    "output_is_list": [false],
    "output_name": [
      "lora"
    ],
    "name": "FramePackLoraSelect",
    "display_name": "Select Lora",
    "description": "Select a LoRA model from ComfyUI/models/loras",
    "python_module": "custom_nodes.ComfyUI-FramePackWrapper",
    "category": "FramePackWrapper",
    "output_node": false
  },
  "FramePackSingleFrameSampler": {
    "input": {
      "required": {
        "model": [
          "FramePackMODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "start_latent": [
          "LATENT",
          {
            "tooltip": "init Latents to use for image2image"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "use_teacache": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Use teacache for faster sampling."
          }
        ],
        "teacache_rel_l1_thresh": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Threshold for relative L1 loss"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "guidance_scale": [
          "FLOAT",
          {
            "default": 10,
            "min": 0,
            "max": 32,
            "step": 0.01
          }
        ],
        "shift": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "latent_window_size": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 33,
            "step": 1,
            "tooltip": "Size of latent window for sampling"
          }
        ],
        "gpu_memory_preservation": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 128,
            "step": 0.1,
            "tooltip": "GPU memory to preserve"
          }
        ],
        "sampler": [
          [
            "unipc_bh1",
            "unipc_bh2"
          ],
          {
            "default": "unipc_bh1"
          }
        ],
        "use_kisekaeichi": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable Kisekaeichi mode for style transfer"
          }
        ]
      },
      "optional": {
        "image_embeds": [
          "CLIP_VISION_OUTPUT"
        ],
        "initial_samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for image2image variation"
          }
        ],
        "denoise_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "reference_latent": [
          "LATENT",
          {
            "tooltip": "Reference image latent for kisekaeichi mode"
          }
        ],
        "reference_image_embeds": [
          "CLIP_VISION_OUTPUT",
          {
            "tooltip": "Reference image CLIP embeds for kisekaeichi mode"
          }
        ],
        "target_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 8,
            "step": 1,
            "tooltip": "Target index for kisekaeichi (recommended: 1)"
          }
        ],
        "history_index": [
          "INT",
          {
            "default": 13,
            "min": 0,
            "max": 16,
            "step": 1,
            "tooltip": "History index (recommended: 13)"
          }
        ],
        "input_mask": [
          "MASK",
          {
            "tooltip": "Input mask for selective application"
          }
        ],
        "reference_mask": [
          "MASK",
          {
            "tooltip": "Reference mask for selective features"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "start_latent",
        "steps",
        "use_teacache",
        "teacache_rel_l1_thresh",
        "cfg",
        "guidance_scale",
        "shift",
        "seed",
        "latent_window_size",
        "gpu_memory_preservation",
        "sampler",
        "use_kisekaeichi"
      ],
      "optional": [
        "image_embeds",
        "initial_samples",
        "denoise_strength",
        "reference_latent",
        "reference_image_embeds",
        "target_index",
        "history_index",
        "input_mask",
        "reference_mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "FramePackSingleFrameSampler",
    "display_name": "Single Frame Sampler",
    "description": "Single frame sampler with Kisekaeichi (style transfer) support",
    "python_module": "custom_nodes.ComfyUI-FramePackWrapper",
    "category": "FramePackWrapper",
    "output_node": false
  },
  "UnetLoaderGGUF": {
    "input": {
      "required": {
        "unet_name": [
          [
            "FLUX.1\\FLUX.1_Canny_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Depth_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Fill_Dev_Q8_0.gguf",
            "FLUX.1_Kontext\\FLUX.1_Kontext_Dev_Q8_0.gguf",
            "HiDream-E1\\HiDream-E1_Q8_0.gguf",
            "HiDream-I1\\HiDream-I1_Full_Q8_0.gguf",
            "Wan2.1\\Wan2.1_I2V_14B_480p_Q8_0.gguf",
            "Wan2.1\\Wan2.1_I2V_14B_FusionX_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_FusionX_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_FusionX_VACE_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_Q8_0.gguf",
            "Wan2.1\\Wan2.1_VACE_14B_Q8_0.gguf"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "unet_name"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "UnetLoaderGGUF",
    "display_name": "Unet Loader (GGUF)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-GGUF",
    "category": "bootleg",
    "output_node": false
  },
  "CLIPLoaderGGUF": {
    "input": {
      "required": {
        "clip_name": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ],
        "type": [
          [
            "stable_diffusion",
            "stable_cascade",
            "sd3",
            "stable_audio",
            "mochi",
            "ltxv",
            "pixart",
            "cosmos",
            "lumina2",
            "wan",
            "hidream",
            "chroma",
            "ace",
            "omnigen2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name",
        "type"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPLoaderGGUF",
    "display_name": "CLIPLoader (GGUF)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-GGUF",
    "category": "bootleg",
    "output_node": false
  },
  "DualCLIPLoaderGGUF": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ],
        "clip_name2": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ],
        "type": [
          [
            "sdxl",
            "sd3",
            "flux",
            "hunyuan_video",
            "hidream"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "type"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "DualCLIPLoaderGGUF",
    "display_name": "DualCLIPLoader (GGUF)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-GGUF",
    "category": "bootleg",
    "output_node": false
  },
  "TripleCLIPLoaderGGUF": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ],
        "clip_name2": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ],
        "clip_name3": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "TripleCLIPLoaderGGUF",
    "display_name": "TripleCLIPLoader (GGUF)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-GGUF",
    "category": "bootleg",
    "output_node": false
  },
  "QuadrupleCLIPLoaderGGUF": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ],
        "clip_name2": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ],
        "clip_name3": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ],
        "clip_name4": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors",
            "Llama_3.1_8B_Instruct_Q8_0.gguf",
            "Llava_Llama_3_8B_v1.1_Q8_0.gguf",
            "T5-xxl_v1.1_Q8_0.gguf",
            "UMT5-xxl_Q8_0.gguf"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3",
        "clip_name4"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "QuadrupleCLIPLoaderGGUF",
    "display_name": "QuadrupleCLIPLoader (GGUF)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-GGUF",
    "category": "bootleg",
    "output_node": false
  },
  "UnetLoaderGGUFAdvanced": {
    "input": {
      "required": {
        "unet_name": [
          [
            "FLUX.1\\FLUX.1_Canny_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Depth_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Fill_Dev_Q8_0.gguf",
            "FLUX.1_Kontext\\FLUX.1_Kontext_Dev_Q8_0.gguf",
            "HiDream-E1\\HiDream-E1_Q8_0.gguf",
            "HiDream-I1\\HiDream-I1_Full_Q8_0.gguf",
            "Wan2.1\\Wan2.1_I2V_14B_480p_Q8_0.gguf",
            "Wan2.1\\Wan2.1_I2V_14B_FusionX_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_FusionX_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_FusionX_VACE_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_Q8_0.gguf",
            "Wan2.1\\Wan2.1_VACE_14B_Q8_0.gguf"
          ]
        ],
        "dequant_dtype": [
          [
            "default",
            "target",
            "float32",
            "float16",
            "bfloat16"
          ],
          {
            "default": "default"
          }
        ],
        "patch_dtype": [
          [
            "default",
            "target",
            "float32",
            "float16",
            "bfloat16"
          ],
          {
            "default": "default"
          }
        ],
        "patch_on_device": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "dequant_dtype",
        "patch_dtype",
        "patch_on_device"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "UnetLoaderGGUFAdvanced",
    "display_name": "Unet Loader (GGUF/Advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-GGUF",
    "category": "bootleg",
    "output_node": false
  },
  "Hy3DModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
          }
        ]
      },
      "optional": {
        "compile_args": [
          "HY3DCOMPILEARGS",
          {
            "tooltip": "torch.compile settings, when connected to the model loader, torch.compile of the selected models is attempted. Requires Triton and torch 2.5.0 is recommended"
          }
        ],
        "attention_mode": [
          [
            "sdpa",
            "sageattn"
          ],
          {
            "default": "sdpa"
          }
        ],
        "cublas_ops": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable optimized cublas linear layers, speeds up decoding: https://github.com/aredden/torch-cublas-hgemm"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ],
      "optional": [
        "compile_args",
        "attention_mode",
        "cublas_ops"
      ]
    },
    "output": [
      "HY3DMODEL",
      "HY3DVAE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "pipeline",
      "vae"
    ],
    "name": "Hy3DModelLoader",
    "display_name": "Hy3DModelLoader",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DVAELoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/vae'"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "HY3DVAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "vae"
    ],
    "name": "Hy3DVAELoader",
    "display_name": "Hy3DVAELoader",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DGenerateMesh": {
    "input": {
      "required": {
        "pipeline": [
          "HY3DMODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "guidance_scale": [
          "FLOAT",
          {
            "default": 5.5,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "scheduler": [
          [
            "FlowMatchEulerDiscreteScheduler",
            "ConsistencyFlowMatchEulerDiscreteScheduler"
          ]
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Offloads the model to the offload device once the process is done."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipeline",
        "image",
        "guidance_scale",
        "steps",
        "seed"
      ],
      "optional": [
        "mask",
        "scheduler",
        "force_offload"
      ]
    },
    "output": [
      "HY3DLATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "latents"
    ],
    "name": "Hy3DGenerateMesh",
    "display_name": "Hy3DGenerateMesh",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DGenerateMeshMultiView": {
    "input": {
      "required": {
        "pipeline": [
          "HY3DMODEL"
        ],
        "guidance_scale": [
          "FLOAT",
          {
            "default": 5.5,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      },
      "optional": {
        "front": [
          "IMAGE"
        ],
        "left": [
          "IMAGE"
        ],
        "right": [
          "IMAGE"
        ],
        "back": [
          "IMAGE"
        ],
        "scheduler": [
          [
            "FlowMatchEulerDiscreteScheduler",
            "ConsistencyFlowMatchEulerDiscreteScheduler"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "pipeline",
        "guidance_scale",
        "steps",
        "seed"
      ],
      "optional": [
        "front",
        "left",
        "right",
        "back",
        "scheduler"
      ]
    },
    "output": [
      "HY3DLATENT",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "latents",
      "image",
      "mask"
    ],
    "name": "Hy3DGenerateMeshMultiView",
    "display_name": "Hy3DGenerateMeshMultiView",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DExportMesh": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "3D/Hy3D"
          }
        ],
        "file_format": [
          [
            "glb",
            "obj",
            "ply",
            "stl",
            "3mf",
            "dae"
          ]
        ]
      },
      "optional": {
        "save_file": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "filename_prefix",
        "file_format"
      ],
      "optional": [
        "save_file"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "glb_path"
    ],
    "name": "Hy3DExportMesh",
    "display_name": "Hy3DExportMesh",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": true
  },
  "DownloadAndLoadHy3DDelightModel": {
    "input": {
      "required": {
        "model": [
          [
            "hunyuan3d-delight-v2-0"
          ]
        ]
      },
      "optional": {
        "compile_args": [
          "HY3DCOMPILEARGS",
          {
            "tooltip": "torch.compile settings, when connected to the model loader, torch.compile of the selected models is attempted. Requires Triton and torch 2.5.0 is recommended"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ],
      "optional": [
        "compile_args"
      ]
    },
    "output": [
      "HY3DDIFFUSERSPIPE"
    ],
    "output_is_list": [false],
    "output_name": [
      "delight_pipe"
    ],
    "name": "DownloadAndLoadHy3DDelightModel",
    "display_name": "(Down)Load Hy3D DelightModel",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "DownloadAndLoadHy3DPaintModel": {
    "input": {
      "required": {
        "model": [
          [
            "hunyuan3d-paint-v2-0",
            "hunyuan3d-paint-v2-0-turbo"
          ]
        ]
      },
      "optional": {
        "compile_args": [
          "HY3DCOMPILEARGS",
          {
            "tooltip": "torch.compile settings, when connected to the model loader, torch.compile of the selected models is attempted. Requires Triton and torch 2.5.0 is recommended"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ],
      "optional": [
        "compile_args"
      ]
    },
    "output": [
      "HY3DDIFFUSERSPIPE"
    ],
    "output_is_list": [false],
    "output_name": [
      "multiview_pipe"
    ],
    "name": "DownloadAndLoadHy3DPaintModel",
    "display_name": "(Down)Load Hy3D PaintModel",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DDelightImage": {
    "input": {
      "required": {
        "delight_pipe": [
          "HY3DDIFFUSERSPIPE"
        ],
        "image": [
          "IMAGE"
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ],
        "cfg_image": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 42,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      },
      "optional": {
        "scheduler": [
          "NOISESCHEDULER"
        ]
      }
    },
    "input_order": {
      "required": [
        "delight_pipe",
        "image",
        "steps",
        "width",
        "height",
        "cfg_image",
        "seed"
      ],
      "optional": [
        "scheduler"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Hy3DDelightImage",
    "display_name": "Hy3DDelightImage",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DRenderMultiView": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "render_size": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ],
        "texture_size": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ]
      },
      "optional": {
        "camera_config": [
          "HY3DCAMERA"
        ],
        "normal_space": [
          [
            "world",
            "tangent"
          ],
          {
            "default": "world"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "render_size",
        "texture_size"
      ],
      "optional": [
        "camera_config",
        "normal_space"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "MESHRENDER",
      "MASK"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "normal_maps",
      "position_maps",
      "renderer",
      "masks"
    ],
    "name": "Hy3DRenderMultiView",
    "display_name": "Hy3D Render MultiView",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DBakeFromMultiview": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "renderer": [
          "MESHRENDER"
        ]
      },
      "optional": {
        "camera_config": [
          "HY3DCAMERA"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "renderer"
      ],
      "optional": [
        "camera_config"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MESHRENDER"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "texture",
      "mask",
      "renderer"
    ],
    "name": "Hy3DBakeFromMultiview",
    "display_name": "Hy3D Bake From Multiview",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DTorchCompileSettings": {
    "input": {
      "required": {
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_transformer": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile single blocks"
          }
        ],
        "compile_vae": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile double blocks"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_transformer",
        "compile_vae"
      ]
    },
    "output": [
      "HY3DCOMPILEARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "torch_compile_args"
    ],
    "name": "Hy3DTorchCompileSettings",
    "display_name": "Hy3D Torch Compile Settings",
    "description": "torch.compile settings, when connected to the model loader, torch.compile of the selected layers is attempted. Requires Triton and torch 2.5.0 is recommended",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DPostprocessMesh": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "remove_floaters": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "remove_degenerate_faces": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "reduce_faces": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "max_facenum": [
          "INT",
          {
            "default": 40000,
            "min": 1,
            "max": 10000000,
            "step": 1
          }
        ],
        "smooth_normals": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "remove_floaters",
        "remove_degenerate_faces",
        "reduce_faces",
        "max_facenum",
        "smooth_normals"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DPostprocessMesh",
    "display_name": "Hy3D Postprocess Mesh",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DLoadMesh": {
    "input": {
      "required": {
        "glb_path": [
          "STRING",
          {
            "default": "",
            "tooltip": "The glb path with mesh to load."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "glb_path"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DLoadMesh",
    "display_name": "Hy3D Load Mesh",
    "description": "Loads a glb model from the given path.",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false,
    "output_tooltips": [
      "The glb model with mesh to texturize."
    ]
  },
  "Hy3DUploadMesh": {
    "input": {
      "required": {
        "mesh": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "mesh"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DUploadMesh",
    "display_name": "Hy3D Upload Mesh",
    "description": "Loads a glb model from the given path.",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false,
    "output_tooltips": [
      "The glb model with mesh to texturize."
    ]
  },
  "Hy3DCameraConfig": {
    "input": {
      "required": {
        "camera_azimuths": [
          "STRING",
          {
            "default": "0, 90, 180, 270, 0, 180",
            "multiline": false
          }
        ],
        "camera_elevations": [
          "STRING",
          {
            "default": "0, 0, 0, 0, 90, -90",
            "multiline": false
          }
        ],
        "view_weights": [
          "STRING",
          {
            "default": "1, 0.1, 0.5, 0.1, 0.05, 0.05",
            "multiline": false
          }
        ],
        "camera_distance": [
          "FLOAT",
          {
            "default": 1.45,
            "min": 0.1,
            "max": 10,
            "step": 0.001
          }
        ],
        "ortho_scale": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.1,
            "max": 10,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_azimuths",
        "camera_elevations",
        "view_weights",
        "camera_distance",
        "ortho_scale"
      ]
    },
    "output": [
      "HY3DCAMERA"
    ],
    "output_is_list": [false],
    "output_name": [
      "camera_config"
    ],
    "name": "Hy3DCameraConfig",
    "display_name": "Hy3D Camera Config",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DMeshUVWrap": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DMeshUVWrap",
    "display_name": "Hy3D Mesh UV Wrap",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DSampleMultiView": {
    "input": {
      "required": {
        "pipeline": [
          "HY3DDIFFUSERSPIPE"
        ],
        "ref_image": [
          "IMAGE"
        ],
        "normal_maps": [
          "IMAGE"
        ],
        "position_maps": [
          "IMAGE"
        ],
        "view_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      },
      "optional": {
        "camera_config": [
          "HY3DCAMERA"
        ],
        "scheduler": [
          "NOISESCHEDULER"
        ],
        "denoise_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipeline",
        "ref_image",
        "normal_maps",
        "position_maps",
        "view_size",
        "steps",
        "seed"
      ],
      "optional": [
        "camera_config",
        "scheduler",
        "denoise_strength",
        "samples"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Hy3DSampleMultiView",
    "display_name": "Hy3D Sample MultiView",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DMeshVerticeInpaintTexture": {
    "input": {
      "required": {
        "texture": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "renderer": [
          "MESHRENDER"
        ]
      }
    },
    "input_order": {
      "required": [
        "texture",
        "mask",
        "renderer"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MESHRENDER"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "texture",
      "mask",
      "renderer"
    ],
    "name": "Hy3DMeshVerticeInpaintTexture",
    "display_name": "Hy3D Mesh Vertice Inpaint Texture",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DApplyTexture": {
    "input": {
      "required": {
        "texture": [
          "IMAGE"
        ],
        "renderer": [
          "MESHRENDER"
        ]
      }
    },
    "input_order": {
      "required": [
        "texture",
        "renderer"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DApplyTexture",
    "display_name": "Hy3D Apply Texture",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "CV2InpaintTexture": {
    "input": {
      "required": {
        "texture": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "inpaint_radius": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "inpaint_method": [
          [
            "ns",
            "telea"
          ],
          {
            "default": "ns"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "texture",
        "mask",
        "inpaint_radius",
        "inpaint_method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "texture"
    ],
    "name": "CV2InpaintTexture",
    "display_name": "CV2 Inpaint Texture",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DRenderMultiViewDepth": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "render_size": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ],
        "texture_size": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ]
      },
      "optional": {
        "camera_config": [
          "HY3DCAMERA"
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "render_size",
        "texture_size"
      ],
      "optional": [
        "camera_config"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "depth_maps",
      "masks"
    ],
    "name": "Hy3DRenderMultiViewDepth",
    "display_name": "Hy3D Render MultiView Depth",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DGetMeshPBRTextures": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "texture": [
          [
            "base_color",
            "emissive",
            "metallic_roughness",
            "normal",
            "occlusion"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "texture"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Hy3DGetMeshPBRTextures",
    "display_name": "Hy3D Get Mesh PBR Textures",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DSetMeshPBRTextures": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "image": [
          "IMAGE"
        ],
        "texture": [
          [
            "base_color",
            "emissive",
            "metallic_roughness",
            "normal",
            "occlusion"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "image",
        "texture"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DSetMeshPBRTextures",
    "display_name": "Hy3D Set Mesh PBR Textures",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DSetMeshPBRAttributes": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "baseColorFactor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "emissiveFactor": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "metallicFactor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "roughnessFactor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "doubleSided": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "baseColorFactor",
        "emissiveFactor",
        "metallicFactor",
        "roughnessFactor",
        "doubleSided"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DSetMeshPBRAttributes",
    "display_name": "Hy3D Set Mesh PBR Attributes",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DVAEDecode": {
    "input": {
      "required": {
        "vae": [
          "HY3DVAE"
        ],
        "latents": [
          "HY3DLATENT"
        ],
        "box_v": [
          "FLOAT",
          {
            "default": 1.01,
            "min": -10,
            "max": 10,
            "step": 0.001
          }
        ],
        "octree_resolution": [
          "INT",
          {
            "default": 384,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "num_chunks": [
          "INT",
          {
            "default": 8000,
            "min": 1,
            "max": 10000000,
            "step": 1,
            "tooltip": "Number of chunks to process at once, higher values use more memory, but make the process faster"
          }
        ],
        "mc_level": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.0001
          }
        ],
        "mc_algo": [
          [
            "mc",
            "dmc"
          ],
          {
            "default": "mc"
          }
        ]
      },
      "optional": {
        "enable_flash_vdm": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Offloads the model to the offload device once the process is done."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "latents",
        "box_v",
        "octree_resolution",
        "num_chunks",
        "mc_level",
        "mc_algo"
      ],
      "optional": [
        "enable_flash_vdm",
        "force_offload"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DVAEDecode",
    "display_name": "Hy3D VAE Decode",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DRenderSingleView": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "render_type": [
          [
            "normal",
            "depth"
          ],
          {
            "default": "normal"
          }
        ],
        "render_size": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ],
        "camera_type": [
          [
            "orth",
            "perspective"
          ],
          {
            "default": "orth"
          }
        ],
        "camera_distance": [
          "FLOAT",
          {
            "default": 1.45,
            "min": 0.1,
            "max": 10,
            "step": 0.001
          }
        ],
        "pan_x": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ],
        "pan_y": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ],
        "ortho_scale": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.1,
            "max": 10,
            "step": 0.001
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1
          }
        ],
        "bg_color": [
          "STRING",
          {
            "default": "128, 128, 255",
            "tooltip": "Color as RGB values in range 0-255, separated by commas."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "render_type",
        "render_size",
        "camera_type",
        "camera_distance",
        "pan_x",
        "pan_y",
        "ortho_scale",
        "azimuth",
        "elevation",
        "bg_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "Hy3DRenderSingleView",
    "display_name": "Hy3D Render SingleView",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DDiffusersSchedulerConfig": {
    "input": {
      "required": {
        "pipeline": [
          "HY3DDIFFUSERSPIPE"
        ],
        "scheduler": [
          [
            "DPM++",
            "DPM++SDE",
            "Euler",
            "Euler A",
            "PNDM",
            "DDIM",
            "SASolverScheduler",
            "UniPCMultistepScheduler",
            "HeunDiscreteScheduler",
            "DEISMultistepScheduler",
            "LCMScheduler"
          ],
          {
            "default": "Euler A"
          }
        ],
        "sigmas": [
          [
            "default",
            "karras",
            "exponential",
            "beta"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "pipeline",
        "scheduler",
        "sigmas"
      ]
    },
    "output": [
      "NOISESCHEDULER"
    ],
    "output_is_list": [false],
    "output_name": [
      "diffusers_scheduler"
    ],
    "name": "Hy3DDiffusersSchedulerConfig",
    "display_name": "Hy3D Diffusers Scheduler Config",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DIMRemesh": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "merge_vertices": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "vertex_count": [
          "INT",
          {
            "default": 10000,
            "min": 100,
            "max": 10000000,
            "step": 1
          }
        ],
        "smooth_iter": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "align_to_boundaries": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "triangulate_result": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "max_facenum": [
          "INT",
          {
            "default": 40000,
            "min": 1,
            "max": 10000000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "merge_vertices",
        "vertex_count",
        "smooth_iter",
        "align_to_boundaries",
        "triangulate_result",
        "max_facenum"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DIMRemesh",
    "display_name": "Hy3D Instant-Meshes Remesh",
    "description": "Remeshes the mesh using instant-meshes: https://github.com/wjakob/instant-meshes, Note: this will remove all vertex colors and textures.",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DBPT": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "enable_bpt": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 42,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.5
          }
        ],
        "pc_num": [
          "INT",
          {
            "default": 4096,
            "min": 1024,
            "max": 8192,
            "step": 1024
          }
        ],
        "samples": [
          "INT",
          {
            "default": 100000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "enable_bpt",
        "seed",
        "temperature",
        "pc_num",
        "samples"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DBPT",
    "display_name": "Hy3D BPT",
    "description": "BPT the mesh using bpt: https://github.com/whaohan/bpt",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DMeshInfo": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh"
      ]
    },
    "output": [
      "TRIMESH",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "trimesh",
      "vertices",
      "faces"
    ],
    "name": "Hy3DMeshInfo",
    "display_name": "Hy3D Mesh Info",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DFastSimplifyMesh": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "target_count": [
          "INT",
          {
            "default": 40000,
            "min": 1,
            "max": 100000000,
            "step": 1,
            "tooltip": "Target number of triangles"
          }
        ],
        "aggressiveness": [
          "INT",
          {
            "default": 7,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "Parameter controlling the growth rate of the threshold at each iteration when lossless is False."
          }
        ],
        "max_iterations": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 1000,
            "step": 1,
            "tooltip": "Maximal number of iterations"
          }
        ],
        "update_rate": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of iterations between each update"
          }
        ],
        "preserve_border": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Flag for preserving the vertices situated on open borders."
          }
        ],
        "lossless": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Flag for using the lossless simplification method. Sets the update rate to 1"
          }
        ],
        "threshold_lossless": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0,
            "max": 1,
            "step": 0.0001,
            "tooltip": "Threshold for the lossless simplification method."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "target_count",
        "aggressiveness",
        "max_iterations",
        "update_rate",
        "preserve_border",
        "lossless",
        "threshold_lossless"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "trimesh"
    ],
    "name": "Hy3DFastSimplifyMesh",
    "display_name": "Hy3D Fast Simplify Mesh",
    "description": "Simplifies the mesh using Fast Quadric Mesh Reduction: https://github.com/Kramer84/pyfqmr-Fast-Quadric-Mesh-Reduction",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "Hy3DNvdiffrastRenderer": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ],
        "render_type": [
          [
            "textured",
            "vertex_colors",
            "normals",
            "depth"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 16,
            "tooltip": "Width of the rendered image"
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 16,
            "tooltip": "Height of the rendered image"
          }
        ],
        "ssaa": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1,
            "tooltip": "Super-sampling anti-aliasing"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of frames to render"
          }
        ],
        "camera_distance": [
          "FLOAT",
          {
            "default": 2,
            "min": -100.1,
            "max": 1000,
            "step": 0.01,
            "tooltip": "Camera distance from the object"
          }
        ],
        "yaw": [
          "FLOAT",
          {
            "default": 0,
            "min": -90,
            "max": 90,
            "step": 0.01,
            "tooltip": "Start yaw in radians"
          }
        ],
        "pitch": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 0.01,
            "tooltip": "Start pitch in radians"
          }
        ],
        "fov": [
          "FLOAT",
          {
            "default": 60,
            "min": 1,
            "max": 179,
            "step": 0.01,
            "tooltip": "Camera field of view in degrees"
          }
        ],
        "near": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.001,
            "max": 1000,
            "step": 0.01,
            "tooltip": "Camera near clipping plane"
          }
        ],
        "far": [
          "FLOAT",
          {
            "default": 1000,
            "min": 1,
            "max": 10000,
            "step": 0.01,
            "tooltip": "Camera far clipping plane"
          }
        ],
        "pan_x": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.001,
            "tooltip": "Pan in x direction"
          }
        ],
        "pan_y": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.001,
            "tooltip": "Pan in y direction"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh",
        "render_type",
        "width",
        "height",
        "ssaa",
        "num_frames",
        "camera_distance",
        "yaw",
        "pitch",
        "fov",
        "near",
        "far",
        "pan_x",
        "pan_y"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "Hy3DNvdiffrastRenderer",
    "display_name": "Hy3D Nvdiffrast Renderer",
    "description": "",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false
  },
  "TrimeshToMESH": {
    "input": {
      "required": {
        "trimesh": [
          "TRIMESH"
        ]
      }
    },
    "input_order": {
      "required": [
        "trimesh"
      ]
    },
    "output": [
      "MESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "MESH"
    ],
    "name": "TrimeshToMESH",
    "display_name": "Trimesh to MESH",
    "description": "Converts trimesh object to ComfyUI MESH object, which only includes mesh data",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false,
    "output_tooltips": [
      "MESH object containing vertices and faces as torch tensors."
    ]
  },
  "MESHToTrimesh": {
    "input": {
      "required": {
        "mesh": [
          "MESH"
        ]
      }
    },
    "input_order": {
      "required": [
        "mesh"
      ]
    },
    "output": [
      "TRIMESH"
    ],
    "output_is_list": [false],
    "output_name": [
      "TRIMESH"
    ],
    "name": "MESHToTrimesh",
    "display_name": "MESH to Trimesh",
    "description": "Converts trimesh object to ComfyUI MESH object, which only includes mesh data",
    "python_module": "custom_nodes.comfyui-hunyan3dwrapper",
    "category": "Hunyuan3DWrapper",
    "output_node": false,
    "output_tooltips": [
      "TRIMESH object containing vertices and faces as torch tensors."
    ]
  },
  "HyVideoSampler": {
    "input": {
      "required": {
        "model": [
          "HYVIDEOMODEL"
        ],
        "hyvid_embeds": [
          "HYVIDEMBEDS"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 16
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 49,
            "min": 1,
            "max": 1024,
            "step": 4
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "embedded_guidance_scale": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "flow_shift": [
          "FLOAT",
          {
            "default": 9,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video process"
          }
        ],
        "image_cond_latents": [
          "LATENT",
          {
            "tooltip": "init Latents to use for image2video process"
          }
        ],
        "denoise_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "stg_args": [
          "STGARGS"
        ],
        "context_options": [
          "HYVIDCONTEXT"
        ],
        "feta_args": [
          "FETAARGS"
        ],
        "teacache_args": [
          "TEACACHEARGS"
        ],
        "scheduler": [
          [
            "FlowMatchDiscreteScheduler",
            "SDE-DPMSolverMultistepScheduler",
            "DPMSolverMultistepScheduler",
            "SASolverScheduler",
            "UniPCMultistepScheduler"
          ],
          {
            "default": "FlowMatchDiscreteScheduler"
          }
        ],
        "riflex_freq_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1,
            "tooltip": "Frequency index for RIFLEX, disabled when 0, default 4. Allows for new frames to be generated after 129 without looping"
          }
        ],
        "i2v_mode": [
          [
            "stability",
            "dynamic"
          ],
          {
            "default": "dynamic",
            "tooltip": "I2V mode for image2video process"
          }
        ],
        "loop_args": [
          "LOOPARGS"
        ],
        "fresca_args": [
          "FRESCA_ARGS"
        ],
        "slg_args": [
          "SLGARGS"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hyvid_embeds",
        "width",
        "height",
        "num_frames",
        "steps",
        "embedded_guidance_scale",
        "flow_shift",
        "seed",
        "force_offload"
      ],
      "optional": [
        "samples",
        "image_cond_latents",
        "denoise_strength",
        "stg_args",
        "context_options",
        "feta_args",
        "teacache_args",
        "scheduler",
        "riflex_freq_index",
        "i2v_mode",
        "loop_args",
        "fresca_args",
        "slg_args",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "HyVideoSampler",
    "display_name": "HunyuanVideo Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoDecode": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "samples": [
          "LATENT"
        ],
        "enable_vae_tiling": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Drastically reduces memory use but may introduce seams"
          }
        ],
        "temporal_tiling_sample_size": [
          "INT",
          {
            "default": 64,
            "min": 4,
            "max": 256,
            "tooltip": "Smaller values use less VRAM, model default is 64, any other value will cause stutter"
          }
        ],
        "spatial_tile_sample_min_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 2048,
            "step": 32,
            "tooltip": "Spatial tile minimum size in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "auto_tile_size": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Automatically set tile size based on defaults, above settings are ignored"
          }
        ]
      },
      "optional": {
        "skip_latents": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of latents to skip from the start, can help with flashing"
          }
        ],
        "balance_brightness": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Attempt to balance brightness of the output frames"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "samples",
        "enable_vae_tiling",
        "temporal_tiling_sample_size",
        "spatial_tile_sample_min_size",
        "auto_tile_size"
      ],
      "optional": [
        "skip_latents",
        "balance_brightness"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "HyVideoDecode",
    "display_name": "HunyuanVideo Decode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoTextEncode": {
    "input": {
      "required": {
        "text_encoders": [
          "HYVIDTEXTENCODER"
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "prompt_template": [
          [
            "video",
            "image",
            "custom",
            "disabled"
          ],
          {
            "default": "video",
            "tooltip": "Use the default prompt templates for the llm text encoder"
          }
        ],
        "custom_prompt_template": [
          "PROMPT_TEMPLATE",
          {
            "default": {
              "template": "\u003C|start_header_id|\u003Esystem\u003C|end_header_id|\u003E\n\nDescribe the video by detailing the following aspects: 1. The main content and theme of the video.2. The color, shape, size, texture, quantity, text, and spatial relationships of the objects.3. Actions, events, behaviors temporal relationships, physical movement changes of the objects.4. background environment, light, style and atmosphere.5. camera angles, movements, and transitions used in the video:\u003C|eot_id|\u003E\u003C|start_header_id|\u003Euser\u003C|end_header_id|\u003E\n\n{}\u003C|eot_id|\u003E",
              "crop_start": 95
            },
            "multiline": true
          }
        ],
        "clip_l": [
          "CLIP",
          {
            "tooltip": "Use comfy clip model instead, in this case the text encoder loader's clip_l should be disabled"
          }
        ],
        "hyvid_cfg": [
          "HYVID_CFG"
        ],
        "model_to_offload": [
          "HYVIDEOMODEL",
          {
            "tooltip": "If connected, moves the video model to the offload device"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_encoders",
        "prompt"
      ],
      "optional": [
        "force_offload",
        "prompt_template",
        "custom_prompt_template",
        "clip_l",
        "hyvid_cfg",
        "model_to_offload"
      ]
    },
    "output": [
      "HYVIDEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_embeds"
    ],
    "name": "HyVideoTextEncode",
    "display_name": "HunyuanVideo TextEncode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoTextImageEncode": {
    "input": {
      "required": {
        "text_encoders": [
          "HYVIDTEXTENCODER"
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "image_token_selection_expr": [
          "STRING",
          {
            "default": "::4",
            "multiline": false
          }
        ]
      },
      "optional": {
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "prompt_template": [
          [
            "video",
            "image",
            "custom",
            "disabled"
          ],
          {
            "default": "video",
            "tooltip": "Use the default prompt templates for the llm text encoder"
          }
        ],
        "custom_prompt_template": [
          "PROMPT_TEMPLATE",
          {
            "default": {
              "template": "\u003C|start_header_id|\u003Esystem\u003C|end_header_id|\u003E\n\nDescribe the video by detailing the following aspects: 1. The main content and theme of the video.2. The color, shape, size, texture, quantity, text, and spatial relationships of the objects.3. Actions, events, behaviors temporal relationships, physical movement changes of the objects.4. background environment, light, style and atmosphere.5. camera angles, movements, and transitions used in the video:\u003C|eot_id|\u003E\u003C|start_header_id|\u003Euser\u003C|end_header_id|\u003E\n\n{}\u003C|eot_id|\u003E",
              "crop_start": 95
            },
            "multiline": true
          }
        ],
        "clip_l": [
          "CLIP",
          {
            "tooltip": "Use comfy clip model instead, in this case the text encoder loader's clip_l should be disabled"
          }
        ],
        "image1": [
          "IMAGE",
          {
            "default": null
          }
        ],
        "image2": [
          "IMAGE",
          {
            "default": null
          }
        ],
        "clip_text_override": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "hyvid_cfg": [
          "HYVID_CFG"
        ],
        "model_to_offload": [
          "HYVIDEOMODEL",
          {
            "tooltip": "Model to move to offload_device before encoding"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_encoders",
        "prompt",
        "image_token_selection_expr"
      ],
      "optional": [
        "force_offload",
        "prompt_template",
        "custom_prompt_template",
        "clip_l",
        "image1",
        "image2",
        "clip_text_override",
        "hyvid_cfg",
        "model_to_offload"
      ]
    },
    "output": [
      "HYVIDEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_embeds"
    ],
    "name": "HyVideoTextImageEncode",
    "display_name": "HunyuanVideo TextImageEncode (IP2V)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16"
          ],
          {
            "default": "bf16"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp8_scaled"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "main_device"
          }
        ]
      },
      "optional": {
        "attention_mode": [
          [
            "sdpa",
            "flash_attn_varlen",
            "sageattn",
            "sageattn_varlen",
            "comfy"
          ],
          {
            "default": "flash_attn"
          }
        ],
        "compile_args": [
          "COMPILEARGS"
        ],
        "block_swap_args": [
          "BLOCKSWAPARGS"
        ],
        "lora": [
          "HYVIDLORA",
          {
            "default": null
          }
        ],
        "auto_cpu_offload": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable auto offloading for reduced VRAM usage, implementation from DiffSynth-Studio, slightly different from block swapping and uses even less VRAM, but can be slower as you can't define how much VRAM to use"
          }
        ],
        "upcast_rope": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Upcast RoPE to fp32 for better accuracy, this is the default behaviour, disabling can improve speed and reduce memory use slightly"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision",
        "quantization",
        "load_device"
      ],
      "optional": [
        "attention_mode",
        "compile_args",
        "block_swap_args",
        "lora",
        "auto_cpu_offload",
        "upcast_rope"
      ]
    },
    "output": [
      "HYVIDEOMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "HyVideoModelLoader",
    "display_name": "HunyuanVideo Model Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoVAELoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/vae'"
          }
        ]
      },
      "optional": {
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "bf16"
          }
        ],
        "compile_args": [
          "COMPILEARGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ],
      "optional": [
        "precision",
        "compile_args"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "vae"
    ],
    "name": "HyVideoVAELoader",
    "display_name": "HunyuanVideo VAE Loader",
    "description": "Loads Hunyuan VAE model from 'ComfyUI/models/vae'",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "DownloadAndLoadHyVideoTextEncoder": {
    "input": {
      "required": {
        "llm_model": [
          [
            "Kijai/llava-llama-3-8b-text-encoder-tokenizer",
            "xtuner/llava-llama-3-8b-v1_1-transformers"
          ]
        ],
        "clip_model": [
          [
            "disabled",
            "openai/clip-vit-large-patch14"
          ]
        ],
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "bf16"
          }
        ]
      },
      "optional": {
        "apply_final_norm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "hidden_state_skip_layer": [
          "INT",
          {
            "default": 2
          }
        ],
        "quantization": [
          [
            "disabled",
            "bnb_nf4",
            "fp8_e4m3fn"
          ],
          {
            "default": "disabled"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "llm_model",
        "clip_model",
        "precision"
      ],
      "optional": [
        "apply_final_norm",
        "hidden_state_skip_layer",
        "quantization",
        "load_device"
      ]
    },
    "output": [
      "HYVIDTEXTENCODER"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_text_encoder"
    ],
    "name": "DownloadAndLoadHyVideoTextEncoder",
    "display_name": "(Down)Load HunyuanVideo TextEncoder",
    "description": "Loads Hunyuan text_encoder model from 'ComfyUI/models/LLM'",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoEncode": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "enable_vae_tiling": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Drastically reduces memory use but may introduce seams"
          }
        ],
        "temporal_tiling_sample_size": [
          "INT",
          {
            "default": 64,
            "min": 4,
            "max": 256,
            "tooltip": "Smaller values use less VRAM, model default is 64, any other value will cause stutter"
          }
        ],
        "spatial_tile_sample_min_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 2048,
            "step": 32,
            "tooltip": "Spatial tile minimum size in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "auto_tile_size": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Automatically set tile size based on defaults, above settings are ignored"
          }
        ]
      },
      "optional": {
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Strength of noise augmentation, helpful for leapfusion I2V where some noise can add motion and give sharper results"
          }
        ],
        "latent_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for leapfusion I2V where lower values allow for more motion"
          }
        ],
        "latent_dist": [
          [
            "sample",
            "mode"
          ],
          {
            "default": "sample",
            "tooltip": "Sampling mode for the VAE, sample uses the latent distribution, mode uses the mode of the latent distribution"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "image",
        "enable_vae_tiling",
        "temporal_tiling_sample_size",
        "spatial_tile_sample_min_size",
        "auto_tile_size"
      ],
      "optional": [
        "noise_aug_strength",
        "latent_strength",
        "latent_dist"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "HyVideoEncode",
    "display_name": "HunyuanVideo Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoBlockSwap": {
    "input": {
      "required": {
        "double_blocks_to_swap": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 20,
            "step": 1,
            "tooltip": "Number of double blocks to swap"
          }
        ],
        "single_blocks_to_swap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 40,
            "step": 1,
            "tooltip": "Number of single blocks to swap"
          }
        ],
        "offload_txt_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Offload txt_in layer"
          }
        ],
        "offload_img_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Offload img_in layer"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks_to_swap",
        "single_blocks_to_swap",
        "offload_txt_in",
        "offload_img_in"
      ]
    },
    "output": [
      "BLOCKSWAPARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "block_swap_args"
    ],
    "name": "HyVideoBlockSwap",
    "display_name": "HunyuanVideo BlockSwap",
    "description": "Settings for block swapping, reduces VRAM use by swapping blocks to CPU memory",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoTorchCompileSettings": {
    "input": {
      "required": {
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_single_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile single blocks"
          }
        ],
        "compile_double_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile double blocks"
          }
        ],
        "compile_txt_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile txt_in layers"
          }
        ],
        "compile_vector_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile vector_in layers"
          }
        ],
        "compile_final_layer": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile final layer"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_single_blocks",
        "compile_double_blocks",
        "compile_txt_in",
        "compile_vector_in",
        "compile_final_layer"
      ]
    },
    "output": [
      "COMPILEARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "torch_compile_args"
    ],
    "name": "HyVideoTorchCompileSettings",
    "display_name": "HunyuanVideo Torch Compile Settings",
    "description": "torch.compile settings, when connected to the model loader, torch.compile of the selected layers is attempted. Requires Triton and torch 2.5.0 is recommended",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoSTG": {
    "input": {
      "required": {
        "stg_mode": [
          [
            "STG-A",
            "STG-R"
          ]
        ],
        "stg_block_idx": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 39,
            "step": 1,
            "tooltip": "Block index to apply STG"
          }
        ],
        "stg_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "tooltip": "Recommended values are ≤2.0"
          }
        ],
        "stg_start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percentage of the steps to apply STG"
          }
        ],
        "stg_end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percentage of the steps to apply STG"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "stg_mode",
        "stg_block_idx",
        "stg_scale",
        "stg_start_percent",
        "stg_end_percent"
      ]
    },
    "output": [
      "STGARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "stg_args"
    ],
    "name": "HyVideoSTG",
    "display_name": "HunyuanVideo STG",
    "description": "Spatio Temporal Guidance, https://github.com/junhahyung/STGuidance",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoCFG": {
    "input": {
      "required": {
        "negative_prompt": [
          "STRING",
          {
            "default": "Aerial view, aerial view, overexposed, low quality, deformation, a poor composition, bad hands, bad teeth, bad eyes, bad limbs, distortion",
            "multiline": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "tooltip": "guidance scale"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percentage of the steps to apply CFG, rest of the steps use guidance_embeds"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percentage of the steps to apply CFG, rest of the steps use guidance_embeds"
          }
        ],
        "batched_cfg": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Calculate cond and uncond as a batch, increases memory usage but can be faster"
          }
        ],
        "use_cfg_zero_star": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Use CFG zero star"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "negative_prompt",
        "cfg",
        "start_percent",
        "end_percent",
        "batched_cfg",
        "use_cfg_zero_star"
      ]
    },
    "output": [
      "HYVID_CFG"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_cfg"
    ],
    "name": "HyVideoCFG",
    "display_name": "HunyuanVideo CFG",
    "description": "To use CFG with HunyuanVideo",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoCustomPromptTemplate": {
    "input": {
      "required": {
        "custom_prompt_template": [
          "STRING",
          {
            "default": "\u003C|start_header_id|\u003Esystem\u003C|end_header_id|\u003E\n\nDescribe the video by detailing the following aspects: 1. The main content and theme of the video.2. The color, shape, size, texture, quantity, text, and spatial relationships of the objects.3. Actions, events, behaviors temporal relationships, physical movement changes of the objects.4. background environment, light, style and atmosphere.5. camera angles, movements, and transitions used in the video:\u003C|eot_id|\u003E\u003C|start_header_id|\u003Euser\u003C|end_header_id|\u003E\n\n{}\u003C|eot_id|\u003E",
            "multiline": true
          }
        ],
        "crop_start": [
          "INT",
          {
            "default": 95,
            "tooltip": "To cropt the system prompt"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "custom_prompt_template",
        "crop_start"
      ]
    },
    "output": [
      "PROMPT_TEMPLATE"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_prompt_template"
    ],
    "name": "HyVideoCustomPromptTemplate",
    "display_name": "HunyuanVideo Custom Prompt Template",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoLatentPreview": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "min_val": [
          "FLOAT",
          {
            "default": -0.15,
            "min": -1,
            "max": 0,
            "step": 0.001
          }
        ],
        "max_val": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "r_bias": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.001
          }
        ],
        "g_bias": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.001
          }
        ],
        "b_bias": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "seed",
        "min_val",
        "max_val",
        "r_bias",
        "g_bias",
        "b_bias"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "images",
      "latent_rgb_factors"
    ],
    "name": "HyVideoLatentPreview",
    "display_name": "HunyuanVideo Latent Preview",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoLoraSelect": {
    "input": {
      "required": {
        "lora": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "tooltip": "LORA models are expected to be in ComfyUI/models/loras with .safetensors extension"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ]
      },
      "optional": {
        "prev_lora": [
          "HYVIDLORA",
          {
            "default": null,
            "tooltip": "For loading multiple LoRAs"
          }
        ],
        "blocks": [
          "SELECTEDBLOCKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora",
        "strength"
      ],
      "optional": [
        "prev_lora",
        "blocks"
      ]
    },
    "output": [
      "HYVIDLORA"
    ],
    "output_is_list": [false],
    "output_name": [
      "lora"
    ],
    "name": "HyVideoLoraSelect",
    "display_name": "HunyuanVideo Lora Select",
    "description": "Select a LoRA model from ComfyUI/models/loras",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoLoraBlockEdit": {
    "input": {
      "required": {
        "double_blocks.0.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.1.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.2.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.3.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.4.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.5.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.6.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.7.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.8.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.9.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.10.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.11.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.12.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.13.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.14.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.15.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.16.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.17.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.18.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "double_blocks.19.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.0.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.1.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.2.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.3.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.4.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.5.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.6.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.7.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.8.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.9.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.10.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.11.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.12.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.13.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.14.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.15.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.16.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.17.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.18.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.19.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.20.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.21.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.22.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.23.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.24.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.25.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.26.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.27.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.28.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.29.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.30.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.31.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.32.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.33.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.34.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.35.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.36.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.37.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.38.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "single_blocks.39.": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "double_blocks.19.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "single_blocks.38.",
        "single_blocks.39."
      ]
    },
    "output": [
      "SELECTEDBLOCKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "blocks"
    ],
    "name": "HyVideoLoraBlockEdit",
    "display_name": "HunyuanVideo Lora Block Edit",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model."
    ]
  },
  "HyVideoTextEmbedsSave": {
    "input": {
      "required": {
        "hyvid_embeds": [
          "HYVIDEMBEDS"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "hyvid_embeds/hyvid_embed"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "hyvid_embeds",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "output_path"
    ],
    "name": "HyVideoTextEmbedsSave",
    "display_name": "HunyuanVideo TextEmbeds Save",
    "description": "Save the text embeds",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoTextEmbedsLoad": {
    "input": {
      "required": {
        "embeds": [
          [],
          {
            "tooltip": "The saved embeds to load from output/hyvid_embeds."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "embeds"
      ]
    },
    "output": [
      "HYVIDEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_embeds"
    ],
    "name": "HyVideoTextEmbedsLoad",
    "display_name": "HunyuanVideo TextEmbeds Load",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoContextOptions": {
    "input": {
      "required": {
        "context_schedule": [
          [
            "uniform_standard",
            "uniform_looped",
            "static_standard"
          ]
        ],
        "context_frames": [
          "INT",
          {
            "default": 65,
            "min": 2,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of pixel frames in the context, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "context_stride": [
          "INT",
          {
            "default": 4,
            "min": 4,
            "max": 100,
            "step": 1,
            "tooltip": "Context stride as pixel frames, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "context_overlap": [
          "INT",
          {
            "default": 4,
            "min": 4,
            "max": 100,
            "step": 1,
            "tooltip": "Context overlap as pixel frames, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "freenoise": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Shuffle the noise"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "context_schedule",
        "context_frames",
        "context_stride",
        "context_overlap",
        "freenoise"
      ]
    },
    "output": [
      "HYVIDCONTEXT"
    ],
    "output_is_list": [false],
    "output_name": [
      "context_options"
    ],
    "name": "HyVideoContextOptions",
    "display_name": "HunyuanVideo Context Options",
    "description": "Context options for HunyuanVideo, allows splitting the video into context windows and attemps blending them for longer generations than the model and memory otherwise would allow.",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoEnhanceAVideo": {
    "input": {
      "required": {
        "weight": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "tooltip": "The feta Weight of the Enhance-A-Video"
          }
        ],
        "single_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Enable Enhance-A-Video for single blocks"
          }
        ],
        "double_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Enable Enhance-A-Video for double blocks"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percentage of the steps to apply Enhance-A-Video"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percentage of the steps to apply Enhance-A-Video"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weight",
        "single_blocks",
        "double_blocks",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "FETAARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "feta_args"
    ],
    "name": "HyVideoEnhanceAVideo",
    "display_name": "HunyuanVideo Enhance A Video",
    "description": "https://github.com/NUS-HPC-AI-Lab/Enhance-A-Video",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoTeaCache": {
    "input": {
      "required": {
        "rel_l1_thresh": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Higher values will make TeaCache more aggressive, faster, but may cause artifacts"
          }
        ],
        "cache_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device",
            "tooltip": "Device to cache to"
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "Start step to apply TeaCache"
          }
        ],
        "end_step": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 100,
            "step": 1,
            "tooltip": "End step to apply TeaCache"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "rel_l1_thresh",
        "cache_device",
        "start_step",
        "end_step"
      ]
    },
    "output": [
      "TEACACHEARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "teacache_args"
    ],
    "name": "HyVideoTeaCache",
    "display_name": "HunyuanVideo TeaCache",
    "description": "TeaCache settings for HunyuanVideo to speed up inference",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoGetClosestBucketSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "base_size": [
          [
            "360",
            "540",
            "720"
          ],
          {
            "default": "540",
            "tooltip": "Resizes the input image to closest original training bucket size"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "base_size"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "HyVideoGetClosestBucketSize",
    "display_name": "HunyuanVideo Get Closest Bucket Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoI2VEncode": {
    "input": {
      "required": {
        "text_encoders": [
          "HYVIDTEXTENCODER"
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "prompt_template": [
          [
            "I2V_video",
            "I2V_image",
            "disabled"
          ],
          {
            "default": "I2V_video",
            "tooltip": "Use the default prompt templates for the llm text encoder"
          }
        ],
        "clip_l": [
          "CLIP",
          {
            "tooltip": "Use comfy clip model instead, in this case the text encoder loader's clip_l should be disabled"
          }
        ],
        "image": [
          "IMAGE",
          {
            "default": null
          }
        ],
        "hyvid_cfg": [
          "HYVID_CFG"
        ],
        "image_embed_interleave": [
          "INT",
          {
            "default": 2
          }
        ],
        "model_to_offload": [
          "HYVIDEOMODEL",
          {
            "tooltip": "Model to move to offload_device before encoding"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_encoders",
        "prompt"
      ],
      "optional": [
        "force_offload",
        "prompt_template",
        "clip_l",
        "image",
        "hyvid_cfg",
        "image_embed_interleave",
        "model_to_offload"
      ]
    },
    "output": [
      "HYVIDEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_embeds"
    ],
    "name": "HyVideoI2VEncode",
    "display_name": "HyVideo I2V Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoEncodeKeyframes": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "End frame for dashtoon keyframe LoRA"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 49,
            "min": 1,
            "max": 1024,
            "step": 4
          }
        ],
        "enable_vae_tiling": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Drastically reduces memory use but may introduce seams"
          }
        ],
        "temporal_tiling_sample_size": [
          "INT",
          {
            "default": 64,
            "min": 4,
            "max": 256,
            "tooltip": "Smaller values use less VRAM, model default is 64, any other value will cause stutter"
          }
        ],
        "spatial_tile_sample_min_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 2048,
            "step": 32,
            "tooltip": "Spatial tile minimum size in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "auto_tile_size": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Automatically set tile size based on defaults, above settings are ignored"
          }
        ]
      },
      "optional": {
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Strength of noise augmentation, helpful for leapfusion I2V where some noise can add motion and give sharper results"
          }
        ],
        "latent_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for leapfusion I2V where lower values allow for more motion"
          }
        ],
        "latent_dist": [
          [
            "sample",
            "mode"
          ],
          {
            "default": "sample",
            "tooltip": "Sampling mode for the VAE, sample uses the latent distribution, mode uses the mode of the latent distribution"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "start_image",
        "end_image",
        "num_frames",
        "enable_vae_tiling",
        "temporal_tiling_sample_size",
        "spatial_tile_sample_min_size",
        "auto_tile_size"
      ],
      "optional": [
        "noise_aug_strength",
        "latent_strength",
        "latent_dist"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "HyVideoEncodeKeyframes",
    "display_name": "HyVideo Encode Keyframes",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoTextEmbedBridge": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "tooltip": "guidance scale"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percentage of the steps to apply CFG, rest of the steps use guidance_embeds"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percentage of the steps to apply CFG, rest of the steps use guidance_embeds"
          }
        ],
        "batched_cfg": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Calculate cond and uncond as a batch, increases memory usage but can be faster"
          }
        ],
        "use_cfg_zero_star": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Use CFG zero star"
          }
        ]
      },
      "optional": {
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "cfg",
        "start_percent",
        "end_percent",
        "batched_cfg",
        "use_cfg_zero_star"
      ],
      "optional": [
        "negative"
      ]
    },
    "output": [
      "HYVIDEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_embeds"
    ],
    "name": "HyVideoTextEmbedBridge",
    "display_name": "HyVideo TextEmbed Bridge",
    "description": "Acts as a bridge between the native ComfyUI conditioning and the HunyuanVideoWrapper embeds",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoLoopArgs": {
    "input": {
      "required": {
        "shift_skip": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "tooltip": "Skip step of latent shift"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the looping effect"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the looping effect"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shift_skip",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "LOOPARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "loop_args"
    ],
    "name": "HyVideoLoopArgs",
    "display_name": "HyVideo Loop Args",
    "description": "Looping through latent shift as shown in https://github.com/YisuiTT/Mobius/",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HunyuanVideoFresca": {
    "input": {
      "required": {
        "fresca_scale_low": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "fresca_scale_high": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "fresca_freq_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "fresca_scale_low",
        "fresca_scale_high",
        "fresca_freq_cutoff"
      ]
    },
    "output": [
      "FRESCA_ARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "fresca_args"
    ],
    "name": "HunyuanVideoFresca",
    "display_name": "HunyuanVideo Fresca",
    "description": "https://github.com/WikiChao/FreSca",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HunyuanVideoSLG": {
    "input": {
      "required": {
        "double_blocks": [
          "STRING",
          {
            "default": "",
            "tooltip": "Blocks to skip uncond on, separated by comma, index starts from 0"
          }
        ],
        "single_blocks": [
          "STRING",
          {
            "default": "20",
            "tooltip": "Blocks to skip uncond on, separated by comma, index starts from 0"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of SLG signal"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of SLG signal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks",
        "single_blocks",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "SLGARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "slg_args"
    ],
    "name": "HunyuanVideoSLG",
    "display_name": "HunyuanVideo SLG",
    "description": "Skips uncond on the selected blocks",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoInverseSampler": {
    "input": {
      "required": {
        "model": [
          "HYVIDEOMODEL"
        ],
        "hyvid_embeds": [
          "HYVIDEMBEDS"
        ],
        "samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video process"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "embedded_guidance_scale": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "flow_shift": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 30,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "gamma": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "end_step": [
          "INT",
          {
            "default": 18,
            "min": 0
          }
        ],
        "gamma_trend": [
          [
            "constant",
            "linear_increase",
            "linear_decrease"
          ],
          {
            "default": "constant"
          }
        ]
      },
      "optional": {
        "interpolation_curve": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "forceInput": true,
            "tooltip": "The strength of the inversed latents along time, in latent space"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hyvid_embeds",
        "samples",
        "steps",
        "embedded_guidance_scale",
        "flow_shift",
        "seed",
        "force_offload",
        "gamma",
        "start_step",
        "end_step",
        "gamma_trend"
      ],
      "optional": [
        "interpolation_curve"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "HyVideoInverseSampler",
    "display_name": "HunyuanVideo Inverse Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoReSampler": {
    "input": {
      "required": {
        "model": [
          "HYVIDEOMODEL"
        ],
        "hyvid_embeds": [
          "HYVIDEMBEDS"
        ],
        "samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video process"
          }
        ],
        "inversed_latents": [
          "LATENT",
          {
            "tooltip": "inversed latents from HyVideoInverseSampler"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "embedded_guidance_scale": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "flow_shift": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 30,
            "step": 0.01
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "tooltip": "The step to start the effect of the inversed latents"
          }
        ],
        "end_step": [
          "INT",
          {
            "default": 18,
            "min": 0,
            "tooltip": "The step to end the effect of the inversed latents"
          }
        ],
        "eta_base": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "The base value of the eta, overall strength of the effect from the inversed latents"
          }
        ],
        "eta_trend": [
          [
            "constant",
            "linear_increase",
            "linear_decrease"
          ],
          {
            "default": "constant",
            "tooltip": "The trend of the eta value over steps"
          }
        ]
      },
      "optional": {
        "interpolation_curve": [
          "FLOAT",
          {
            "forceInput": true,
            "tooltip": "The strength of the inversed latents along time, in latent space"
          }
        ],
        "feta_args": [
          "FETAARGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hyvid_embeds",
        "samples",
        "inversed_latents",
        "steps",
        "embedded_guidance_scale",
        "flow_shift",
        "force_offload",
        "start_step",
        "end_step",
        "eta_base",
        "eta_trend"
      ],
      "optional": [
        "interpolation_curve",
        "feta_args"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "HyVideoReSampler",
    "display_name": "HunyuanVideo ReSampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoEmptyTextEmbeds": {
    "input": {
      "required": {

      }
    },
    "input_order": {
      "required": []
    },
    "output": [
      "HYVIDEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "hyvid_embeds"
    ],
    "name": "HyVideoEmptyTextEmbeds",
    "display_name": "HunyuanVideo Empty Text Embeds",
    "description": "Empty Text Embeds for HunyuanVideoWrapper, to avoid having to encode prompts for inverse sampling",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false
  },
  "HyVideoPromptMixSampler": {
    "input": {
      "required": {
        "model": [
          "HYVIDEOMODEL"
        ],
        "hyvid_embeds": [
          "HYVIDEMBEDS"
        ],
        "hyvid_embeds_2": [
          "HYVIDEMBEDS"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 17,
            "min": 1
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "embedded_guidance_scale": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "flow_shift": [
          "FLOAT",
          {
            "default": 9,
            "min": 1,
            "max": 30,
            "step": 0.01
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Adjusts the blending sharpness"
          }
        ]
      },
      "optional": {
        "interpolation_curve": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "forceInput": true,
            "tooltip": "The strength of the inversed latents along time, in latent space"
          }
        ],
        "feta_args": [
          "FETAARGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hyvid_embeds",
        "hyvid_embeds_2",
        "width",
        "height",
        "num_frames",
        "steps",
        "embedded_guidance_scale",
        "flow_shift",
        "force_offload",
        "seed",
        "alpha"
      ],
      "optional": [
        "interpolation_curve",
        "feta_args"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "HyVideoPromptMixSampler",
    "display_name": "HunyuanVideo Prompt Mix Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanVideoWrapper",
    "category": "HunyuanVideoWrapper",
    "output_node": false,
    "experimental": true
  },
  "BOOLConstant": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "value"
    ],
    "name": "BOOLConstant",
    "display_name": "BOOL Constant",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "INTConstant": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "value"
    ],
    "name": "INTConstant",
    "display_name": "INT Constant",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "FloatConstant": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.00001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "value"
    ],
    "name": "FloatConstant",
    "display_name": "Float Constant",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "StringConstant": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "StringConstant",
    "display_name": "String Constant",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "StringConstantMultiline": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "strip_newlines": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "strip_newlines"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "StringConstantMultiline",
    "display_name": "String Constant Multiline",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "ConditioningMultiCombine": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 20,
            "step": 1
          }
        ],
        "operation": [
          [
            "combine",
            "concat"
          ],
          {
            "default": "combine"
          }
        ],
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "operation",
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "combined",
      "inputcount"
    ],
    "name": "ConditioningMultiCombine",
    "display_name": "Conditioning Multi Combine",
    "description": "\nCombines multiple conditioning nodes into one\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "mask_1",
        "mask_2",
        "mask_1_strength",
        "mask_2_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine",
    "display_name": "ConditioningSetMaskAndCombine",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine3": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine3",
    "display_name": "ConditioningSetMaskAndCombine3",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine4": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "positive_4": [
          "CONDITIONING"
        ],
        "negative_4": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_4": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_4_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "positive_4",
        "negative_4",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_4",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "mask_4_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine4",
    "display_name": "ConditioningSetMaskAndCombine4",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine5": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "positive_4": [
          "CONDITIONING"
        ],
        "negative_4": [
          "CONDITIONING"
        ],
        "positive_5": [
          "CONDITIONING"
        ],
        "negative_5": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_4": [
          "MASK"
        ],
        "mask_5": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_4_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "mask_5_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "positive_4",
        "negative_4",
        "positive_5",
        "negative_5",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_4",
        "mask_5",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "mask_4_strength",
        "mask_5_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine5",
    "display_name": "ConditioningSetMaskAndCombine5",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "CondPassThrough": {
    "input": {
      "required": {

      },
      "optional": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "positive",
        "negative"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "CondPassThrough",
    "display_name": "CondPassThrough",
    "description": "\n    Simply passes through the positive and negative conditioning,\n    workaround for Set node not allowing bypassed inputs.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "DownloadAndLoadCLIPSeg": {
    "input": {
      "required": {
        "model": [
          [
            "Kijai/clipseg-rd64-refined-fp16",
            "CIDAS/clipseg-rd64-refined"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "CLIPSEGMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "clipseg_model"
    ],
    "name": "DownloadAndLoadCLIPSeg",
    "display_name": "(Down)load CLIPSeg",
    "description": "\nDownloads and loads CLIPSeg model with huggingface_hub,  \nto ComfyUI/models/clip_seg\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchCLIPSeg": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "binary_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "combine_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_cuda": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "blur_sigma": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "opt_model": [
          "CLIPSEGMODEL"
        ],
        "prev_mask": [
          "MASK",
          {
            "default": null
          }
        ],
        "image_bg_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "text",
        "threshold",
        "binary_mask",
        "combine_mask",
        "use_cuda"
      ],
      "optional": [
        "blur_sigma",
        "opt_model",
        "prev_mask",
        "image_bg_level",
        "invert"
      ]
    },
    "output": [
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "Mask",
      "Image"
    ],
    "name": "BatchCLIPSeg",
    "display_name": "Batch CLIPSeg",
    "description": "\nSegments an image or batch of images using CLIPSeg.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "ColorToMask": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "invert",
        "red",
        "green",
        "blue",
        "threshold",
        "per_batch"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ColorToMask",
    "display_name": "Color To Mask",
    "description": "\nConverts chosen RGB value to a mask.  \nWith batch inputs, the **per_batch**  \ncontrols the number of images processed at once.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "CreateGradientMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "CreateGradientMask",
    "display_name": "Create Gradient Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateTextMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "text_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 32,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "font_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "text": [
          "STRING",
          {
            "default": "HELLO!",
            "multiline": true
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "start_rotation": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 359,
            "step": 1
          }
        ],
        "end_rotation": [
          "INT",
          {
            "default": 0,
            "min": -359,
            "max": 359,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "text_x",
        "text_y",
        "font_size",
        "font_color",
        "text",
        "font",
        "width",
        "height",
        "start_rotation",
        "end_rotation"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "CreateTextMask",
    "display_name": "Create Text Mask",
    "description": "\nCreates a text image and mask.  \nLooks for fonts from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n  \nIf start_rotation and/or end_rotation are different values,  \ncreates animation between them.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "CreateAudioMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 2,
            "step": 0.01
          }
        ],
        "audio_path": [
          "STRING",
          {
            "default": "audio.wav"
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "scale",
        "audio_path",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "CreateAudioMask",
    "display_name": "Create Audio Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/deprecated",
    "output_node": false
  },
  "CreateFadeMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "start_level": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "midpoint_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "end_level": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "midpoint_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height",
        "interpolation",
        "start_level",
        "midpoint_level",
        "end_level",
        "midpoint_frame"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "CreateFadeMask",
    "display_name": "Create Fade Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/deprecated",
    "output_node": false
  },
  "CreateFadeMaskAdvanced": {
    "input": {
      "required": {
        "points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
            "multiline": true
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "none",
            "default_to_black"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "points_string",
        "invert",
        "frames",
        "width",
        "height",
        "interpolation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "CreateFadeMaskAdvanced",
    "display_name": "Create Fade Mask Advanced",
    "description": "\nCreate a batch of masks interpolated between given frames and values. \nUses same syntax as Fizz' BatchValueSchedule.\nFirst value is the frame index (not that this starts from 0, not 1) \nand the second value inside the brackets is the float value of the mask in range 0.0 - 1.0  \n\nFor example the default values:  \n0:(0.0)  \n7:(1.0)  \n15:(0.0)  \n  \nWould create a mask batch fo 16 frames, starting from black, \ninterpolating with the chosen curve to fully white at the 8th frame, \nand interpolating from that to fully black at the 16th frame.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateFluidMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "inflow_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_velocity": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_radius": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_padding": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_duration": [
          "INT",
          {
            "default": 60,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height",
        "inflow_count",
        "inflow_velocity",
        "inflow_radius",
        "inflow_padding",
        "inflow_duration"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "CreateFluidMask",
    "display_name": "Create Fluid Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateShapeMask": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "location_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "location_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "grow": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "frames",
        "location_x",
        "location_y",
        "grow",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateShapeMask",
    "display_name": "Create Shape Mask",
    "description": "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \nGrow value is the amount to grow the shape on each frame, creating animated masks.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateVoronoiMask": {
    "input": {
      "required": {
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "num_points": [
          "INT",
          {
            "default": 15,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "line_width": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "speed": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "frames",
        "num_points",
        "line_width",
        "speed",
        "frame_width",
        "frame_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateVoronoiMask",
    "display_name": "Create Voronoi Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateMagicMask": {
    "input": {
      "required": {
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "depth": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 500,
            "step": 1
          }
        ],
        "distortion": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ],
        "transitions": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "frames",
        "depth",
        "distortion",
        "seed",
        "transitions",
        "frame_width",
        "frame_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateMagicMask",
    "display_name": "Create Magic Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "GetMaskSizeAndCount": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "mask",
      "width",
      "height",
      "count"
    ],
    "name": "GetMaskSizeAndCount",
    "display_name": "Get Mask Size & Count",
    "description": "\nReturns the width, height and batch size of the mask,  \nand passes it through unchanged.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "GrowMaskWithBlur": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "incremental_expandrate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "flip_input": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "lerp_alpha": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "decay_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "fill_holes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "incremental_expandrate",
        "tapered_corners",
        "flip_input",
        "blur_radius",
        "lerp_alpha",
        "decay_factor"
      ],
      "optional": [
        "fill_holes"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "GrowMaskWithBlur",
    "display_name": "Grow Mask With Blur",
    "description": "\n# GrowMaskWithBlur\n- mask: Input mask or mask batch\n- expand: Expand or contract mask or mask batch by a given amount\n- incremental_expandrate: increase expand rate by a given amount per frame\n- tapered_corners: use tapered corners\n- flip_input: flip input mask\n- blur_radius: value higher than 0 will blur the mask\n- lerp_alpha: alpha value for interpolation between frames\n- decay_factor: decay value for interpolation between frames\n- fill_holes: fill holes in the mask (slow)",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "MaskBatchMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "mask_1",
        "mask_2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "masks"
    ],
    "name": "MaskBatchMulti",
    "display_name": "Mask Batch Multi",
    "description": "\nCreates an image batch from multiple masks.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "OffsetMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "angle": [
          "INT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1,
            "display": "number"
          }
        ],
        "duplication_factor": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000,
            "step": 1,
            "display": "number"
          }
        ],
        "roll": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "incremental": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "padding_mode": [
          [
            "empty",
            "border",
            "reflection"
          ],
          {
            "default": "empty"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "angle",
        "duplication_factor",
        "roll",
        "incremental",
        "padding_mode"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "mask"
    ],
    "name": "OffsetMask",
    "display_name": "Offset Mask",
    "description": "\nOffsets the mask by the specified amount.  \n - mask: Input mask or mask batch\n - x: Horizontal offset\n - y: Vertical offset\n - angle: Angle in degrees\n - roll: roll edge wrapping\n - duplication_factor: Number of times to duplicate the mask to form a batch\n - border padding_mode: Padding mode for the mask\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "RemapMaskRange": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0,
            "min": -10,
            "max": 1,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "min",
        "max"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "mask"
    ],
    "name": "RemapMaskRange",
    "display_name": "Remap Mask Range",
    "description": "\nSets new min and max values for the mask.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "ResizeMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "keep_proportions": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "width",
        "height",
        "keep_proportions",
        "upscale_method",
        "crop"
      ]
    },
    "output": [
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "mask",
      "width",
      "height"
    ],
    "name": "ResizeMask",
    "display_name": "Resize Mask",
    "description": "\nResizes the mask or batch of masks to the specified width and height.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "RoundMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "RoundMask",
    "display_name": "Round Mask",
    "description": "\nRounds the mask or batch of masks to a binary mask.  \n\u003Cimg src=\"https://github.com/kijai/ComfyUI-KJNodes/assets/40791699/52c85202-f74e-4b96-9dac-c8bda5ddcc40\" width=\"300\" height=\"250\" alt=\"RoundMask example\"\u003E\n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "SeparateMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "size_threshold_width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "size_threshold_height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "mode": [
          [
            "convex_polygons",
            "area",
            "box"
          ]
        ],
        "max_poly_points": [
          "INT",
          {
            "default": 8,
            "min": 3,
            "max": 32,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "size_threshold_width",
        "size_threshold_height",
        "mode",
        "max_poly_points"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "mask"
    ],
    "name": "SeparateMasks",
    "display_name": "Separate Masks",
    "description": "Separates a mask into multiple masks based on the size of the connected components.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": true
  },
  "AddLabel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text_x": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 48,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "font_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "label_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "text": [
          "STRING",
          {
            "default": "Text"
          }
        ],
        "direction": [
          [
            "up",
            "down",
            "left",
            "right",
            "overlay"
          ],
          {
            "default": "up"
          }
        ]
      },
      "optional": {
        "caption": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text_x",
        "text_y",
        "height",
        "font_size",
        "font_color",
        "label_color",
        "font",
        "text",
        "direction"
      ],
      "optional": [
        "caption"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "AddLabel",
    "display_name": "Add Label",
    "description": "\nCreates a new with the given text, and concatenates it to  \neither above or below the input image.  \nNote that this changes the input image's height!  \nFonts are loaded from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "ColorMatch": {
    "input": {
      "required": {
        "image_ref": [
          "IMAGE"
        ],
        "image_target": [
          "IMAGE"
        ],
        "method": [
          [
            "mkl",
            "hm",
            "reinhard",
            "mvgd",
            "hm-mvgd-hm",
            "hm-mkl-hm"
          ],
          {
            "default": "mkl"
          }
        ]
      },
      "optional": {
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "multithread": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_ref",
        "image_target",
        "method"
      ],
      "optional": [
        "strength",
        "multithread"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "ColorMatch",
    "display_name": "Color Match",
    "description": "\ncolor-matcher enables color transfer across images which comes in handy for automatic  \ncolor-grading of photographs, paintings and film sequences as well as light-field  \nand stopmotion corrections.  \n\nThe methods behind the mappings are based on the approach from Reinhard et al.,  \nthe Monge-Kantorovich Linearization (MKL) as proposed by Pitie et al. and our analytical solution  \nto a Multi-Variate Gaussian Distribution (MVGD) transfer in conjunction with classical histogram   \nmatching. As shown below our HM-MVGD-HM compound outperforms existing methods.   \nhttps://github.com/hahnec/color-matcher/\n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageTensorList": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageTensorList",
    "display_name": "Image Tensor List",
    "description": "\nCreates an image list from the input images.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CrossFadeImages": {
    "input": {
      "required": {
        "images_1": [
          "IMAGE"
        ],
        "images_2": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_start_index": [
          "INT",
          {
            "default": 1,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "start_level": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "end_level": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_1",
        "images_2",
        "interpolation",
        "transition_start_index",
        "transitioning_frames",
        "start_level",
        "end_level"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "CrossFadeImages",
    "display_name": "Cross Fade Images",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CrossFadeImagesMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "interpolation",
        "transitioning_frames"
      ],
      "optional": [
        "image_2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "CrossFadeImagesMulti",
    "display_name": "Cross Fade Images Multi",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetImagesFromBatchIndexed": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "indexes"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "GetImagesFromBatchIndexed",
    "display_name": "Get Images From Batch Indexed",
    "description": "\nSelects and returns the images at the specified indices as an image batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetImageRangeFromBatch": {
    "input": {
      "required": {
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "start_index",
        "num_frames"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "GetImageRangeFromBatch",
    "display_name": "Get Image or Mask Range From Batch",
    "description": "\nReturns a range of images from a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetLatentRangeFromBatch": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "start_index",
        "num_frames"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "GetLatentRangeFromBatch",
    "display_name": "Get Latent Range From Batch",
    "description": "\nReturns a range of latents from a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "GetImageSizeAndCount": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image",
      "width",
      "height",
      "count"
    ],
    "name": "GetImageSizeAndCount",
    "display_name": "Get Image Size & Count",
    "description": "\nReturns width, height and batch size of the image,  \nand passes it through unchanged.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "FastPreview": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "format": [
          [
            "JPEG",
            "PNG",
            "WEBP"
          ],
          {
            "default": "JPEG"
          }
        ],
        "quality": [
          "INT",
          {
            "default": 75,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "format",
        "quality"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FastPreview",
    "display_name": "Fast Preview",
    "description": "Experimental node for faster image previews by displaying through base64 it without saving to disk.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": true
  },
  "ImageBatchFilter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "empty_color": [
          "STRING",
          {
            "default": "0, 0, 0"
          }
        ],
        "empty_threshold": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "replacement_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "empty_color",
        "empty_threshold"
      ],
      "optional": [
        "replacement_image"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "images",
      "removed_indices"
    ],
    "name": "ImageBatchFilter",
    "display_name": "Image Batch Filter",
    "description": "Removes empty images from a batch",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageAndMaskPreview": {
    "input": {
      "required": {
        "mask_opacity": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "mask_color": [
          "STRING",
          {
            "default": "255, 255, 255"
          }
        ],
        "pass_through": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask_opacity",
        "mask_color",
        "pass_through"
      ],
      "optional": [
        "image",
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "composite"
    ],
    "name": "ImageAndMaskPreview",
    "display_name": "ImageAndMaskPreview",
    "description": "\nPreview an image or a mask, when both inputs are used  \ncomposites the mask on top of the image.\nwith pass_through on the preview is disabled and the  \ncomposite is returned from the composite slot instead,  \nthis allows for the preview to be passed for video combine  \nnodes for example.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": true
  },
  "ImageAddMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "blending": [
          [
            "add",
            "subtract",
            "multiply",
            "difference"
          ],
          {
            "default": "add"
          }
        ],
        "blend_amount": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "blending",
        "blend_amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "ImageAddMulti",
    "display_name": "Image Add Multi",
    "description": "\nAdd blends multiple images together.    \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchJoinWithTransition": {
    "input": {
      "required": {
        "images_1": [
          "IMAGE"
        ],
        "images_2": [
          "IMAGE"
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": -10000,
            "max": 10000,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "box",
            "circle",
            "horizontal door",
            "vertical door",
            "fade"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "CPU",
            "GPU"
          ],
          {
            "default": "CPU"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_1",
        "images_2",
        "start_index",
        "interpolation",
        "transition_type",
        "transitioning_frames",
        "blur_radius",
        "reverse",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchJoinWithTransition",
    "display_name": "Image Batch Join With Transition",
    "description": "\nTransitions between two batches of images, starting at a specified index in the first batch.\nDuring the transition, frames from both batches are blended frame-by-frame, so the video keeps playing.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1"
      ],
      "optional": [
        "image_2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "ImageBatchMulti",
    "display_name": "Image Batch Multi",
    "description": "\nCreates an image batch from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchRepeatInterleaving": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "repeats"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageBatchRepeatInterleaving",
    "display_name": "ImageBatchRepeatInterleaving",
    "description": "\nRepeats each image in a batch by the specified number of times.  \nExample batch of 5 images: 0, 1 ,2, 3, 4  \nwith repeats 2 becomes batch of 10 images: 0, 0, 1, 1, 2, 2, 3, 3, 4, 4  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchTestPattern": {
    "input": {
      "required": {
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "start_from": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "text_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 255,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_size",
        "start_from",
        "text_x",
        "text_y",
        "width",
        "height",
        "font",
        "font_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchTestPattern",
    "display_name": "Image Batch Test Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "ImageConcanate": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "direction",
        "match_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageConcanate",
    "display_name": "Image Concatenate",
    "description": "\nConcatenates the image2 to image1 in the specified direction.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageConcatFromBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "num_columns": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "max_resolution": [
          "INT",
          {
            "default": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "num_columns",
        "match_image_size",
        "max_resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageConcatFromBatch",
    "display_name": "Image Concatenate From Batch",
    "description": "\n    Concatenates images from a batch into a grid with a specified number of columns.\n    ",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageConcatMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "direction",
        "match_image_size"
      ],
      "optional": [
        "image_2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "ImageConcatMulti",
    "display_name": "Image Concatenate Multi",
    "description": "\nCreates an image from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageCropByMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "ImageCropByMask",
    "display_name": "Image Crop By Mask",
    "description": "Crops the input images based on the provided mask.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageCropByMaskAndResize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "base_resolution": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "min_crop_resolution": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "max_crop_resolution": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "base_resolution",
        "padding",
        "min_crop_resolution",
        "max_crop_resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "images",
      "masks",
      "bbox"
    ],
    "name": "ImageCropByMaskAndResize",
    "display_name": "Image Crop By Mask And Resize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageCropByMaskBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "preserve_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bg_color": [
          "STRING",
          {
            "default": "0, 0, 0",
            "tooltip": "Color as RGB values in range 0-255, separated by commas."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "masks",
        "width",
        "height",
        "padding",
        "preserve_size",
        "bg_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "ImageCropByMaskBatch",
    "display_name": "Image Crop By Mask Batch",
    "description": "Crops the input images based on the provided masks.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageUncropByMask": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "bbox": [
          "BBOX"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "mask",
        "bbox"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "ImageUncropByMask",
    "display_name": "Image Uncrop By Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGrabPIL": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "delay": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "num_frames",
        "delay"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "ImageGrabPIL",
    "display_name": "Image Grab PIL",
    "description": "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridComposite2x2": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "image3",
        "image4"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridComposite2x2",
    "display_name": "Image Grid Composite 2x2",
    "description": "\nConcatenates the 4 input images into a 2x2 grid. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridComposite3x3": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ],
        "image5": [
          "IMAGE"
        ],
        "image6": [
          "IMAGE"
        ],
        "image7": [
          "IMAGE"
        ],
        "image8": [
          "IMAGE"
        ],
        "image9": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "image3",
        "image4",
        "image5",
        "image6",
        "image7",
        "image8",
        "image9"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridComposite3x3",
    "display_name": "Image Grid Composite 3x3",
    "description": "\nConcatenates the 9 input images into a 3x3 grid. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridtoBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "columns": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 8,
            "tooltip": "The number of columns in the grid."
          }
        ],
        "rows": [
          "INT",
          {
            "default": 0,
            "min": 1,
            "max": 8,
            "tooltip": "The number of rows in the grid. Set to 0 for automatic calculation."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "columns",
        "rows"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridtoBatch",
    "display_name": "Image Grid To Batch",
    "description": "Converts a grid of images to a batch of images.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageNoiseAugmentation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": null,
            "min": 0,
            "max": 100,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_aug_strength",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageNoiseAugmentation",
    "display_name": "Image Noise Augmentation",
    "description": "\n    Add noise to an image.  \n    ",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageNormalize_Neg1_To_1": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageNormalize_Neg1_To_1",
    "display_name": "Image Normalize -1 to 1",
    "description": "\nNormalize the images to be in the range [-1, 1]  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImagePass": {
    "input": {
      "required": {

      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImagePass",
    "display_name": "ImagePass",
    "description": "\nPasses the image through without modifying it.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImagePadKJ": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "extra_padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "pad_mode": [
          [
            "edge",
            "color"
          ]
        ],
        "color": [
          "STRING",
          {
            "default": "0, 0, 0",
            "tooltip": "Color as RGB values in range 0-255, separated by commas."
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "target_width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1,
            "forceInput": true
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "right",
        "top",
        "bottom",
        "extra_padding",
        "pad_mode",
        "color"
      ],
      "optional": [
        "mask",
        "target_width",
        "target_height"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "ImagePadKJ",
    "display_name": "ImagePad KJ",
    "description": "Pad the input image and optionally mask with the specified padding.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImagePadForOutpaintMasked": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaintMasked",
    "display_name": "Image Pad For Outpaint Masked",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaintTargetSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "target_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "target_width",
        "target_height",
        "feathering",
        "upscale_method"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaintTargetSize",
    "display_name": "Image Pad For Outpaint Target Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "image",
    "output_node": false
  },
  "ImagePrepForICLora": {
    "input": {
      "required": {
        "reference_image": [
          "IMAGE"
        ],
        "output_width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "output_height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "border_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "latent_image": [
          "IMAGE"
        ],
        "latent_mask": [
          "MASK"
        ],
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "reference_image",
        "output_width",
        "output_height",
        "border_width"
      ],
      "optional": [
        "latent_image",
        "latent_mask",
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePrepForICLora",
    "display_name": "Image Prep For ICLora",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "image",
    "output_node": false
  },
  "ImageResizeKJ": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "keep_proportion": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divisible_by": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      },
      "optional": {
        "get_image_size": [
          "IMAGE"
        ],
        "crop": [
          [
            "disabled",
            "center",
            0],
          {
            "tooltip": "0 will do the default center crop, this is a workaround for the widget order changing with the new frontend, as in old workflows the value of this widget becomes 0 automatically"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "upscale_method",
        "keep_proportion",
        "divisible_by"
      ],
      "optional": [
        "get_image_size",
        "crop"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "ImageResizeKJ",
    "display_name": "Resize Image (deprecated)",
    "description": "\nDEPRECATED!\n\nDue to ComfyUI frontend changes, this node should no longer be used, please check the   \nv2 of the node. This node is only kept to not completely break older workflows.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false,
    "deprecated": true
  },
  "ImageResizeKJv2": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "keep_proportion": [
          [
            "stretch",
            "resize",
            "pad",
            "pad_edge",
            "crop"
          ],
          {
            "default": false
          }
        ],
        "pad_color": [
          "STRING",
          {
            "default": "0, 0, 0",
            "tooltip": "Color to use for padding."
          }
        ],
        "crop_position": [
          [
            "center",
            "top",
            "bottom",
            "left",
            "right"
          ],
          {
            "default": "center"
          }
        ],
        "divisible_by": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "device": [
          [
            "cpu",
            "gpu"
          ]
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "upscale_method",
        "keep_proportion",
        "pad_color",
        "crop_position",
        "divisible_by"
      ],
      "optional": [
        "mask",
        "device"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "MASK"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "IMAGE",
      "width",
      "height",
      "mask"
    ],
    "name": "ImageResizeKJv2",
    "display_name": "Resize Image v2",
    "description": "\nResizes the image to the specified width and height.  \nSize can be retrieved from the input.\n\nKeep proportions keeps the aspect ratio of the image, by  \nhighest dimension.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageUpscaleWithModelBatched": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "images": [
          "IMAGE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "images",
        "per_batch"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModelBatched",
    "display_name": "Image Upscale With Model Batched",
    "description": "\nSame as ComfyUI native model upscaling node,  \nbut allows setting sub-batches for reduced VRAM usage.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "InsertImagesToBatchIndexed": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "images_to_insert": [
          "IMAGE"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ]
      },
      "optional": {
        "mode": [
          [
            "replace",
            "insert"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "images_to_insert",
        "indexes"
      ],
      "optional": [
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "InsertImagesToBatchIndexed",
    "display_name": "Insert Images To Batch Indexed",
    "description": "\nInserts images at the specified indices into the original image batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "InsertLatentToIndexed": {
    "input": {
      "required": {
        "source": [
          "LATENT"
        ],
        "destination": [
          "LATENT"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "destination",
        "index"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "InsertLatentToIndexed",
    "display_name": "Insert Latent To Index",
    "description": "\nInserts a latent at the specified index into the original latent batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "LoadAndResizeImage": {
    "input": {
      "required": {
        "image": [
          [
            "489997193_10232281832206775_7649528775188436456_n.jpg",
            "ComfyUI_00018_.png",
            "Screenshot 2025-07-19 110607.png",
            "example.png"
          ],
          {
            "image_upload": true
          }
        ],
        "resize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "keep_proportion": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divisible_by": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ],
        "mask_channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ],
          {
            "tooltip": "Channel to use for the mask output"
          }
        ],
        "background_color": [
          "STRING",
          {
            "default": "",
            "tooltip": "Fills the alpha channel with the specified color."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "resize",
        "width",
        "height",
        "repeat",
        "keep_proportion",
        "divisible_by",
        "mask_channel",
        "background_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "width",
      "height",
      "image_path"
    ],
    "name": "LoadAndResizeImage",
    "display_name": "Load & Resize Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "LoadImagesFromFolderKJ": {
    "input": {
      "required": {
        "folder": [
          "STRING",
          {
            "default": ""
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": -1,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": -1,
            "step": 1
          }
        ],
        "keep_aspect_ratio": [
          [
            "crop",
            "pad",
            "stretch"
          ]
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "include_subfolders": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "folder",
        "width",
        "height",
        "keep_aspect_ratio"
      ],
      "optional": [
        "image_load_cap",
        "start_index",
        "include_subfolders"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image",
      "mask",
      "count",
      "image_path"
    ],
    "name": "LoadImagesFromFolderKJ",
    "display_name": "Load Images From Folder (KJ)",
    "description": "Loads images from a folder into a batch, images are resized and loaded into a batch.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "MergeImageChannels": {
    "input": {
      "required": {
        "red": [
          "IMAGE"
        ],
        "green": [
          "IMAGE"
        ],
        "blue": [
          "IMAGE"
        ]
      },
      "optional": {
        "alpha": [
          "MASK",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "red",
        "green",
        "blue"
      ],
      "optional": [
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "MergeImageChannels",
    "display_name": "Merge Image Channels",
    "description": "\nMerges channel data into an image.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "PadImageBatchInterleaved": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "empty_frames_per_image": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "pad_frame_value": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "add_after_last": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "empty_frames_per_image",
        "pad_frame_value",
        "add_after_last"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "PadImageBatchInterleaved",
    "display_name": "Pad Image Batch Interleaved",
    "description": "\nInserts empty frames between the images in a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "PreviewAnimation": {
    "input": {
      "required": {
        "fps": [
          "FLOAT",
          {
            "default": 8,
            "min": 0.01,
            "max": 1000,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "fps"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAnimation",
    "display_name": "Preview Animation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "RemapImageRange": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0,
            "min": -10,
            "max": 1,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "clamp": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "min",
        "max",
        "clamp"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RemapImageRange",
    "display_name": "Remap Image Range",
    "description": "\nRemaps the image values to the specified range. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ReverseImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReverseImageBatch",
    "display_name": "Reverse Image Batch",
    "description": "\nReverses the order of the images in a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ReplaceImagesInBatch": {
    "input": {
      "required": {
        "start_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "original_images": [
          "IMAGE"
        ],
        "replacement_images": [
          "IMAGE"
        ],
        "original_masks": [
          "MASK"
        ],
        "replacement_masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "start_index"
      ],
      "optional": [
        "original_images",
        "replacement_images",
        "original_masks",
        "replacement_masks"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ReplaceImagesInBatch",
    "display_name": "Replace Images In Batch",
    "description": "\nReplaces the images in a batch, starting from the specified start index,  \nwith the replacement images.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "SaveImageWithAlpha": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "mask",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWithAlpha",
    "display_name": "Save Image With Alpha",
    "description": "\nSaves an image and mask as .PNG with the mask as the alpha channel. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "SaveImageKJ": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ],
        "output_folder": [
          "STRING",
          {
            "default": "output",
            "tooltip": "The folder to save the images to."
          }
        ]
      },
      "optional": {
        "caption_file_extension": [
          "STRING",
          {
            "default": ".txt",
            "tooltip": "The extension for the caption file."
          }
        ],
        "caption": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "string to save as .txt file"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "output_folder"
      ],
      "optional": [
        "caption_file_extension",
        "caption"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "filename"
    ],
    "name": "SaveImageKJ",
    "display_name": "Save Image KJ",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "ShuffleImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ShuffleImageBatch",
    "display_name": "Shuffle Image Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "SplitImageChannels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "red",
      "green",
      "blue",
      "mask"
    ],
    "name": "SplitImageChannels",
    "display_name": "Split Image Channels",
    "description": "\nSplits image channels into images where the selected channel  \nis repeated for all channels, and the alpha as a mask. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "TransitionImagesMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "box",
            "circle",
            "horizontal door",
            "vertical door",
            "fade"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "CPU",
            "GPU"
          ],
          {
            "default": "CPU"
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "interpolation",
        "transition_type",
        "transitioning_frames",
        "blur_radius",
        "reverse",
        "device"
      ],
      "optional": [
        "image_2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "TransitionImagesMulti",
    "display_name": "Transition Images Multi",
    "description": "\nCreates transitions between images.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "TransitionImagesInBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "box",
            "circle",
            "horizontal door",
            "vertical door",
            "fade"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "CPU",
            "GPU"
          ],
          {
            "default": "CPU"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "interpolation",
        "transition_type",
        "transitioning_frames",
        "blur_radius",
        "reverse",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "TransitionImagesInBatch",
    "display_name": "Transition Images In Batch",
    "description": "\nCreates transitions between images in a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "BatchCropFromMask": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "crop_size_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "bbox_smooth_alpha": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "masks",
        "crop_size_mult",
        "bbox_smooth_alpha"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "BBOX",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "original_images",
      "cropped_images",
      "bboxes",
      "width",
      "height"
    ],
    "name": "BatchCropFromMask",
    "display_name": "Batch Crop From Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchCropFromMaskAdvanced": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "crop_size_mult": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "bbox_smooth_alpha": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "masks",
        "crop_size_mult",
        "bbox_smooth_alpha"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "MASK",
      "IMAGE",
      "MASK",
      "BBOX",
      "BBOX",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false],
    "output_name": [
      "original_images",
      "cropped_images",
      "cropped_masks",
      "combined_crop_image",
      "combined_crop_masks",
      "bboxes",
      "combined_bounding_box",
      "bbox_width",
      "bbox_height"
    ],
    "name": "BatchCropFromMaskAdvanced",
    "display_name": "Batch Crop From Mask Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "FilterZeroMasksAndCorrespondingImages": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      },
      "optional": {
        "original_images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ],
      "optional": [
        "original_images"
      ]
    },
    "output": [
      "MASK",
      "IMAGE",
      "IMAGE",
      "INDEXES"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "non_zero_masks_out",
      "non_zero_mask_images_out",
      "zero_mask_images_out",
      "zero_mask_images_out_indexes"
    ],
    "name": "FilterZeroMasksAndCorrespondingImages",
    "display_name": "FilterZeroMasksAndCorrespondingImages",
    "description": "\nFilter out all the empty (i.e. all zero) mask in masks  \nAlso filter out all the corresponding images in original_images by indexes if provide  \n  \noriginal_images (optional): If provided, need have same length as masks.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "InsertImageBatchByIndexes": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "images_to_insert": [
          "IMAGE"
        ],
        "insert_indexes": [
          "INDEXES"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "images_to_insert",
        "insert_indexes"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images_after_insert"
    ],
    "name": "InsertImageBatchByIndexes",
    "display_name": "Insert Image Batch By Indexes",
    "description": "\nThis node is designed to be use with node FilterZeroMasksAndCorrespondingImages\nIt inserts the images_to_insert into images according to insert_indexes\n\nReturns:\n    images_after_insert: updated original images with origonal sequence order\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "BatchUncrop": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "cropped_images": [
          "IMAGE"
        ],
        "bboxes": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "crop_rescale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "border_top": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_bottom": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_left": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_right": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "cropped_images",
        "bboxes",
        "border_blending",
        "crop_rescale",
        "border_top",
        "border_bottom",
        "border_left",
        "border_right"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "BatchUncrop",
    "display_name": "Batch Uncrop",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchUncropAdvanced": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "cropped_images": [
          "IMAGE"
        ],
        "cropped_masks": [
          "MASK"
        ],
        "combined_crop_mask": [
          "MASK"
        ],
        "bboxes": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "crop_rescale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "use_combined_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_square_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "combined_bounding_box": [
          "BBOX",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "cropped_images",
        "cropped_masks",
        "combined_crop_mask",
        "bboxes",
        "border_blending",
        "crop_rescale",
        "use_combined_mask",
        "use_square_mask"
      ],
      "optional": [
        "combined_bounding_box"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "BatchUncropAdvanced",
    "display_name": "Batch Uncrop Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "SplitBboxes": {
    "input": {
      "required": {
        "bboxes": [
          "BBOX"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bboxes",
        "index"
      ]
    },
    "output": [
      "BBOX",
      "BBOX"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "bboxes_a",
      "bboxes_b"
    ],
    "name": "SplitBboxes",
    "display_name": "Split Bboxes",
    "description": "\nSplits the specified bbox list at the given index into two lists.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BboxToInt": {
    "input": {
      "required": {
        "bboxes": [
          "BBOX"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bboxes",
        "index"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false],
    "output_name": [
      "x_min",
      "y_min",
      "width",
      "height",
      "center_x",
      "center_y"
    ],
    "name": "BboxToInt",
    "display_name": "Bbox To Int",
    "description": "\nReturns selected index from bounding box list as integers.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BboxVisualize": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "bboxes": [
          "BBOX"
        ],
        "line_width": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "bboxes",
        "line_width"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "BboxVisualize",
    "display_name": "Bbox Visualize",
    "description": "\nVisualizes the specified bbox on the image.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "GenerateNoise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 0.01
          }
        ],
        "constant_batch_noise": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_channels": [
          [
            "4",
            "16"
          ]
        ],
        "shape": [
          [
            "BCHW",
            "BCTHW",
            "BTCHW"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "seed",
        "multiplier",
        "constant_batch_noise",
        "normalize"
      ],
      "optional": [
        "model",
        "sigmas",
        "latent_channels",
        "shape"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "GenerateNoise",
    "display_name": "Generate Noise",
    "description": "\nGenerates noise for injection or to be used as empty latents on samplers with add_noise off.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "FlipSigmasAdjusted": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "divide_by_last_sigma": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divide_by": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 0.01
          }
        ],
        "offset_by": [
          "INT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "divide_by_last_sigma",
        "divide_by",
        "offset_by"
      ]
    },
    "output": [
      "SIGMAS",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "SIGMAS",
      "sigmas_string"
    ],
    "name": "FlipSigmasAdjusted",
    "display_name": "Flip Sigmas Adjusted",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "InjectNoiseToLatent": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 200,
            "step": 0.0001
          }
        ],
        "noise": [
          "LATENT"
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "average": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "mix_randn_amount": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "strength",
        "noise",
        "normalize",
        "average"
      ],
      "optional": [
        "mask",
        "mix_randn_amount",
        "seed"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "InjectNoiseToLatent",
    "display_name": "Inject Noise To Latent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "CustomSigmas": {
    "input": {
      "required": {
        "sigmas_string": [
          "STRING",
          {
            "default": "14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029",
            "multiline": true
          }
        ],
        "interpolate_to_steps": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas_string",
        "interpolate_to_steps"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "CustomSigmas",
    "display_name": "Custom Sigmas",
    "description": "\nCreates a sigmas tensor from a string of comma separated values.  \nExamples: \n   \nNvidia's optimized AYS 10 step schedule for SD 1.5:  \n14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029  \nSDXL:   \n14.615, 6.315, 3.771, 2.181, 1.342, 0.862, 0.555, 0.380, 0.234, 0.113, 0.029  \nSVD:  \n700.00, 54.5, 15.886, 7.977, 4.248, 1.789, 0.981, 0.403, 0.173, 0.034, 0.002  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "StringToFloatList": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "1, 2, 3",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "StringToFloatList",
    "display_name": "String to Float List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "WidgetToString": {
    "input": {
      "required": {
        "id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100000,
            "step": 1
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "return_all": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "any_input": [
          "*"
        ],
        "node_title": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "allowed_float_decimals": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "tooltip": "Number of decimal places to display for float values"
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "id",
        "widget_name",
        "return_all"
      ],
      "optional": [
        "any_input",
        "node_title",
        "allowed_float_decimals"
      ],
      "hidden": [
        "extra_pnginfo",
        "prompt",
        "unique_id"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "WidgetToString",
    "display_name": "Widget To String",
    "description": "\nSelects a node and it's specified widget and outputs the value as a string.  \nIf no node id or title is provided it will use the 'any_input' link and use that node.  \nTo see node id's, enable node id display from Manager badge menu.  \nAlternatively you can search with the node title. Node titles ONLY exist if they  \nare manually edited!  \nThe 'any_input' is required for making sure the node you want the value from exists in the workflow.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "SaveStringKJ": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "string to save as .txt file"
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "text",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ],
        "output_folder": [
          "STRING",
          {
            "default": "output",
            "tooltip": "The folder to save the images to."
          }
        ]
      },
      "optional": {
        "file_extension": [
          "STRING",
          {
            "default": ".txt",
            "tooltip": "The extension for the caption file."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "filename_prefix",
        "output_folder"
      ],
      "optional": [
        "file_extension"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "filename"
    ],
    "name": "SaveStringKJ",
    "display_name": "Save String KJ",
    "description": "Saves the input string to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": true
  },
  "DummyOut": {
    "input": {
      "required": {
        "any_input": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "any_input"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "DummyOut",
    "display_name": "Dummy Out",
    "description": "\nDoes nothing, used to trigger generic workflow output.    \nA way to get previews in the UI without saving anything to disk.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": true
  },
  "GetLatentsFromBatchIndexed": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ],
        "latent_format": [
          [
            "BCHW",
            "BTCHW",
            "BCTHW"
          ],
          {
            "default": "BCHW"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "indexes",
        "latent_format"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "GetLatentsFromBatchIndexed",
    "display_name": "Get Latents From Batch Indexed",
    "description": "\nSelects and returns the latents at the specified indices as an latent batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "ScaleBatchPromptSchedule": {
    "input": {
      "required": {
        "input_str": [
          "STRING",
          {
            "forceInput": true,
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n"
          }
        ],
        "old_frame_count": [
          "INT",
          {
            "forceInput": true,
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "new_frame_count": [
          "INT",
          {
            "forceInput": true,
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_str",
        "old_frame_count",
        "new_frame_count"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "ScaleBatchPromptSchedule",
    "display_name": "Scale Batch Prompt Schedule",
    "description": "\nScales a batch schedule from Fizz' nodes BatchPromptSchedule\nto a different frame count.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "CameraPoseVisualizer": {
    "input": {
      "required": {
        "pose_file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "base_xval": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "zval": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 10,
            "step": 0.01
          }
        ],
        "use_exact_fx": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "relative_c2w": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "use_viewer": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "cameractrl_poses": [
          "CAMERACTRL_POSES",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_file_path",
        "base_xval",
        "zval",
        "scale",
        "use_exact_fx",
        "relative_c2w",
        "use_viewer"
      ],
      "optional": [
        "cameractrl_poses"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "CameraPoseVisualizer",
    "display_name": "Camera Pose Visualizer",
    "description": "\nVisualizes the camera poses, from Animatediff-Evolved CameraCtrl Pose  \nor a .txt file with RealEstate camera intrinsics and coordinates, in a 3D plot. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "AppendStringsToList": {
    "input": {
      "required": {
        "string1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "string2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string1",
        "string2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "AppendStringsToList",
    "display_name": "Append Strings To List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "JoinStrings": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": " ",
            "multiline": false
          }
        ]
      },
      "optional": {
        "string1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "string2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter"
      ],
      "optional": [
        "string1",
        "string2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JoinStrings",
    "display_name": "Join Strings",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "JoinStringMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "string_1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": " ",
            "multiline": false
          }
        ],
        "return_list": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "string_2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "string_1",
        "delimiter",
        "return_list"
      ],
      "optional": [
        "string_2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "string"
    ],
    "name": "JoinStringMulti",
    "display_name": "Join String Multi",
    "description": "\nCreates single string, or a list of strings, from  \nmultiple input strings.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "SomethingToString": {
    "input": {
      "required": {
        "input": [
          "*"
        ]
      },
      "optional": {
        "prefix": [
          "STRING",
          {
            "default": ""
          }
        ],
        "suffix": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ],
      "optional": [
        "prefix",
        "suffix"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "SomethingToString",
    "display_name": "Something To String",
    "description": "\nConverts any type to a string.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "Sleep": {
    "input": {
      "required": {
        "input": [
          "*"
        ],
        "minutes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1439
          }
        ],
        "seconds": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 59.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "minutes",
        "seconds"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "Sleep",
    "display_name": "Sleep",
    "description": "\nDelays the execution for the input amount of time.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "VRAM_Debug": {
    "input": {
      "required": {
        "empty_cache": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "gc_collect": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "unload_all_models": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "any_input": [
          "*"
        ],
        "image_pass": [
          "IMAGE"
        ],
        "model_pass": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "empty_cache",
        "gc_collect",
        "unload_all_models"
      ],
      "optional": [
        "any_input",
        "image_pass",
        "model_pass"
      ]
    },
    "output": [
      "*",
      "IMAGE",
      "MODEL",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "any_output",
      "image_pass",
      "model_pass",
      "freemem_before",
      "freemem_after"
    ],
    "name": "VRAM_Debug",
    "display_name": "VRAM Debug",
    "description": "\nReturns the inputs unchanged, they are only used as triggers,  \nand performs comfy model management functions and garbage collection,  \nreports free VRAM before and after the operations.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "EmptyLatentImagePresets": {
    "input": {
      "required": {
        "dimensions": [
          [
            "512 x 512 (1:1)",
            "768 x 512 (1.5:1)",
            "960 x 512 (1.875:1)",
            "1024 x 512 (2:1)",
            "1024 x 576 (1.778:1)",
            "1536 x 640 (2.4:1)",
            "1344 x 768 (1.75:1)",
            "1216 x 832 (1.46:1)",
            "1152 x 896 (1.286:1)",
            "1024 x 1024 (1:1)"
          ],
          {
            "default": "512 x 512 (1:1)"
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "invert",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "Latent",
      "Width",
      "Height"
    ],
    "name": "EmptyLatentImagePresets",
    "display_name": "Empty Latent Image Presets",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "EmptyLatentImageCustomPresets": {
    "input": {
      "required": {
        "dimensions": [
          []
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "invert",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "Latent",
      "Width",
      "Height"
    ],
    "name": "EmptyLatentImageCustomPresets",
    "display_name": "Empty Latent Image Custom Presets",
    "description": "\nGenerates an empty latent image with the specified dimensions.  \nThe choices are loaded from 'custom_dimensions.json' in the nodes folder.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "ModelPassThrough": {
    "input": {
      "required": {

      },
      "optional": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "ModelPassThrough",
    "display_name": "ModelPass",
    "description": "\n    Simply passes through the model,\n    workaround for Set node not allowing bypassed inputs.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "ModelSaveKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ],
        "model_key_prefix": [
          "STRING",
          {
            "default": "model.diffusion_model."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix",
        "model_key_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSaveKJ",
    "display_name": "Model Save KJ",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "SetShakkerLabsUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "canny",
            "tile",
            "depth",
            "blur",
            "pose",
            "gray",
            "low quality"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetShakkerLabsUnionControlNetType",
    "display_name": "Set Shakker Labs Union ControlNet Type",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "StyleModelApplyAdvanced": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApplyAdvanced",
    "display_name": "Style Model Apply Advanced",
    "description": "StyleModelApply but with strength parameter",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "NormalizedAmplitudeToMask": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_offset": [
          "INT",
          {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "location_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "location_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "size": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape": [
          [
            "none",
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "none"
          }
        ],
        "color": [
          [
            "white",
            "amplitude"
          ],
          {
            "default": "amplitude"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "width",
        "height",
        "frame_offset",
        "location_x",
        "location_y",
        "size",
        "shape",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "NormalizedAmplitudeToMask",
    "display_name": "NormalizedAmplitudeToMask",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates masks based on the normalized amplitude.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "NormalizedAmplitudeToFloatList": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "NormalizedAmplitudeToFloatList",
    "display_name": "NormalizedAmplitudeToFloatList",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates a list of floats from the normalized amplitude.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "OffsetMaskByNormalizedAmplitude": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "rotate": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "angle_multiplier": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.001,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "mask",
        "x",
        "y",
        "rotate",
        "angle_multiplier"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "mask"
    ],
    "name": "OffsetMaskByNormalizedAmplitude",
    "display_name": "OffsetMaskByNormalizedAmplitude",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nOffsets masks based on the normalized amplitude.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "ImageTransformByNormalizedAmplitude": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "zoom_scale": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.001,
            "display": "number"
          }
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -16383,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -16383,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "cumulative": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "zoom_scale",
        "x_offset",
        "y_offset",
        "cumulative",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageTransformByNormalizedAmplitude",
    "display_name": "ImageTransformByNormalizedAmplitude",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nTransforms image based on the normalized amplitude.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "AudioConcatenate": {
    "input": {
      "required": {
        "audio1": [
          "AUDIO"
        ],
        "audio2": [
          "AUDIO"
        ],
        "direction": [
          [
            "right",
            "left"
          ],
          {
            "default": "right"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio1",
        "audio2",
        "direction"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "AUDIO"
    ],
    "name": "AudioConcatenate",
    "display_name": "AudioConcatenate",
    "description": "\nConcatenates the audio1 to audio2 in the specified direction.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "SplineEditor": {
    "input": {
      "required": {
        "points_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "mask_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "mask_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "points_to_sample": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "sampling_method": [
          [
            "path",
            "time",
            "controlpoints",
            "speed"
          ],
          {
            "default": "time"
          }
        ],
        "interpolation": [
          [
            "cardinal",
            "monotone",
            "basis",
            "linear",
            "step-before",
            "step-after",
            "polar",
            "polar-reverse"
          ],
          {
            "default": "cardinal"
          }
        ],
        "tension": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "repeat_output": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "float_output_type": [
          [
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "list"
          }
        ]
      },
      "optional": {
        "min_value": [
          "FLOAT",
          {
            "default": 0,
            "min": -10000,
            "max": 10000,
            "step": 0.01
          }
        ],
        "max_value": [
          "FLOAT",
          {
            "default": 1,
            "min": -10000,
            "max": 10000,
            "step": 0.01
          }
        ],
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "points_store",
        "coordinates",
        "mask_width",
        "mask_height",
        "points_to_sample",
        "sampling_method",
        "interpolation",
        "tension",
        "repeat_output",
        "float_output_type"
      ],
      "optional": [
        "min_value",
        "max_value",
        "bg_image"
      ]
    },
    "output": [
      "MASK",
      "STRING",
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "mask",
      "coord_str",
      "float",
      "count",
      "normalized_str"
    ],
    "name": "SplineEditor",
    "display_name": "Spline Editor",
    "description": "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create values for various   \n## schedules and/or mask batches.  \n\n**Shift + click** to add control point at end.\n**Ctrl + click** to add control point (subdivide) between two points.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end.  \n  \nRight click on canvas for context menu:  \nNEW!:\n- Add new spline\n    - Creates a new spline on same canvas, currently these paths are only outputed  \n      as coordinates.\n- Add single point\n    - Creates a single point that only returns it's current position coords  \n- Delete spline\n    - Deletes the currently selected spline, you can select a spline by clicking on   \n    it's path, or cycle through them with the 'Next spline' -option.  \n\nThese are purely visual options, doesn't affect the output:  \n - Toggle handles visibility\n - Display sample points: display the points to be returned.  \n\n**points_to_sample** value sets the number of samples  \nreturned from the **drawn spline itself**, this is independent from the  \nactual control points, so the interpolation type matters.  \nsampling_method: \n - time: samples along the time axis, used for schedules  \n - path: samples along the path itself, useful for coordinates  \n - controlpoints: samples only the control points themselves  \n\noutput types:\n - mask batch  \n        example compatible nodes: anything that takes masks  \n - list of floats\n        example compatible nodes: IPAdapter weights  \n - pandas series\n        example compatible nodes: anything that takes Fizz'  \n        nodes Batch Value Schedule  \n - torch tensor  \n        example compatible nodes: unknown\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "CreateShapeImageOnPath": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "bg_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 100,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [1],
            "forceInput": true
          }
        ],
        "trailing": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "border_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "border_color": [
          "STRING",
          {
            "default": "black"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "coordinates",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height",
        "shape_color",
        "bg_color",
        "blur_radius",
        "intensity"
      ],
      "optional": [
        "size_multiplier",
        "trailing",
        "border_width",
        "border_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "CreateShapeImageOnPath",
    "display_name": "Create Shape Image On Path",
    "description": "\nCreates an image or batch of images with the specified shape.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CreateShapeMaskOnPath": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [1],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "coordinates",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateShapeMaskOnPath",
    "display_name": "Create Shape Mask On Path",
    "description": "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false,
    "deprecated": true
  },
  "CreateTextOnPath": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "default": "text",
            "multiline": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 42
          }
        ],
        "alignment": [
          [
            "left",
            "center",
            "right"
          ],
          {
            "default": "center"
          }
        ],
        "text_color": [
          "STRING",
          {
            "default": "white"
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [1],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "text",
        "frame_width",
        "frame_height",
        "font",
        "font_size",
        "alignment",
        "text_color"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MASK"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "image",
      "mask",
      "mask_inverted"
    ],
    "name": "CreateTextOnPath",
    "display_name": "Create Text On Path",
    "description": "\nCreates a mask or batch of masks with the specified text.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateGradientFromCoords": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "start_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "end_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "frame_width",
        "frame_height",
        "start_color",
        "end_color",
        "multiplier"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "CreateGradientFromCoords",
    "display_name": "Create Gradient From Coords",
    "description": "\nCreates a gradient image from coordinates.    \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CutAndDragOnPath": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mask": [
          "MASK"
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "inpaint": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "coordinates",
        "mask",
        "frame_width",
        "frame_height",
        "inpaint"
      ],
      "optional": [
        "bg_image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "CutAndDragOnPath",
    "display_name": "Cut And Drag On Path",
    "description": "\nCuts the masked area from the image, and drags it along the path. If inpaint is enabled, and no bg_image is provided, the cut area is filled using cv2 TELEA algorithm.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GradientToFloat": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "steps"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "float_x",
      "float_y"
    ],
    "name": "GradientToFloat",
    "display_name": "Gradient To Float",
    "description": "\nCalculates list of floats from image.    \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "WeightScheduleExtend": {
    "input": {
      "required": {
        "input_values_1": [
          "FLOAT",
          {
            "default": 0,
            "forceInput": true
          }
        ],
        "input_values_2": [
          "FLOAT",
          {
            "default": 0,
            "forceInput": true
          }
        ],
        "output_type": [
          [
            "match_input",
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "match_input"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values_1",
        "input_values_2",
        "output_type"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "WeightScheduleExtend",
    "display_name": "Weight Schedule Extend",
    "description": "\nExtends, and converts if needed, different value lists/series  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "MaskOrImageToWeight": {
    "input": {
      "required": {
        "output_type": [
          [
            "list",
            "pandas series",
            "tensor",
            "string"
          ],
          {
            "default": "list"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "output_type"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "FLOAT",
      "STRING"
    ],
    "name": "MaskOrImageToWeight",
    "display_name": "Mask Or Image To Weight",
    "description": "\nGets the mean values from mask or image batch  \nand returns that as the selected output type.   \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "WeightScheduleConvert": {
    "input": {
      "required": {
        "input_values": [
          "FLOAT",
          {
            "default": 0,
            "forceInput": true
          }
        ],
        "output_type": [
          [
            "match_input",
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "list"
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ]
      },
      "optional": {
        "remap_to_frames": [
          "INT",
          {
            "default": 0
          }
        ],
        "interpolation_curve": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "remap_values": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "remap_min": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000,
            "max": 100000,
            "step": 0.01
          }
        ],
        "remap_max": [
          "FLOAT",
          {
            "default": 1,
            "min": -100000,
            "max": 100000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values",
        "output_type",
        "invert",
        "repeat"
      ],
      "optional": [
        "remap_to_frames",
        "interpolation_curve",
        "remap_values",
        "remap_min",
        "remap_max"
      ]
    },
    "output": [
      "FLOAT",
      "STRING",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "FLOAT",
      "STRING",
      "INT"
    ],
    "name": "WeightScheduleConvert",
    "display_name": "Weight Schedule Convert",
    "description": "\nConverts different value lists/series to another type.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "FloatToMask": {
    "input": {
      "required": {
        "input_values": [
          "FLOAT",
          {
            "forceInput": true,
            "default": 0
          }
        ],
        "width": [
          "INT",
          {
            "default": 100,
            "min": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 100,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "FloatToMask",
    "display_name": "Float To Mask",
    "description": "\nGenerates a batch of masks based on the input float values.\nThe batch size is determined by the length of the input float values.\nEach mask is generated with the specified width and height.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "FloatToSigmas": {
    "input": {
      "required": {
        "float_list": [
          "FLOAT",
          {
            "default": 0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float_list"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FloatToSigmas",
    "display_name": "Float To Sigmas",
    "description": "\nCreates a sigmas tensor from list of float values.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "SigmasToFloat": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "float"
    ],
    "name": "SigmasToFloat",
    "display_name": "Sigmas To Float",
    "description": "\nCreates a float list from sigmas tensors.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "PlotCoordinates": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "default": "title",
            "multiline": false
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "bbox_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "bbox_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [1],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "text",
        "width",
        "height",
        "bbox_width",
        "bbox_height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "images",
      "width",
      "height",
      "bbox_width",
      "bbox_height"
    ],
    "name": "PlotCoordinates",
    "display_name": "Plot Coordinates",
    "description": "\nPlots coordinates to sequence of images using Matplotlib.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "InterpolateCoords": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "interpolation_curve": [
          "FLOAT",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "interpolation_curve"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "coordinates"
    ],
    "name": "InterpolateCoords",
    "display_name": "Interpolate Coords",
    "description": "\nInterpolates coordinates based on a curve.   \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "PointsEditor": {
    "input": {
      "required": {
        "points_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "neg_coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bbox_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bboxes": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bbox_format": [
          [
            "xyxy",
            "xywh"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "points_store",
        "coordinates",
        "neg_coordinates",
        "bbox_store",
        "bboxes",
        "bbox_format",
        "width",
        "height",
        "normalize"
      ],
      "optional": [
        "bg_image"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "BBOX",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "positive_coords",
      "negative_coords",
      "bbox",
      "bbox_mask",
      "cropped_image"
    ],
    "name": "PointsEditor",
    "display_name": "Points Editor",
    "description": "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create coordinates\n\n**Shift + click** to add a positive (green) point.\n**Shift + right click** to add a negative (red) point.\n**Ctrl + click** to draw a box.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end of the points array.  \n  \nTo add an image select the node and copy/paste or drag in the image.  \nOr from the bg_image input on queue (first frame of the batch).  \n\n**THE IMAGE IS SAVED TO THE NODE AND WORKFLOW METADATA**  \nyou can clear the image from the context menu by right clicking on the canvas  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "SoundReactive": {
    "input": {
      "required": {
        "sound_level": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 99999,
            "step": 0.01
          }
        ],
        "start_range_hz": [
          "INT",
          {
            "default": 150,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "end_range_hz": [
          "INT",
          {
            "default": 2000,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 99999,
            "step": 0.01
          }
        ],
        "smoothing_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sound_level",
        "start_range_hz",
        "end_range_hz",
        "multiplier",
        "smoothing_factor",
        "normalize"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "sound_level",
      "sound_level_int"
    ],
    "name": "SoundReactive",
    "display_name": "Sound Reactive",
    "description": "\nReacts to the sound level of the input.  \nUses your browsers sound input options and requires.  \nMeant to be used with realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "StableZero123_BatchSchedule": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "azimuth_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
            "multiline": true
          }
        ],
        "elevation_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(0.0),\n15:(0.0)\n",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "interpolation",
        "azimuth_points_string",
        "elevation_points_string"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_BatchSchedule",
    "display_name": "Stable Zero123 Batch Schedule",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "SV3D_BatchSchedule": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "azimuth_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n9:(180.0),\n20:(360.0)\n",
            "multiline": true
          }
        ],
        "elevation_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n9:(0.0),\n20:(0.0)\n",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "interpolation",
        "azimuth_points_string",
        "elevation_points_string"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_BatchSchedule",
    "display_name": "SV3D Batch Schedule",
    "description": "\nAllow scheduling of the azimuth and elevation conditions for SV3D.  \nNote that SV3D is still a video model and the schedule needs to always go forward  \nhttps://huggingface.co/stabilityai/sv3d\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "LoadResAdapterNormalization": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "resadapter_path": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "resadapter_path"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "LoadResAdapterNormalization",
    "display_name": "LoadResAdapterNormalization",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "Superprompt": {
    "input": {
      "required": {
        "instruction_prompt": [
          "STRING",
          {
            "default": "Expand the following prompt to add more detail",
            "multiline": true
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "max_new_tokens": [
          "INT",
          {
            "default": 128,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "instruction_prompt",
        "prompt",
        "max_new_tokens"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Superprompt",
    "display_name": "Superprompt",
    "description": "\n# SuperPrompt\nA T5 model fine-tuned on the SuperPrompt dataset for  \nupsampling text prompts to more detailed descriptions.  \nMeant to be used as a pre-generation step for text-to-image  \nmodels that benefit from more detailed prompts.  \nhttps://huggingface.co/roborovski/superprompt-v1\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "GLIGENTextBoxApplyBatchCoords": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "latents": [
          "LATENT"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [1],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "latents",
        "clip",
        "gligen_textbox_model",
        "coordinates",
        "text",
        "width",
        "height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "CONDITIONING",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "conditioning",
      "coord_preview"
    ],
    "name": "GLIGENTextBoxApplyBatchCoords",
    "display_name": "GLIGENTextBoxApplyBatchCoords",
    "description": "\nThis node allows scheduling GLIGEN text box positions in a batch,  \nto be used with AnimateDiff-Evolved. Intended to pair with the  \nSpline Editor -node.  \n\nGLIGEN model can be downloaded through the Manage's \"Install Models\" menu.  \nOr directly from here:  \nhttps://huggingface.co/comfyanonymous/GLIGEN_pruned_safetensors/tree/main  \n  \nInputs:  \n- **latents** input is used to calculate batch size  \n- **clip** is your standard text encoder, use same as for the main prompt  \n- **gligen_textbox_model** connects to GLIGEN Loader  \n- **coordinates** takes a json string of points, directly compatible  \nwith the spline editor node.\n- **text** is the part of the prompt to set position for  \n- **width** and **height** are the size of the GLIGEN bounding box  \n  \nOutputs:\n- **conditioning** goes between to clip text encode and the sampler  \n- **coord_preview** is an optional preview of the coordinates and  \nbounding boxes.\n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "Intrinsic_lora_sampling": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          [
            "intrinsic_lora_sd15_albedo.safetensors",
            "intrinsic_lora_sd15_depth.safetensors",
            "intrinsic_lora_sd15_normal.safetensors",
            "intrinsic_lora_sd15_shading.safetensors",
            "intrinsic_loras.txt"
          ]
        ],
        "task": [
          [
            "depth map",
            "surface normals",
            "albedo",
            "shading"
          ],
          {
            "default": "depth map"
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "optional_latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "task",
        "text",
        "clip",
        "vae",
        "per_batch"
      ],
      "optional": [
        "image",
        "optional_latent"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "LATENT"
    ],
    "name": "Intrinsic_lora_sampling",
    "display_name": "Intrinsic Lora Sampling",
    "description": "\nSampler to use the intrinsic loras:  \nhttps://github.com/duxiaodan/intrinsic-lora  \nThese LoRAs are tiny and thus included  \nwith this node pack.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes",
    "output_node": false
  },
  "CheckpointPerturbWeights": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "joint_blocks": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10,
            "step": 0.001
          }
        ],
        "final_layer": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10,
            "step": 0.001
          }
        ],
        "rest_of_the_blocks": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "joint_blocks",
        "final_layer",
        "rest_of_the_blocks",
        "seed"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "CheckpointPerturbWeights",
    "display_name": "CheckpointPerturbWeights",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": true
  },
  "Screencap_mss": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "delay": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "num_frames",
        "delay"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Screencap_mss",
    "display_name": "Screencap mss",
    "description": "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "WebcamCaptureCV2": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "cam_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "release": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "cam_index",
        "release"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "WebcamCaptureCV2",
    "display_name": "Webcam Capture CV2",
    "description": "\nCaptures a frame from a webcam using CV2.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "DifferentialDiffusionAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "samples",
        "mask",
        "multiplier"
      ]
    },
    "output": [
      "MODEL",
      "LATENT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MODEL",
      "LATENT"
    ],
    "name": "DifferentialDiffusionAdvanced",
    "display_name": "Differential Diffusion Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "_for_testing",
    "output_node": false
  },
  "DiTBlockLoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ]
      },
      "optional": {
        "lora_name": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "opt_lora_path": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "Absolute path of the LoRA."
          }
        ],
        "blocks": [
          "SELECTEDDITBLOCKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "strength_model"
      ],
      "optional": [
        "lora_name",
        "opt_lora_path",
        "blocks"
      ]
    },
    "output": [
      "MODEL",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "model",
      "rank"
    ],
    "name": "DiTBlockLoraLoader",
    "display_name": "DiT Block Lora Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "possible rank of the LoRA."
    ]
  },
  "FluxBlockLoraSelect": {
    "input": {
      "required": {
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37."
      ]
    },
    "output": [
      "SELECTEDDITBLOCKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "blocks"
    ],
    "name": "FluxBlockLoraSelect",
    "display_name": "Flux Block Lora Select",
    "description": "Select individual block alpha values, value of 0 removes the block altogether",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model."
    ]
  },
  "HunyuanVideoBlockLoraSelect": {
    "input": {
      "required": {
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "double_blocks.19.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.38.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "single_blocks.39.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "double_blocks.19.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "single_blocks.38.",
        "single_blocks.39."
      ]
    },
    "output": [
      "SELECTEDDITBLOCKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "blocks"
    ],
    "name": "HunyuanVideoBlockLoraSelect",
    "display_name": "Hunyuan Video Block Lora Select",
    "description": "Select individual block alpha values, value of 0 removes the block altogether",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model."
    ]
  },
  "Wan21BlockLoraSelect": {
    "input": {
      "required": {
        "blocks.0.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39."
      ]
    },
    "output": [
      "SELECTEDDITBLOCKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "blocks"
    ],
    "name": "Wan21BlockLoraSelect",
    "display_name": "Wan21 Block Lora Select",
    "description": "Select individual block alpha values, value of 0 removes the block altogether",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model."
    ]
  },
  "CustomControlNetWeightsFluxFromList": {
    "input": {
      "required": {
        "list_of_floats": [
          "FLOAT",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ],
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "list_of_floats"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras",
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "CustomControlNetWeightsFluxFromList",
    "display_name": "Custom ControlNet Weights Flux From List",
    "description": "Creates controlnet weights from a list of floats for Advanced-ControlNet",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/controlnet",
    "output_node": false
  },
  "CheckpointLoaderKJ": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp16",
            "bf16",
            "fp32"
          ]
        ],
        "compute_dtype": [
          [
            "default",
            "fp16",
            "bf16",
            "fp32"
          ],
          {
            "default": "default",
            "tooltip": "The compute dtype to use for the model."
          }
        ],
        "patch_cublaslinear": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable or disable the patching, won't take effect on already loaded models!"
          }
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda",
            "sageattn_qk_int8_pv_fp8_cuda++"
          ],
          {
            "default": false,
            "tooltip": "Patch comfy attention to use sageattn."
          }
        ],
        "enable_fp16_accumulation": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable torch.backends.cuda.matmul.allow_fp16_accumulation, requires pytorch 2.7.0 nightly."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "weight_dtype",
        "compute_dtype",
        "patch_cublaslinear",
        "sage_attention",
        "enable_fp16_accumulation"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderKJ",
    "display_name": "CheckpointLoaderKJ",
    "description": "Experimental node for patching torch.nn.Linear with CublasLinear.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "DiffusionModelLoaderKJ": {
    "input": {
      "required": {
        "model_name": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp16",
            "bf16",
            "fp32"
          ]
        ],
        "compute_dtype": [
          [
            "default",
            "fp16",
            "bf16",
            "fp32"
          ],
          {
            "default": "default",
            "tooltip": "The compute dtype to use for the model."
          }
        ],
        "patch_cublaslinear": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable or disable the patching, won't take effect on already loaded models!"
          }
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda",
            "sageattn_qk_int8_pv_fp8_cuda++"
          ],
          {
            "default": false,
            "tooltip": "Patch comfy attention to use sageattn."
          }
        ],
        "enable_fp16_accumulation": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable torch.backends.cuda.matmul.allow_fp16_accumulation, requires pytorch 2.7.0 nightly."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "weight_dtype",
        "compute_dtype",
        "patch_cublaslinear",
        "sage_attention",
        "enable_fp16_accumulation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "DiffusionModelLoaderKJ",
    "display_name": "Diffusion Model Loader KJ",
    "description": "Node for patching torch.nn.Linear with CublasLinear.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileModelFluxAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "double_blocks": [
          "STRING",
          {
            "default": "0-18",
            "multiline": true
          }
        ],
        "single_blocks": [
          "STRING",
          {
            "default": "0-37",
            "multiline": true
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ]
      },
      "optional": {
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "double_blocks",
        "single_blocks",
        "dynamic"
      ],
      "optional": [
        "dynamo_cache_size_limit"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelFluxAdvanced",
    "display_name": "TorchCompileModelFluxAdvanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "deprecated": true,
    "experimental": true
  },
  "TorchCompileModelFluxAdvancedV2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "double_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile double blocks"
          }
        ],
        "single_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile single blocks"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ]
      },
      "optional": {
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "double_blocks",
        "single_blocks",
        "dynamic"
      ],
      "optional": [
        "dynamo_cache_size_limit"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelFluxAdvancedV2",
    "display_name": "TorchCompileModelFluxAdvancedV2",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileModelHyVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_single_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile single blocks"
          }
        ],
        "compile_double_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile double blocks"
          }
        ],
        "compile_txt_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile txt_in layers"
          }
        ],
        "compile_vector_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile vector_in layers"
          }
        ],
        "compile_final_layer": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile final layer"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_single_blocks",
        "compile_double_blocks",
        "compile_txt_in",
        "compile_vector_in",
        "compile_final_layer"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelHyVideo",
    "display_name": "TorchCompileModelHyVideo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileVAE": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "compile_encoder": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile encoder"
          }
        ],
        "compile_decoder": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile decoder"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "backend",
        "fullgraph",
        "mode",
        "compile_encoder",
        "compile_decoder"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "VAE"
    ],
    "name": "TorchCompileVAE",
    "display_name": "TorchCompileVAE",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileControlNet": {
    "input": {
      "required": {
        "controlnet": [
          "CONTROL_NET"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "controlnet",
        "backend",
        "fullgraph",
        "mode"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "TorchCompileControlNet",
    "display_name": "TorchCompileControlNet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "PatchModelPatcherOrder": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "patch_order": [
          [
            "object_patch_first",
            "weight_patch_first"
          ],
          {
            "default": "weight_patch_first",
            "tooltip": "Patch the comfy patch_model function to load weight patches (LoRAs) before compiling the model"
          }
        ],
        "full_load": [
          [
            "enabled",
            "disabled",
            "auto"
          ],
          {
            "default": "auto",
            "tooltip": "Disabling may help with memory issues when loading large models, when changing this you should probably force model reload to avoid issues!"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "patch_order",
        "full_load"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelPatcherOrder",
    "display_name": "Patch Model Patcher Order",
    "description": "Patch the comfy patch_model function patching order, useful for torch.compile (used as object_patch) as it should come last if you want to use LoRAs with compile",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileLTXModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileLTXModel",
    "display_name": "TorchCompileLTXModel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileCosmosModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "tooltip": "Set the dynamo cache size limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileCosmosModel",
    "display_name": "TorchCompileCosmosModel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileModelWanVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_transformer_blocks_only": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile only transformer blocks"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_transformer_blocks_only"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelWanVideo",
    "display_name": "TorchCompileModelWanVideo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "deprecated": true,
    "experimental": true
  },
  "TorchCompileModelWanVideoV2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "compile_transformer_blocks_only": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile only transformer blocks, faster compile and less error prone"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "compile_transformer_blocks_only",
        "dynamo_cache_size_limit"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelWanVideoV2",
    "display_name": "TorchCompileModelWanVideoV2",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "PathchSageAttentionKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda",
            "sageattn_qk_int8_pv_fp8_cuda++"
          ],
          {
            "default": false,
            "tooltip": "Global patch comfy attention to use sageattn, once patched to revert back to normal you would need to run this node again with disabled option."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sage_attention"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "PathchSageAttentionKJ",
    "display_name": "Patch Sage Attention KJ",
    "description": "Experimental node for patching attention mode. This doesn't use the model patching system and thus can't be disabled without running the node again with 'disabled' option.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "LeapfusionHunyuanI2VPatcher": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 1000,
            "step": 1,
            "tooltip": "The index of the latent to be replaced. 0 for first frame and -1 for last"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "The start percentage of steps to apply"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "The end percentage of steps to apply"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "index",
        "start_percent",
        "end_percent",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "LeapfusionHunyuanI2VPatcher",
    "display_name": "Leapfusion Hunyuan I2V Patcher",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "VAELoaderKJ": {
    "input": {
      "required": {
        "vae_name": [
          [
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "device": [
          [
            "main_device",
            "cpu"
          ]
        ],
        "weight_dtype": [
          [
            "bf16",
            "fp16",
            "fp32"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name",
        "device",
        "weight_dtype"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "VAE"
    ],
    "name": "VAELoaderKJ",
    "display_name": "VAELoader KJ",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/vae",
    "output_node": false
  },
  "ScheduledCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "cfg",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [false],
    "output_name": [
      "GUIDER"
    ],
    "name": "ScheduledCFGGuidance",
    "display_name": "Scheduled CFG Guidance",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "ApplyRifleXRoPE_HunuyanVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT",
          {
            "tooltip": "Only used to get the latent count"
          }
        ],
        "k": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100,
            "step": 1,
            "tooltip": "Index of intrinsic frequency"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "k"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ApplyRifleXRoPE_HunuyanVideo",
    "display_name": "Apply RifleXRoPE HunuyanVideo",
    "description": "Extends the potential frame count of HunyuanVideo using this method: https://github.com/thu-ml/RIFLEx",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "ApplyRifleXRoPE_WanVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT",
          {
            "tooltip": "Only used to get the latent count"
          }
        ],
        "k": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 100,
            "step": 1,
            "tooltip": "Index of intrinsic frequency"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "k"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ApplyRifleXRoPE_WanVideo",
    "display_name": "Apply RifleXRoPE WanVideo",
    "description": "Extends the potential frame count of HunyuanVideo using this method: https://github.com/thu-ml/RIFLEx",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "WanVideoTeaCacheKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "rel_l1_thresh": [
          "FLOAT",
          {
            "default": 0.275,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Threshold for to determine when to apply the cache, compromise between speed and accuracy. When using coefficients a good value range is something between 0.2-0.4 for all but 1.3B model, which should be about 10 times smaller, same as when not using coefficients."
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "The start percentage of the steps to use with TeaCache."
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "The end percentage of the steps to use with TeaCache."
          }
        ],
        "cache_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device",
            "tooltip": "Device to cache to"
          }
        ],
        "coefficients": [
          [
            "disabled",
            "1.3B",
            "14B",
            "i2v_480",
            "i2v_720"
          ],
          {
            "default": "i2v_480",
            "tooltip": "Coefficients for rescaling the relative l1 distance, if disabled the threshold value should be about 10 times smaller than the value used with coefficients."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "rel_l1_thresh",
        "start_percent",
        "end_percent",
        "cache_device",
        "coefficients"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoTeaCacheKJ",
    "display_name": "WanVideo Tea Cache (native)",
    "description": "\nPatch WanVideo model to use TeaCache. Speeds up inference by caching the output and  \napplying it instead of doing the step.  Best results are achieved by choosing the  \nappropriate coefficients for the model. Early steps should never be skipped, with too  \naggressive values this can happen and the motion suffers. Starting later can help with that too.   \nWhen NOT using coefficients, the threshold value should be  \nabout 10 times smaller than the value used with coefficients.  \n\nOfficial recommended values https://github.com/ali-vilab/TeaCache/tree/main/TeaCache4Wan2.1:\n\n\n\u003Cpre style='font-family:monospace'\u003E\n+-------------------+--------+---------+--------+\n|       Model       |  Low   | Medium  |  High  |\n+-------------------+--------+---------+--------+\n| Wan2.1 t2v 1.3B  |  0.05  |  0.07   |  0.08  |\n| Wan2.1 t2v 14B   |  0.14  |  0.15   |  0.20  |\n| Wan2.1 i2v 480P  |  0.13  |  0.19   |  0.26  |\n| Wan2.1 i2v 720P  |  0.18  |  0.20   |  0.30  |\n+-------------------+--------+---------+--------+\n\u003C/pre\u003E \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/teacache",
    "output_node": false,
    "experimental": true
  },
  "WanVideoEnhanceAVideoKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT",
          {
            "tooltip": "Only used to get the latent count"
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Strength of the enhance effect"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "weight"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoEnhanceAVideoKJ",
    "display_name": "WanVideo Enhance A Video (native)",
    "description": "https://github.com/NUS-HPC-AI-Lab/Enhance-A-Video",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "SkipLayerGuidanceWanVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "blocks": [
          "STRING",
          {
            "default": "10",
            "multiline": false
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "blocks",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceWanVideo",
    "display_name": "Skip Layer Guidance WanVideo",
    "description": "Simplified skip layer guidance that only skips the uncond on selected blocks",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "TimerNodeKJ": {
    "input": {
      "required": {
        "any_input": [
          "*"
        ],
        "mode": [
          [
            "start",
            "stop"
          ]
        ],
        "name": [
          "STRING",
          {
            "default": "Timer"
          }
        ]
      },
      "optional": {
        "timer": [
          "TIMER"
        ]
      }
    },
    "input_order": {
      "required": [
        "any_input",
        "mode",
        "name"
      ],
      "optional": [
        "timer"
      ]
    },
    "output": [
      "*",
      "TIMER",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "any_output",
      "timer",
      "time"
    ],
    "name": "TimerNodeKJ",
    "display_name": "Timer Node KJ",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "HunyuanVideoEncodeKeyframesToCond": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "start_frame": [
          "IMAGE"
        ],
        "end_frame": [
          "IMAGE"
        ],
        "num_frames": [
          "INT",
          {
            "default": 33,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      },
      "optional": {
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "vae",
        "start_frame",
        "end_frame",
        "num_frames",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ],
      "optional": [
        "negative"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "model",
      "positive",
      "negative",
      "latent"
    ],
    "name": "HunyuanVideoEncodeKeyframesToCond",
    "display_name": "HunyuanVideo Encode Keyframes To Cond",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/videomodels",
    "output_node": false
  },
  "CFGZeroStarAndInit": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "use_zero_init": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "zero_init_steps": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "tooltip": "for zero init, starts from 0 so first step is always zeroed out if use_zero_init enabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "use_zero_init",
        "zero_init_steps"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "CFGZeroStarAndInit",
    "display_name": "CFG Zero Star/Init",
    "description": "https://github.com/WeichenFan/CFG-Zero-star",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "ModelPatchTorchSettings": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "enable_fp16_accumulation": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable torch.backends.cuda.matmul.allow_fp16_accumulation, requires pytorch 2.7.0 nightly."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "enable_fp16_accumulation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelPatchTorchSettings",
    "display_name": "Model Patch Torch Settings",
    "description": "Adds callbacks to model to set torch settings before and after running the model.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "WanVideoNAG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "nag_scale": [
          "FLOAT",
          {
            "default": 11,
            "min": 0,
            "max": 100,
            "step": 0.001,
            "tooltip": "Strength of negative guidance effect"
          }
        ],
        "nag_alpha": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.001,
            "tooltip": "Mixing coefficient in that controls the balance between the normalized guided representation and the original positive representation."
          }
        ],
        "nag_tau": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Clipping threshold that controls how much the guided attention can deviate from the positive attention."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning",
        "nag_scale",
        "nag_alpha",
        "nag_tau"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoNAG",
    "display_name": "WanVideoNAG",
    "description": "https://github.com/ChenDarYen/Normalized-Attention-Guidance",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "CreateInstanceDiffusionTracking": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "bbox_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "bbox_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "class_name": [
          "STRING",
          {
            "default": "class_name"
          }
        ],
        "class_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": "prompt",
            "multiline": true
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [1],
            "forceInput": true
          }
        ],
        "fit_in_frame": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "width",
        "height",
        "bbox_width",
        "bbox_height",
        "class_name",
        "class_id",
        "prompt"
      ],
      "optional": [
        "size_multiplier",
        "fit_in_frame"
      ]
    },
    "output": [
      "TRACKING",
      "STRING",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false],
    "output_name": [
      "tracking",
      "prompt",
      "width",
      "height",
      "bbox_width",
      "bbox_height"
    ],
    "name": "CreateInstanceDiffusionTracking",
    "display_name": "CreateInstanceDiffusionTracking",
    "description": "\nCreates tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n  \nInstanceDiffusion prompt format:  \n\"class_id.class_name\": \"prompt\",  \nfor example:  \n\"1.head\": \"((head))\",  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "AppendInstanceDiffusionTracking": {
    "input": {
      "required": {
        "tracking_1": [
          "TRACKING",
          {
            "forceInput": true
          }
        ],
        "tracking_2": [
          "TRACKING",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "prompt_1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "prompt_2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tracking_1",
        "tracking_2"
      ],
      "optional": [
        "prompt_1",
        "prompt_2"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "AppendInstanceDiffusionTracking",
    "display_name": "AppendInstanceDiffusionTracking",
    "description": "\nAppends tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "DrawInstanceDiffusionTracking": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "tracking": [
          "TRACKING",
          {
            "forceInput": true
          }
        ],
        "box_line_width": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "draw_text": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 20
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "tracking",
        "box_line_width",
        "draw_text",
        "font",
        "font_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "DrawInstanceDiffusionTracking",
    "display_name": "DrawInstanceDiffusionTracking",
    "description": "\nDraws the tracking data from  \nCreateInstanceDiffusionTracking -node.\n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "LoraExtractKJ": {
    "input": {
      "required": {
        "finetuned_model": [
          "MODEL"
        ],
        "original_model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "loras/ComfyUI_extracted_lora"
          }
        ],
        "rank": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "lora_type": [
          [
            "standard",
            "full_diff"
          ]
        ],
        "algorithm": [
          [
            "svd_linalg",
            "svd_lowrank"
          ],
          {
            "default": "svd",
            "tooltip": "SVD algorithm to use, svd_lowrank is faster but less accurate."
          }
        ],
        "lowrank_iters": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 100,
            "step": 1,
            "tooltip": "The number of subspace iterations for lowrank SVD algorithm."
          }
        ],
        "output_dtype": [
          [
            "fp16",
            "bf16",
            "fp32"
          ],
          {
            "default": "fp16"
          }
        ],
        "bias_diff": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "finetuned_model",
        "original_model",
        "filename_prefix",
        "rank",
        "lora_type",
        "algorithm",
        "lowrank_iters",
        "output_dtype",
        "bias_diff"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LoraExtractKJ",
    "display_name": "LoraExtractKJ",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/lora",
    "output_node": true
  },
  "MMAudioModelLoader": {
    "input": {
      "required": {
        "mmaudio_model": [
          [
            "apple_DFN5B-CLIP-ViT-H-14-384_fp32.safetensors",
            "mmaudio_large_44k_v2_fp32.safetensors",
            "mmaudio_synchformer_fp32.safetensors",
            "mmaudio_vae_44k_fp32.safetensors",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitattributes",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitignore",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\LICENSE",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\README.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\activations.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\activation1d.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation.cpp",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation_cuda.cu",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\compat.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\load.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\type_shim.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\act.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\filter.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\resample.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_discriminator_optimizer.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_generator.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\config.json",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\env.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\meldataset.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\.gitkeep",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\bias.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\explainability.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\overview.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\privacy.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\safety.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\utils.py"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/mmaudio' -folder"
          }
        ],
        "base_precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "fp16"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mmaudio_model",
        "base_precision"
      ]
    },
    "output": [
      "MMAUDIO_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "mmaudio_model"
    ],
    "name": "MMAudioModelLoader",
    "display_name": "MMAudio ModelLoader",
    "description": "",
    "python_module": "custom_nodes.comfyui-mmaudio",
    "category": "MMAudio",
    "output_node": false
  },
  "MMAudioFeatureUtilsLoader": {
    "input": {
      "required": {
        "vae_model": [
          [
            "apple_DFN5B-CLIP-ViT-H-14-384_fp32.safetensors",
            "mmaudio_large_44k_v2_fp32.safetensors",
            "mmaudio_synchformer_fp32.safetensors",
            "mmaudio_vae_44k_fp32.safetensors",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitattributes",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitignore",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\LICENSE",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\README.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\activations.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\activation1d.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation.cpp",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation_cuda.cu",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\compat.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\load.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\type_shim.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\act.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\filter.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\resample.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_discriminator_optimizer.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_generator.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\config.json",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\env.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\meldataset.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\.gitkeep",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\bias.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\explainability.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\overview.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\privacy.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\safety.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\utils.py"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/mmaudio'"
          }
        ],
        "synchformer_model": [
          [
            "apple_DFN5B-CLIP-ViT-H-14-384_fp32.safetensors",
            "mmaudio_large_44k_v2_fp32.safetensors",
            "mmaudio_synchformer_fp32.safetensors",
            "mmaudio_vae_44k_fp32.safetensors",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitattributes",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitignore",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\LICENSE",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\README.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\activations.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\activation1d.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation.cpp",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation_cuda.cu",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\compat.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\load.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\type_shim.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\act.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\filter.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\resample.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_discriminator_optimizer.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_generator.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\config.json",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\env.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\meldataset.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\.gitkeep",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\bias.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\explainability.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\overview.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\privacy.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\safety.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\utils.py"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/mmaudio'"
          }
        ],
        "clip_model": [
          [
            "apple_DFN5B-CLIP-ViT-H-14-384_fp32.safetensors",
            "mmaudio_large_44k_v2_fp32.safetensors",
            "mmaudio_synchformer_fp32.safetensors",
            "mmaudio_vae_44k_fp32.safetensors",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitattributes",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitignore",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\LICENSE",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\README.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\activations.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\activation1d.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation.cpp",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation_cuda.cu",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\compat.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\load.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\type_shim.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\act.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\filter.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\resample.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_discriminator_optimizer.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_generator.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\config.json",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\env.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\meldataset.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\.gitkeep",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\bias.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\explainability.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\overview.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\privacy.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\safety.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\utils.py"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/mmaudio'"
          }
        ]
      },
      "optional": {
        "bigvgan_vocoder_model": [
          "VOCODER_MODEL",
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/mmaudio'"
          }
        ],
        "mode": [
          [
            "16k",
            "44k"
          ],
          {
            "default": "44k"
          }
        ],
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "fp16"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_model",
        "synchformer_model",
        "clip_model"
      ],
      "optional": [
        "bigvgan_vocoder_model",
        "mode",
        "precision"
      ]
    },
    "output": [
      "MMAUDIO_FEATUREUTILS"
    ],
    "output_is_list": [false],
    "output_name": [
      "mmaudio_featureutils"
    ],
    "name": "MMAudioFeatureUtilsLoader",
    "display_name": "MMAudio FeatureUtilsLoader",
    "description": "",
    "python_module": "custom_nodes.comfyui-mmaudio",
    "category": "MMAudio",
    "output_node": false
  },
  "MMAudioSampler": {
    "input": {
      "required": {
        "mmaudio_model": [
          "MMAUDIO_MODEL"
        ],
        "feature_utils": [
          "MMAUDIO_FEATUREUTILS"
        ],
        "duration": [
          "FLOAT",
          {
            "default": 8,
            "step": 0.01,
            "tooltip": "Duration of the audio in seconds"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "step": 1,
            "tooltip": "Number of steps to interpolate"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 4.5,
            "step": 0.1,
            "tooltip": "Strength of the conditioning"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "mask_away_clip": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "If true, the clip video will be masked away"
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "If true, the model will be offloaded to the offload device"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mmaudio_model",
        "feature_utils",
        "duration",
        "steps",
        "cfg",
        "seed",
        "prompt",
        "negative_prompt",
        "mask_away_clip",
        "force_offload"
      ],
      "optional": [
        "images"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "audio"
    ],
    "name": "MMAudioSampler",
    "display_name": "MMAudio Sampler",
    "description": "",
    "python_module": "custom_nodes.comfyui-mmaudio",
    "category": "MMAudio",
    "output_node": false
  },
  "MMAudioVoCoderLoader": {
    "input": {
      "required": {
        "vocoder_model": [
          [
            "apple_DFN5B-CLIP-ViT-H-14-384_fp32.safetensors",
            "mmaudio_large_44k_v2_fp32.safetensors",
            "mmaudio_synchformer_fp32.safetensors",
            "mmaudio_vae_44k_fp32.safetensors",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitattributes",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\.gitignore",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\LICENSE",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\README.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\activations.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\activation1d.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation.cpp",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\anti_alias_activation_cuda.cu",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\compat.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\load.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\cuda\\type_shim.h",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\__init__.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\act.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\filter.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\alias_free_activation\\torch\\resample.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_discriminator_optimizer.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\bigvgan_generator.pt",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\config.json",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\env.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\meldataset.py",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\.gitkeep",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\bias.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\explainability.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\overview.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\privacy.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\nv-modelcard++\\safety.md",
            "nvidia\\bigvgan_v2_44khz_128band_512x\\utils.py"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/mmaudio'"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vocoder_model"
      ]
    },
    "output": [
      "VOCODER_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "mmaudio_vocoder"
    ],
    "name": "MMAudioVoCoderLoader",
    "display_name": "MMAudio VoCoderLoader",
    "description": "",
    "python_module": "custom_nodes.comfyui-mmaudio",
    "category": "MMAudio",
    "output_node": false
  },
  "OllamaVision": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "query": [
          "STRING",
          {
            "multiline": true,
            "default": "describe the image"
          }
        ],
        "debug": [
          [
            "enable",
            "disable"
          ]
        ],
        "url": [
          "STRING",
          {
            "multiline": false,
            "default": "http://127.0.0.1:11434"
          }
        ],
        "model": [
          [],
          {

          }
        ],
        "keep_alive": [
          "INT",
          {
            "default": 5,
            "min": -1,
            "max": 60,
            "step": 1
          }
        ],
        "format": [
          [
            "text",
            "json",
            ""
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 356678248,
            "min": 0,
            "max": 2147483648,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "query",
        "debug",
        "url",
        "model",
        "keep_alive",
        "format",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "description"
    ],
    "name": "OllamaVision",
    "display_name": "Ollama Vision",
    "description": "",
    "python_module": "custom_nodes.comfyui-ollama",
    "category": "Ollama",
    "output_node": false
  },
  "OllamaGenerate": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "What is Art?"
          }
        ],
        "debug": [
          [
            "enable",
            "disable"
          ]
        ],
        "url": [
          "STRING",
          {
            "multiline": false,
            "default": "http://127.0.0.1:11434"
          }
        ],
        "model": [
          [],
          {

          }
        ],
        "keep_alive": [
          "INT",
          {
            "default": 5,
            "min": -1,
            "max": 60,
            "step": 1
          }
        ],
        "format": [
          [
            "text",
            "json",
            ""
          ]
        ],
        "filter_thinking": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "debug",
        "url",
        "model",
        "keep_alive",
        "format",
        "filter_thinking"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "response"
    ],
    "name": "OllamaGenerate",
    "display_name": "Ollama Generate",
    "description": "",
    "python_module": "custom_nodes.comfyui-ollama",
    "category": "Ollama",
    "output_node": false
  },
  "OllamaGenerateAdvance": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "What is Art?"
          }
        ],
        "debug": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "url": [
          "STRING",
          {
            "multiline": false,
            "default": "http://127.0.0.1:11434"
          }
        ],
        "model": [
          [],
          {

          }
        ],
        "system": [
          "STRING",
          {
            "multiline": true,
            "default": "You are an art expert, gracefully describing your knowledge in art domain.",
            "title": "system"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 10399156,
            "min": 0,
            "max": 2147483648,
            "step": 1
          }
        ],
        "top_k": [
          "INT",
          {
            "default": 40,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "top_p": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "num_predict": [
          "INT",
          {
            "default": -1,
            "min": -2,
            "max": 2048,
            "step": 1
          }
        ],
        "tfs_z": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 1000,
            "step": 0.05
          }
        ],
        "keep_alive": [
          "INT",
          {
            "default": 5,
            "min": -1,
            "max": 60,
            "step": 1
          }
        ],
        "keep_context": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "format": [
          [
            "text",
            "json",
            ""
          ]
        ],
        "filter_thinking": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "context": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "debug",
        "url",
        "model",
        "system",
        "seed",
        "top_k",
        "top_p",
        "temperature",
        "num_predict",
        "tfs_z",
        "keep_alive",
        "keep_context",
        "format",
        "filter_thinking"
      ],
      "optional": [
        "context"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "response",
      "context"
    ],
    "name": "OllamaGenerateAdvance",
    "display_name": "Ollama Generate Advance",
    "description": "",
    "python_module": "custom_nodes.comfyui-ollama",
    "category": "Ollama",
    "output_node": false
  },
  "OllamaOptionsV2": {
    "input": {
      "required": {
        "enable_mirostat": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mirostat": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2,
            "step": 1
          }
        ],
        "enable_mirostat_eta": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mirostat_eta": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "step": 0.1
          }
        ],
        "enable_mirostat_tau": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mirostat_tau": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "step": 0.1
          }
        ],
        "enable_num_ctx": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "num_ctx": [
          "INT",
          {
            "default": 2048,
            "min": 0,
            "max": 2147483648,
            "step": 1
          }
        ],
        "enable_repeat_last_n": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "repeat_last_n": [
          "INT",
          {
            "default": 64,
            "min": -1,
            "max": 64,
            "step": 1
          }
        ],
        "enable_repeat_penalty": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "repeat_penalty": [
          "FLOAT",
          {
            "default": 1.1,
            "min": 0,
            "max": 2,
            "step": 0.05
          }
        ],
        "enable_temperature": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.8,
            "min": -10,
            "max": 10,
            "step": 0.05
          }
        ],
        "enable_seed": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 400467369,
            "min": 0,
            "max": 2147483648,
            "step": 1
          }
        ],
        "enable_stop": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "stop": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "enable_tfs_z": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "tfs_z": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 1000,
            "step": 0.05
          }
        ],
        "enable_num_predict": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "num_predict": [
          "INT",
          {
            "default": -1,
            "min": -2,
            "max": 2048,
            "step": 1
          }
        ],
        "enable_top_k": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "top_k": [
          "INT",
          {
            "default": 40,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "enable_top_p": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "top_p": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "enable_min_p": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "min_p": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "debug": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "enable_mirostat",
        "mirostat",
        "enable_mirostat_eta",
        "mirostat_eta",
        "enable_mirostat_tau",
        "mirostat_tau",
        "enable_num_ctx",
        "num_ctx",
        "enable_repeat_last_n",
        "repeat_last_n",
        "enable_repeat_penalty",
        "repeat_penalty",
        "enable_temperature",
        "temperature",
        "enable_seed",
        "seed",
        "enable_stop",
        "stop",
        "enable_tfs_z",
        "tfs_z",
        "enable_num_predict",
        "num_predict",
        "enable_top_k",
        "top_k",
        "enable_top_p",
        "top_p",
        "enable_min_p",
        "min_p",
        "debug"
      ]
    },
    "output": [
      "OLLAMA_OPTIONS"
    ],
    "output_is_list": [false],
    "output_name": [
      "options"
    ],
    "name": "OllamaOptionsV2",
    "display_name": "Ollama Options V2",
    "description": "",
    "python_module": "custom_nodes.comfyui-ollama",
    "category": "Ollama",
    "output_node": false
  },
  "OllamaConnectivityV2": {
    "input": {
      "required": {
        "url": [
          "STRING",
          {
            "multiline": false,
            "default": "http://127.0.0.1:11434"
          }
        ],
        "model": [
          [],
          {

          }
        ],
        "keep_alive": [
          "INT",
          {
            "default": 5,
            "min": -1,
            "max": 120,
            "step": 1
          }
        ],
        "keep_alive_unit": [
          [
            "minutes",
            "hours"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "url",
        "model",
        "keep_alive",
        "keep_alive_unit"
      ]
    },
    "output": [
      "OLLAMA_CONNECTIVITY"
    ],
    "output_is_list": [false],
    "output_name": [
      "connection"
    ],
    "name": "OllamaConnectivityV2",
    "display_name": "Ollama Connectivity V2",
    "description": "",
    "python_module": "custom_nodes.comfyui-ollama",
    "category": "Ollama",
    "output_node": false
  },
  "OllamaGenerateV2": {
    "input": {
      "required": {
        "system": [
          "STRING",
          {
            "multiline": true,
            "default": "You are an AI artist."
          }
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "What is art?"
          }
        ],
        "filter_thinking": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "keep_context": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "format": [
          [
            "text",
            "json"
          ]
        ]
      },
      "optional": {
        "connectivity": [
          "OLLAMA_CONNECTIVITY",
          {
            "forceInput": false
          }
        ],
        "options": [
          "OLLAMA_OPTIONS",
          {
            "forceInput": false
          }
        ],
        "images": [
          "IMAGE",
          {
            "forceInput": false
          }
        ],
        "context": [
          "OLLAMA_CONTEXT",
          {
            "forceInput": false
          }
        ],
        "meta": [
          "OLLAMA_META",
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "system",
        "prompt",
        "filter_thinking",
        "keep_context",
        "format"
      ],
      "optional": [
        "connectivity",
        "options",
        "images",
        "context",
        "meta"
      ]
    },
    "output": [
      "STRING",
      "OLLAMA_CONTEXT",
      "OLLAMA_META"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "result",
      "context",
      "meta"
    ],
    "name": "OllamaGenerateV2",
    "display_name": "Ollama Generate V2",
    "description": "",
    "python_module": "custom_nodes.comfyui-ollama",
    "category": "Ollama",
    "output_node": false
  },
  "OllamaSaveContext": {
    "input": {
      "required": {
        "context": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "context"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "context",
        "filename"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "OllamaSaveContext",
    "display_name": "Ollama Save Context",
    "description": "",
    "python_module": "custom_nodes.comfyui-ollama",
    "category": "Ollama",
    "output_node": true
  },
  "OllamaLoadContext": {
    "input": {
      "required": {
        "context_file": [
          [],
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "context_file"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "context"
    ],
    "name": "OllamaLoadContext",
    "display_name": "Ollama Load Context",
    "description": "",
    "python_module": "custom_nodes.comfyui-ollama",
    "category": "Ollama",
    "output_node": false
  },
  "ReActorFaceSwap": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "input_image": [
          "IMAGE"
        ],
        "swap_model": [
          [
            "hyperswap_1a_256.onnx",
            "inswapper_128.onnx"
          ]
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "face_restore_model": [
          [
            "none",
            "codeformer-v0.1.0.pth",
            "GFPGANv1.4.pth",
            "GPEN-BFR-2048.onnx"
          ]
        ],
        "face_restore_visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "detect_gender_input": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "detect_gender_source": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "input_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "source_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "console_log_level": [
          [0, 1, 2],
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "source_image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ],
        "face_boost": [
          "FACE_BOOST"
        ]
      },
      "hidden": {
        "faces_order": "FACES_ORDER"
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "input_image",
        "swap_model",
        "facedetection",
        "face_restore_model",
        "face_restore_visibility",
        "codeformer_weight",
        "detect_gender_input",
        "detect_gender_source",
        "input_faces_index",
        "source_faces_index",
        "console_log_level"
      ],
      "optional": [
        "source_image",
        "face_model",
        "face_boost"
      ],
      "hidden": [
        "faces_order"
      ]
    },
    "output": [
      "IMAGE",
      "FACE_MODEL",
      "IMAGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "SWAPPED_IMAGE",
      "FACE_MODEL",
      "ORIGINAL_IMAGE"
    ],
    "name": "ReActorFaceSwap",
    "display_name": "ReActor 🌌 Fast Face Swap",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorFaceSwapOpt": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "input_image": [
          "IMAGE"
        ],
        "swap_model": [
          [
            "hyperswap_1a_256.onnx",
            "inswapper_128.onnx"
          ]
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "face_restore_model": [
          [
            "none",
            "codeformer-v0.1.0.pth",
            "GFPGANv1.4.pth",
            "GPEN-BFR-2048.onnx"
          ]
        ],
        "face_restore_visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "source_image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ],
        "options": [
          "OPTIONS"
        ],
        "face_boost": [
          "FACE_BOOST"
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "input_image",
        "swap_model",
        "facedetection",
        "face_restore_model",
        "face_restore_visibility",
        "codeformer_weight"
      ],
      "optional": [
        "source_image",
        "face_model",
        "options",
        "face_boost"
      ]
    },
    "output": [
      "IMAGE",
      "FACE_MODEL",
      "IMAGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "SWAPPED_IMAGE",
      "FACE_MODEL",
      "ORIGINAL_IMAGE"
    ],
    "name": "ReActorFaceSwapOpt",
    "display_name": "ReActor 🌌 Fast Face Swap [OPTIONS]",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorOptions": {
    "input": {
      "required": {
        "input_faces_order": [
          [
            "left-right",
            "right-left",
            "top-bottom",
            "bottom-top",
            "small-large",
            "large-small"
          ],
          {
            "default": "large-small"
          }
        ],
        "input_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "detect_gender_input": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "source_faces_order": [
          [
            "left-right",
            "right-left",
            "top-bottom",
            "bottom-top",
            "small-large",
            "large-small"
          ],
          {
            "default": "large-small"
          }
        ],
        "source_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "detect_gender_source": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "console_log_level": [
          [0, 1, 2],
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_faces_order",
        "input_faces_index",
        "detect_gender_input",
        "source_faces_order",
        "source_faces_index",
        "detect_gender_source",
        "console_log_level"
      ]
    },
    "output": [
      "OPTIONS"
    ],
    "output_is_list": [false],
    "output_name": [
      "OPTIONS"
    ],
    "name": "ReActorOptions",
    "display_name": "ReActor 🌌 Options",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorFaceBoost": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "boost_model": [
          [
            "none",
            "codeformer-v0.1.0.pth",
            "GFPGANv1.4.pth",
            "GPEN-BFR-2048.onnx"
          ]
        ],
        "interpolation": [
          [
            "Nearest",
            "Bilinear",
            "Bicubic",
            "Lanczos"
          ],
          {
            "default": "Bicubic"
          }
        ],
        "visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "restore_with_main_after": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "boost_model",
        "interpolation",
        "visibility",
        "codeformer_weight",
        "restore_with_main_after"
      ]
    },
    "output": [
      "FACE_BOOST"
    ],
    "output_is_list": [false],
    "output_name": [
      "FACE_BOOST"
    ],
    "name": "ReActorFaceBoost",
    "display_name": "ReActor 🌌 Face Booster",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorMaskHelper": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "swapped_image": [
          "IMAGE"
        ],
        "bbox_model_name": [
          [
            "bbox/face_yolov8m.pt",
            "bbox/hand_yolov8s.pt",
            "segm/person_yolov8m-seg.pt"
          ]
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3,
            "min": 1,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_drop_size": [
          "INT",
          {
            "min": 1,
            "max": 8192,
            "step": 1,
            "default": 10
          }
        ],
        "sam_model_name": [
          [
            "sam_vit_b_01ec64.pth"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ],
        "morphology_operation": [
          [
            "dilate",
            "erode",
            "open",
            "close"
          ]
        ],
        "morphology_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 128,
            "step": 1
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 9,
            "min": 0,
            "max": 48,
            "step": 1
          }
        ],
        "sigma_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 3,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask_optional": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "swapped_image",
        "bbox_model_name",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "bbox_drop_size",
        "sam_model_name",
        "sam_dilation",
        "sam_threshold",
        "bbox_expansion",
        "mask_hint_threshold",
        "mask_hint_use_negative",
        "morphology_operation",
        "morphology_distance",
        "blur_radius",
        "sigma_factor"
      ],
      "optional": [
        "mask_optional"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "IMAGE",
      "MASK",
      "MASK_PREVIEW",
      "SWAPPED_FACE"
    ],
    "name": "ReActorMaskHelper",
    "display_name": "ReActor 🌌 Masking Helper",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorSetWeight": {
    "input": {
      "required": {
        "input_image": [
          "IMAGE"
        ],
        "faceswap_weight": [
          [
            "0%",
            "12.5%",
            "25%",
            "37.5%",
            "50%",
            "62.5%",
            "75%",
            "87.5%",
            "100%"
          ],
          {
            "default": "50%"
          }
        ]
      },
      "optional": {
        "source_image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_image",
        "faceswap_weight"
      ],
      "optional": [
        "source_image",
        "face_model"
      ]
    },
    "output": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "INPUT_IMAGE",
      "FACE_MODEL"
    ],
    "name": "ReActorSetWeight",
    "display_name": "ReActor 🌌 Set Face Swap Weight",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": true
  },
  "ReActorSaveFaceModel": {
    "input": {
      "required": {
        "save_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "face_model_name": [
          "STRING",
          {
            "default": "default"
          }
        ],
        "select_face_index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "save_mode",
        "face_model_name",
        "select_face_index"
      ],
      "optional": [
        "image",
        "face_model"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ReActorSaveFaceModel",
    "display_name": "Save Face Model 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": true
  },
  "ReActorLoadFaceModel": {
    "input": {
      "required": {
        "face_model": [
          [
            "none",
            "DAN_v2.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "face_model"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "FACE_MODEL"
    ],
    "name": "ReActorLoadFaceModel",
    "display_name": "Load Face Model 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorBuildFaceModel": {
    "input": {
      "required": {
        "save_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "send_only": [
          "BOOLEAN",
          {
            "default": false,
            "label_off": "NO",
            "label_on": "YES"
          }
        ],
        "face_model_name": [
          "STRING",
          {
            "default": "default"
          }
        ],
        "compute_method": [
          [
            "Mean",
            "Median",
            "Mode"
          ],
          {
            "default": "Mean"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "face_models": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "save_mode",
        "send_only",
        "face_model_name",
        "compute_method"
      ],
      "optional": [
        "images",
        "face_models"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "FACE_MODEL"
    ],
    "name": "ReActorBuildFaceModel",
    "display_name": "Build Blended Face Model 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": true
  },
  "ReActorMakeFaceModelBatch": {
    "input": {
      "required": {
        "face_model1": [
          "FACE_MODEL"
        ]
      },
      "optional": {
        "face_model2": [
          "FACE_MODEL"
        ],
        "face_model3": [
          "FACE_MODEL"
        ],
        "face_model4": [
          "FACE_MODEL"
        ],
        "face_model5": [
          "FACE_MODEL"
        ],
        "face_model6": [
          "FACE_MODEL"
        ],
        "face_model7": [
          "FACE_MODEL"
        ],
        "face_model8": [
          "FACE_MODEL"
        ],
        "face_model9": [
          "FACE_MODEL"
        ],
        "face_model10": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "face_model1"
      ],
      "optional": [
        "face_model2",
        "face_model3",
        "face_model4",
        "face_model5",
        "face_model6",
        "face_model7",
        "face_model8",
        "face_model9",
        "face_model10"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "FACE_MODELS"
    ],
    "name": "ReActorMakeFaceModelBatch",
    "display_name": "Make Face Model Batch 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorRestoreFace": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "model": [
          [
            "none",
            "codeformer-v0.1.0.pth",
            "GFPGANv1.4.pth",
            "GPEN-BFR-2048.onnx"
          ]
        ],
        "visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "facedetection",
        "model",
        "visibility",
        "codeformer_weight"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReActorRestoreFace",
    "display_name": "Restore Face 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorImageDublicator": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "count": [
          "INT",
          {
            "default": 1,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "count"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [true],
    "output_name": [
      "IMAGES"
    ],
    "name": "ReActorImageDublicator",
    "display_name": "Image Dublicator (List) 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ImageRGBA2RGB": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRGBA2RGB",
    "display_name": "Convert RGBA to RGB 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorUnload": {
    "input": {
      "required": {
        "trigger": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "trigger"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReActorUnload",
    "display_name": "Unload ReActor Models 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor-node",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ETN_LoadImageBase64": {
    "input": {
      "required": {
        "image": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ETN_LoadImageBase64",
    "display_name": "Load Image (Base64)",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": false
  },
  "ETN_LoadMaskBase64": {
    "input": {
      "required": {
        "mask": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ETN_LoadMaskBase64",
    "display_name": "Load Mask (Base64)",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": false
  },
  "ETN_SendImageWebSocket": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "format": [
          [
            "PNG",
            "JPEG"
          ],
          {
            "default": "PNG"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "format"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ETN_SendImageWebSocket",
    "display_name": "Send Image (WebSocket)",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": true
  },
  "ETN_CropImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 8192,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 8192,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ETN_CropImage",
    "display_name": "Crop Image",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": false
  },
  "ETN_ApplyMaskToImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ETN_ApplyMaskToImage",
    "display_name": "Apply Mask to Image",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": false
  },
  "ETN_ReferenceImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10
          }
        ],
        "range_start": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1
          }
        ],
        "range_end": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1
          }
        ]
      },
      "optional": {
        "reference_images": [
          "REFERENCE_IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "weight",
        "range_start",
        "range_end"
      ],
      "optional": [
        "reference_images"
      ]
    },
    "output": [
      "REFERENCE_IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "reference_images"
    ],
    "name": "ETN_ReferenceImage",
    "display_name": "Reference Image",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": false
  },
  "ETN_ApplyReferenceImages": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "references": [
          "REFERENCE_IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "clip_vision",
        "style_model",
        "references"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ETN_ApplyReferenceImages",
    "display_name": "Apply Reference Images",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": false
  },
  "ETN_TileLayout": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "min_tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "padding": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "blending": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 256,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "min_tile_size",
        "padding",
        "blending"
      ]
    },
    "output": [
      "TILE_LAYOUT"
    ],
    "output_is_list": [false],
    "output_name": [
      "TILE_LAYOUT"
    ],
    "name": "ETN_TileLayout",
    "display_name": "Create Tile Layout",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/tiles",
    "output_node": false
  },
  "ETN_ExtractImageTile": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "layout": [
          "TILE_LAYOUT"
        ],
        "index": [
          "INT",
          {
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "layout",
        "index"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ETN_ExtractImageTile",
    "display_name": "Extract Image Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/tiles",
    "output_node": false
  },
  "ETN_ExtractMaskTile": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "layout": [
          "TILE_LAYOUT"
        ],
        "index": [
          "INT",
          {
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "layout",
        "index"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ETN_ExtractMaskTile",
    "display_name": "Extract Mask Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/tiles",
    "output_node": false
  },
  "ETN_GenerateTileMask": {
    "input": {
      "required": {
        "layout": [
          "TILE_LAYOUT"
        ],
        "index": [
          "INT",
          {
            "min": 0
          }
        ]
      },
      "optional": {
        "blend": [
          "BOOLEAN"
        ]
      }
    },
    "input_order": {
      "required": [
        "layout",
        "index"
      ],
      "optional": [
        "blend"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ETN_GenerateTileMask",
    "display_name": "Generate Tile Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/tiles",
    "output_node": false
  },
  "ETN_MergeImageTile": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "layout": [
          "TILE_LAYOUT"
        ],
        "index": [
          "INT",
          {
            "min": 0
          }
        ],
        "tile": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "layout",
        "index",
        "tile"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ETN_MergeImageTile",
    "display_name": "Merge Image Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/tiles",
    "output_node": false
  },
  "ETN_BackgroundRegion": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "REGIONS"
    ],
    "output_is_list": [false],
    "output_name": [
      "REGIONS"
    ],
    "name": "ETN_BackgroundRegion",
    "display_name": "Background Region",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/regions",
    "output_node": false
  },
  "ETN_DefineRegion": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "regions": [
          "REGIONS"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "conditioning"
      ],
      "optional": [
        "regions"
      ]
    },
    "output": [
      "REGIONS"
    ],
    "output_is_list": [false],
    "output_name": [
      "REGIONS"
    ],
    "name": "ETN_DefineRegion",
    "display_name": "Define Region",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/regions",
    "output_node": false
  },
  "ETN_ListRegionMasks": {
    "input": {
      "required": {
        "regions": [
          "REGIONS"
        ]
      }
    },
    "input_order": {
      "required": [
        "regions"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ETN_ListRegionMasks",
    "display_name": "List Region Masks",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/regions",
    "output_node": false
  },
  "ETN_AttentionMask": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "regions": [
          "REGIONS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "regions"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ETN_AttentionMask",
    "display_name": "Regions Attention Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling/regions",
    "output_node": false
  },
  "ETN_NSFWFilter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sensitivity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sensitivity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ETN_NSFWFilter",
    "display_name": "NSFW Filter",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": false
  },
  "ETN_Translate": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "ETN_Translate",
    "display_name": "Translate Text",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "external_tooling",
    "output_node": false
  },
  "ETN_KritaOutput": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ETN_KritaOutput",
    "display_name": "Krita Output",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "krita",
    "output_node": true
  },
  "ETN_KritaSendText": {
    "input": {
      "required": {
        "value": [
          "*",
          {

          }
        ],
        "name": [
          "STRING",
          {
            "default": "Output"
          }
        ],
        "type": [
          [
            "text",
            "markdown",
            "html"
          ],
          {
            "default": "text"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "name",
        "type"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ETN_KritaSendText",
    "display_name": "Send Text",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "krita",
    "output_node": true
  },
  "ETN_KritaCanvas": {
    "input": {

    },
    "input_order": {

    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image",
      "width",
      "height",
      "seed"
    ],
    "name": "ETN_KritaCanvas",
    "display_name": "Krita Canvas",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "krita",
    "output_node": false
  },
  "ETN_KritaSelection": {
    "input": {

    },
    "input_order": {

    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "mask"
    ],
    "name": "ETN_KritaSelection",
    "display_name": "Krita Selection",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "krita",
    "output_node": false
  },
  "ETN_KritaImageLayer": {
    "input": {
      "required": {
        "name": [
          "STRING",
          {
            "default": "Image"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "name"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "ETN_KritaImageLayer",
    "display_name": "Krita Image Layer",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "krita",
    "output_node": false
  },
  "ETN_KritaMaskLayer": {
    "input": {
      "required": {
        "name": [
          "STRING",
          {
            "default": "Mask"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "name"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "mask"
    ],
    "name": "ETN_KritaMaskLayer",
    "display_name": "Krita Mask Layer",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "krita",
    "output_node": false
  },
  "ETN_Parameter": {
    "input": {
      "required": {
        "name": [
          "STRING",
          {
            "default": "Parameter"
          }
        ],
        "type": [
          [
            "auto",
            "number",
            "number (integer)",
            "toggle",
            "choice",
            "text",
            "prompt (positive)",
            "prompt (negative)"
          ],
          {
            "default": "auto"
          }
        ],
        "default": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "min": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "name",
        "type",
        "default"
      ],
      "optional": [
        "min",
        "max"
      ]
    },
    "output": [
      "BASIC"
    ],
    "output_is_list": [false],
    "output_name": [
      "value"
    ],
    "name": "ETN_Parameter",
    "display_name": "Parameter",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "krita",
    "output_node": false
  },
  "ETN_KritaStyle": {
    "input": {
      "required": {
        "name": [
          "STRING",
          {
            "default": "Style"
          }
        ],
        "sampler_preset": [
          [
            "auto",
            "regular",
            "live"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "name",
        "sampler_preset"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING",
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "gradient_estimation_cfg_pp",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "sa_solver",
        "sa_solver_pece",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "simple",
        "sgm_uniform",
        "karras",
        "exponential",
        "ddim_uniform",
        "beta",
        "normal",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "FLOAT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false],
    "output_name": [
      "model",
      "clip",
      "vae",
      "positive prompt",
      "negative prompt",
      "sampler name",
      "scheduler",
      "steps",
      "guidance"
    ],
    "name": "ETN_KritaStyle",
    "display_name": "Krita Style",
    "description": "",
    "python_module": "custom_nodes.comfyui-tooling-nodes",
    "category": "krita",
    "output_node": false
  },
  "JWImageLoadRGB": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "./image.png"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageLoadRGB",
    "display_name": "Image Load RGB",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLoadRGBA": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "./image.png"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "JWImageLoadRGBA",
    "display_name": "Image Load RGBA",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWLoadImagesFromString": {
    "input": {
      "required": {
        "paths": [
          "STRING",
          {
            "default": "./frame000001.png\n./frame000002.png\n./frame000003.png",
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "ignore_missing_images": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "paths",
        "ignore_missing_images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWLoadImagesFromString",
    "display_name": "Load Images From String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageSaveToPath": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "./image.png"
          }
        ],
        "image": [
          "IMAGE"
        ],
        "overwrite": [
          [
            "false",
            "true"
          ],
          {
            "default": "true"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "path",
        "image",
        "overwrite"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JWImageSaveToPath",
    "display_name": "Image Save To Path",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": true
  },
  "JWImageExtractFromBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "index"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageExtractFromBatch",
    "display_name": "Image Extract From Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageBatchCount": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWImageBatchCount",
    "display_name": "Get Image Batch Count",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "height",
        "width",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResize",
    "display_name": "Image Resize",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageFlip": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "direction": [
          [
            "horizontal",
            "vertical"
          ],
          {
            "default": "horizontal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "direction"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageFlip",
    "display_name": "Image Flip",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskResize": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "height",
        "width",
        "interpolation_mode"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "JWMaskResize",
    "display_name": "Mask Resize",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskLikeImageSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "value": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "value"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "JWMaskLikeImageSize",
    "display_name": "Mask Like Image Size",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeToSquare": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResizeToSquare",
    "display_name": "Image Resize to Square",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeByFactor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "step": 0.01,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResizeByFactor",
    "display_name": "Image Resize by Factor",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeByShorterSide": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResizeByShorterSide",
    "display_name": "Image Resize by Shorter Side",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeByLongerSide": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResizeByLongerSide",
    "display_name": "Image Resize by Longer Side",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeToClosestSDXLResolution": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "WIDTH",
      "HEIGHT"
    ],
    "name": "JWImageResizeToClosestSDXLResolution",
    "display_name": "Image Resize to Closest SDXL Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageCropToClosestSDXLResolution": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "WIDTH",
      "HEIGHT"
    ],
    "name": "JWImageCropToClosestSDXLResolution",
    "display_name": "Image Crop to Closest SDXL Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLoadRGBFromClipboard": {
    "input": {
      "required": {

      }
    },
    "input_order": {
      "required": []
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageLoadRGBFromClipboard",
    "display_name": "Image Load RGB From Clipboard",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLoadRGBA From Clipboard": {
    "input": {
      "required": {

      }
    },
    "input_order": {
      "required": []
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "JWImageLoadRGBA From Clipboard",
    "display_name": "Image Load RGBA From Clipboard",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWInteger": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWInteger",
    "display_name": "Integer",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerToFloat": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWIntegerToFloat",
    "display_name": "Integer to Float",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerToString": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "format_string": [
          "STRING",
          {
            "default": "{:04d}",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "format_string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWIntegerToString",
    "display_name": "Integer to String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerAdd": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerAdd",
    "display_name": "Integer Add",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerSub": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerSub",
    "display_name": "Integer Subtract",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerMul": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerMul",
    "display_name": "Integer Multiply",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerDiv": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWIntegerDiv",
    "display_name": "Integer Divide",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerAbsolute": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerAbsolute",
    "display_name": "Integer Absolute Value",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerMin": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerMin",
    "display_name": "Integer Minimum",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerMax": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerMax",
    "display_name": "Integer Maximum",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloat": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloat",
    "display_name": "Float",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatToInteger": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ],
        "mode": [
          [
            "round",
            "floor",
            "ceiling"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWFloatToInteger",
    "display_name": "Float to Integer",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatToString": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ],
        "format_string": [
          "STRING",
          {
            "default": "{:.6g}",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "format_string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWFloatToString",
    "display_name": "Float to String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatAdd": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatAdd",
    "display_name": "Float Add",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatSub": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatSub",
    "display_name": "Float Subtract",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatMul": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatMul",
    "display_name": "Float Multiply",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatDiv": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatDiv",
    "display_name": "Float Divide",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatAbsolute": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatAbsolute",
    "display_name": "Float Absolute Value",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatMin": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatMin",
    "display_name": "Float Minimum",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatMax": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -100000000000000000,
            "max": 100000000000000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatMax",
    "display_name": "Float Maximum",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWString": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWString",
    "display_name": "String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringToInteger": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "0",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "JWStringToInteger",
    "display_name": "String to Integer",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringToFloat": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "0.0",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWStringToFloat",
    "display_name": "String to Float",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringMultiline": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringMultiline",
    "display_name": "String (Multiline)",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringConcat": {
    "input": {
      "required": {
        "a": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "b": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringConcat",
    "display_name": "String Concatenate",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringReplace": {
    "input": {
      "required": {
        "source": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "to_replace": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "replace_with": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "to_replace",
        "replace_with"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringReplace",
    "display_name": "String Replace",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringSplit": {
    "input": {
      "required": {
        "source": [
          "STRING",
          {
            "default": "a,b",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "split_by": [
          "STRING",
          {
            "default": ",",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "from_right": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "split_by",
        "from_right"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "STRING",
      "STRING"
    ],
    "name": "JWStringSplit",
    "display_name": "String Split",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringGetLine": {
    "input": {
      "required": {
        "source": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "line_index": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "line_index"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringGetLine",
    "display_name": "String Get Line",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringUnescape": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringUnescape",
    "display_name": "String Unescape",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "RAFTEstimate": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b"
      ]
    },
    "output": [
      "RAFT_FLOW"
    ],
    "output_is_list": [false],
    "output_name": [
      "RAFT_FLOW"
    ],
    "name": "RAFTEstimate",
    "display_name": "RAFT Estimate",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "RAFTFlowToImage": {
    "input": {
      "required": {
        "raft_flow": [
          "RAFT_FLOW"
        ]
      }
    },
    "input_order": {
      "required": [
        "raft_flow"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RAFTFlowToImage",
    "display_name": "RAFT Flow to Image",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "RAFTLoadFlowFromEXRChannels": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "x_channel": [
          [
            "R",
            "G",
            "B",
            "A"
          ],
          {
            "default": "R"
          }
        ],
        "y_channel": [
          [
            "R",
            "G",
            "B",
            "A"
          ],
          {
            "default": "G"
          }
        ],
        "invert_x": [
          [
            "false",
            "true"
          ],
          {
            "default": "true"
          }
        ],
        "invert_y": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path",
        "x_channel",
        "y_channel",
        "invert_x",
        "invert_y"
      ]
    },
    "output": [
      "RAFT_FLOW"
    ],
    "output_is_list": [false],
    "output_name": [
      "RAFT_FLOW"
    ],
    "name": "RAFTLoadFlowFromEXRChannels",
    "display_name": "RAFT Load Flow from EXR Channels",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageStackChannels": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageStackChannels",
    "display_name": "Image Stack Channels",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageMix": {
    "input": {
      "required": {
        "blend_type": [
          [
            "mix",
            "multiply"
          ],
          {
            "default": "mix"
          }
        ],
        "factor": [
          "FLOAT",
          {
            "min": 0,
            "max": 1,
            "step": 0.01,
            "default": 0.5
          }
        ],
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "blend_type",
        "factor",
        "image_a",
        "image_b"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageMix",
    "display_name": "Image Mix",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageContrast": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 2,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageContrast",
    "display_name": "Image Contrast",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageSaturation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 2,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageSaturation",
    "display_name": "Image Saturation",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLevels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "min",
        "max"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageLevels",
    "display_name": "Image Levels",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWDatetimeString": {
    "input": {
      "required": {
        "format": [
          "STRING",
          {
            "default": "%Y-%m-%dT%H:%M:%S"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "format"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "JWDatetimeString",
    "display_name": "Datetime String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWLoadImageSequence": {
    "input": {
      "required": {
        "path_pattern": [
          "STRING",
          {
            "default": "./frame{:06d}.png",
            "multiline": false
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "frame_count": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "ignore_missing_images": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path_pattern",
        "start_index",
        "frame_count",
        "ignore_missing_images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWLoadImageSequence",
    "display_name": "Batch Load Image Sequence",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWLoadImageSequenceWithStopIndex": {
    "input": {
      "required": {
        "path_pattern": [
          "STRING",
          {
            "default": "./frame{:06d}.png",
            "multiline": false
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1,
            "max": 999999
          }
        ],
        "stop_index": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1,
            "max": 999999
          }
        ],
        "inclusive": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ],
        "ignore_missing_images": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path_pattern",
        "start_index",
        "stop_index",
        "inclusive",
        "ignore_missing_images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWLoadImageSequenceWithStopIndex",
    "display_name": "Batch Load Image Sequence With Stop Index",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageSequenceExtractFromBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "i_start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "i_stop": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "inclusive": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "i_start",
        "i_stop",
        "inclusive"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageSequenceExtractFromBatch",
    "display_name": "Extract Image Sequence From Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWSaveImageSequence": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "path_pattern": [
          "STRING",
          {
            "default": "./frame{:06d}.png",
            "multiline": false
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "overwrite": [
          [
            "false",
            "true"
          ],
          {
            "default": "true"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "path_pattern",
        "start_index",
        "overwrite"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JWSaveImageSequence",
    "display_name": "Batch Save Image Sequence",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": true
  },
  "JWLoopImageSequence": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "target_frames": [
          "INT",
          {
            "default": 16,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "target_frames"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWLoopImageSequence",
    "display_name": "Loop Image Sequence",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskSequenceFromMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "batch_size"
      ]
    },
    "output": [
      "MASK_SEQUENCE"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK_SEQUENCE"
    ],
    "name": "JWMaskSequenceFromMask",
    "display_name": "Mask Sequence From Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskSequenceJoin": {
    "input": {
      "required": {
        "mask_sequence_1": [
          "MASK_SEQUENCE"
        ],
        "mask_sequence_2": [
          "MASK_SEQUENCE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask_sequence_1",
        "mask_sequence_2"
      ]
    },
    "output": [
      "MASK_SEQUENCE"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK_SEQUENCE"
    ],
    "name": "JWMaskSequenceJoin",
    "display_name": "Join Mask Sequence",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskSequenceApplyToLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mask_sequence": [
          "MASK_SEQUENCE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mask_sequence"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "JWMaskSequenceApplyToLatent",
    "display_name": "Apply Mask Sequence to Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLoadRGBIfExists": {
    "input": {
      "required": {
        "default": [
          "IMAGE"
        ],
        "path": [
          "STRING",
          {
            "default": "./image.png"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "default",
        "path"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageLoadRGBIfExists",
    "display_name": "Image Load RGB If Exists",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWLoadAudio": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "./audio.mp3"
          }
        ],
        "gain_db": [
          "FLOAT",
          {
            "default": 0,
            "min": -100,
            "max": 100
          }
        ],
        "offset_seconds": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100000000000000000
          }
        ],
        "duration_seconds": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100000000000000000
          }
        ],
        "resample_to_hz": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100000000000000000
          }
        ],
        "make_stereo": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path",
        "gain_db",
        "offset_seconds",
        "duration_seconds",
        "resample_to_hz",
        "make_stereo"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "AUDIO"
    ],
    "name": "JWLoadAudio",
    "display_name": "Audio Load",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWAudioBlend": {
    "input": {
      "required": {
        "a": [
          "AUDIO"
        ],
        "b": [
          "AUDIO"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1
          }
        ],
        "if_durations_differ": [
          [
            "use_longest",
            "use_shortest"
          ],
          {
            "default": "use_longest"
          }
        ],
        "if_samplerates_differ": [
          [
            "use_highest",
            "use_lowest"
          ],
          {
            "default": "use_highest"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "ratio",
        "if_durations_differ",
        "if_samplerates_differ"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "AUDIO"
    ],
    "name": "JWAudioBlend",
    "display_name": "Audio Blend",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWAudioSaveToPath": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "path": [
          "STRING",
          {
            "default": "./audio.mp3"
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "path",
        "overwrite"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JWAudioSaveToPath",
    "display_name": "Audio Save to Path",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": true
  },
  "VHS_VideoCombine": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "frame_rate": [
          "FLOAT",
          {
            "default": 8,
            "min": 1,
            "step": 1
          }
        ],
        "loop_count": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "AnimateDiff"
          }
        ],
        "format": [
          [
            "image/gif",
            "image/webp",
            "video/16bit-png",
            "video/8bit-png",
            "video/av1-webm",
            "video/ffmpeg-gif",
            "video/h264-mp4",
            "video/h265-mp4",
            "video/nvenc_av1-mp4",
            "video/nvenc_h264-mp4",
            "video/nvenc_hevc-mp4",
            "video/ProRes",
            "video/webm"
          ],
          {
            "formats": {
              "video/av1-webm": [
                [
                  "pix_fmt",
                  [
                    "yuv420p10le",
                    "yuv420p"
                  ]
                ],
                [
                  "crf",
                  "INT",
                  {
                    "default": 23,
                    "min": 0,
                    "max": 100,
                    "step": 1
                  }
                ],
                [
                  "input_color_depth",
                  [
                    "8bit",
                    "16bit"
                  ]
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/ffmpeg-gif": [
                [
                  "dither",
                  [
                    "bayer",
                    "heckbert",
                    "floyd_steinberg",
                    "sierra2",
                    "sierra2_4a",
                    "sierra3",
                    "burkes",
                    "atkinson",
                    "none"
                  ],
                  {
                    "default": "sierra2_4a"
                  },
                  "[0:v] split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse=dither=$val"
                ]
              ],
              "video/h264-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "yuv420p10le"
                  ]
                ],
                [
                  "crf",
                  "INT",
                  {
                    "default": 19,
                    "min": 0,
                    "max": 100,
                    "step": 1
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "trim_to_audio",
                  "BOOLEAN",
                  {
                    "default": false
                  }
                ]
              ],
              "video/h265-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p10le",
                    "yuv420p"
                  ]
                ],
                [
                  "crf",
                  "INT",
                  {
                    "default": 22,
                    "min": 0,
                    "max": 100,
                    "step": 1
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/nvenc_av1-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "p010le"
                  ]
                ],
                [
                  "bitrate",
                  "INT",
                  {
                    "default": 10,
                    "min": 1,
                    "max": 999,
                    "step": 1
                  }
                ],
                [
                  "megabit",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/nvenc_h264-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "p010le"
                  ]
                ],
                [
                  "bitrate",
                  "INT",
                  {
                    "default": 10,
                    "min": 1,
                    "max": 999,
                    "step": 1
                  }
                ],
                [
                  "megabit",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/nvenc_hevc-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "p010le"
                  ]
                ],
                [
                  "bitrate",
                  "INT",
                  {
                    "default": 10,
                    "min": 1,
                    "max": 999,
                    "step": 1
                  }
                ],
                [
                  "megabit",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/ProRes": [
                [
                  "profile",
                  [
                    "lt",
                    "standard",
                    "hq",
                    "4444",
                    "4444xq"
                  ],
                  {
                    "default": "hq"
                  }
                ]
              ],
              "video/webm": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "yuva420p"
                  ]
                ],
                [
                  "crf",
                  "INT",
                  {
                    "default": 20,
                    "min": 0,
                    "max": 100,
                    "step": 1
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "trim_to_audio",
                  "BOOLEAN",
                  {
                    "default": false
                  }
                ]
              ],
              "image/webp": [
                [
                  "lossless",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ]
            }
          }
        ],
        "pingpong": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "save_output": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "audio": [
          "AUDIO"
        ],
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "images",
        "frame_rate",
        "loop_count",
        "filename_prefix",
        "format",
        "pingpong",
        "save_output"
      ],
      "optional": [
        "audio",
        "meta_batch",
        "vae"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "VHS_FILENAMES"
    ],
    "output_is_list": [false],
    "output_name": [
      "Filenames"
    ],
    "name": "VHS_VideoCombine",
    "display_name": "Video Combine 🎥🅥🅗🅢",
    "description": "Video Combine 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ECombine an image sequence into a video\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimages: The images to be turned into a video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: (optional) audio to add to the video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emeta_batch: (optional) Connect to a Meta Batch manager to divide extremely long image sequences into sub batches. See the documentation for Meta Batch Manager\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evae: (optional) If provided, the node will take latents as input instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences\u003Cdiv style=\"font-size: 1em\"\u003EUnlike on Load Video, this isn't always a strict upgrade over using a standalone VAE Decode.\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EIf you have multiple Video Combine outputs, then the VAE decode will be performed for each output node increasing execution time\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EIf you make any change to output settings on the Video Combine (such as changing the output format), the VAE decode will be performed again as the decoded result is (by design) not cached\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"frame_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_rate: The frame rate which will be used for the output video. Consider converting this to an input and connecting this to a Load Video with Video Info(Loaded)-\u003Efps. When including audio, failure to properly set this will result in audio desync\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loop_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloop_count: The number of additional times the video should repeat. Can cause performance issues when used with long (100+ frames) sequences\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"filename_prefix\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Efilename_prefix: A prefix to add to the name of the output filename. This can include subfolders or format strings.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eformat: The output format to use. Formats starting with, 'image' are saved with PIL, but formats starting with 'video' utilize the video_formats system. 'video' options require ffmpeg and selecting one frequently adds additional options to the node.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"pingpong\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Epingpong: Play the video normally, then repeat the video in reverse so that it 'pingpongs' back and forth. This is frequently used to minimize the appearance of skips on very short animations.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"save_output\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esave_output: Specifies if output files should be saved to the output folder, or the temporary output folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideopreview: Displays a preview for the processed result. If advanced previews is enabled, the output is always converted to a format viewable from the browser. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Common Format Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ECommon Format Widgets: \u003Cdiv vhs_title=\"crf\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecrf: Determines how much to prioritize quality over filesize. Numbers vary between formats, but on each format that includes it, the default value provides visually loss less output\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"pix_fmt\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Epix_fmt: The pixel format to use for output. Alternative options will often have higher quality at the cost of increased file size and reduced compatibility with external software.\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cdiv vhs_title=\"yuv420p\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eyuv420p: The most common and default format\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"yuv420p10le\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eyuv420p10le: Use 10 bit color depth. This can improve color quality when combined with 16bit input color depth\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"yuva420p\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eyuva420p: Include transparency in the output video\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"input_color_depth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Einput_color_depth: VHS supports outputting 16bit images. While this produces higher quality output, the difference usually isn't visible without postprocessing and it significantly increases file size and processing time.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"save_metadata\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esave_metadata: Determines if metadata for the workflow should be included in the output video file\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": true
  },
  "VHS_LoadVideo": {
    "input": {
      "required": {
        "video": [
          []
        ],
        "force_rate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 60,
            "step": 1,
            "disable": 0
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "frame_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1,
            "disable": 0
          }
        ],
        "skip_first_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      },
      "optional": {
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ],
        "format": [
          [
            "None",
            "AnimateDiff",
            "Mochi",
            "LTXV",
            "Hunyuan",
            "Cosmos",
            "Wan"
          ],
          {
            "default": "AnimateDiff",
            "formats": {
              "None": {

              },
              "AnimateDiff": {
                "target_rate": 8,
                "dim": [8, 0, 512, 512]
              },
              "Mochi": {
                "target_rate": 24,
                "dim": [16, 0, 848, 480],
                "frames": [6, 1]
              },
              "LTXV": {
                "target_rate": 24,
                "dim": [32, 0, 768, 512],
                "frames": [8, 1]
              },
              "Hunyuan": {
                "target_rate": 24,
                "dim": [16, 0, 848, 480],
                "frames": [4, 1]
              },
              "Cosmos": {
                "target_rate": 24,
                "dim": [16, 0, 1280, 704],
                "frames": [8, 1]
              },
              "Wan": {
                "target_rate": 16,
                "dim": [8, 0, 832, 480],
                "frames": [4, 1]
              }
            }
          }
        ]
      },
      "hidden": {
        "force_size": "STRING",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "force_rate",
        "custom_width",
        "custom_height",
        "frame_load_cap",
        "skip_first_frames",
        "select_every_nth"
      ],
      "optional": [
        "meta_batch",
        "vae",
        "format"
      ],
      "hidden": [
        "force_size",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "AUDIO",
      "VHS_VIDEOINFO"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "IMAGE",
      "frame_count",
      "audio",
      "video_info"
    ],
    "name": "VHS_LoadVideo",
    "display_name": "Load Video (Upload) 🎥🅥🅗🅢",
    "description": "Load Video 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoads a video from the input folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emeta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences\u003Cdiv style=\"font-size: 1em\"\u003EUsing this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The loaded images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_count: The length of images just returned\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: The audio from the loaded video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo_info: Exposes additional info about the video such as the source frame rate, or the total length\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The loaded images pre-converted to latents. Only available when a vae is connected\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo: The video file to be loaded. Lists all files with a video extension in the ComfyUI/Input folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_size: Previously was used to provide suggested resolutions. Instead, custom_width and custom_height can be disabled by setting to 0.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_load_cap: The maximum number of frames to load. If 0, all frames are loaded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eskip_first_frames: A number of frames which are discarded before producing output.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eselect_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eformat: Updates other widgets so that only values supported by the given format can be entered and provides recommended defaults.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"choose video to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Echoose video to upload: An upload button is provided to upload local files to the input folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideopreview: Displays a preview for the selected video input. If advanced previews is enabled, this preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_LoadVideoPath": {
    "input": {
      "required": {
        "video": [
          "STRING",
          {
            "placeholder": "X://insert/path/here.mp4",
            "vhs_path_extensions": [
              "webm",
              "mp4",
              "mkv",
              "gif",
              "mov"
            ]
          }
        ],
        "force_rate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 60,
            "step": 1,
            "disable": 0
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "frame_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1,
            "disable": 0
          }
        ],
        "skip_first_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      },
      "optional": {
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ],
        "format": [
          [
            "None",
            "AnimateDiff",
            "Mochi",
            "LTXV",
            "Hunyuan",
            "Cosmos",
            "Wan"
          ],
          {
            "default": "AnimateDiff",
            "formats": {
              "None": {

              },
              "AnimateDiff": {
                "target_rate": 8,
                "dim": [8, 0, 512, 512]
              },
              "Mochi": {
                "target_rate": 24,
                "dim": [16, 0, 848, 480],
                "frames": [6, 1]
              },
              "LTXV": {
                "target_rate": 24,
                "dim": [32, 0, 768, 512],
                "frames": [8, 1]
              },
              "Hunyuan": {
                "target_rate": 24,
                "dim": [16, 0, 848, 480],
                "frames": [4, 1]
              },
              "Cosmos": {
                "target_rate": 24,
                "dim": [16, 0, 1280, 704],
                "frames": [8, 1]
              },
              "Wan": {
                "target_rate": 16,
                "dim": [8, 0, 832, 480],
                "frames": [4, 1]
              }
            }
          }
        ]
      },
      "hidden": {
        "force_size": "STRING",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "force_rate",
        "custom_width",
        "custom_height",
        "frame_load_cap",
        "skip_first_frames",
        "select_every_nth"
      ],
      "optional": [
        "meta_batch",
        "vae",
        "format"
      ],
      "hidden": [
        "force_size",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "AUDIO",
      "VHS_VIDEOINFO"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "IMAGE",
      "frame_count",
      "audio",
      "video_info"
    ],
    "name": "VHS_LoadVideoPath",
    "display_name": "Load Video (Path) 🎥🅥🅗🅢",
    "description": "Load Video (Path) 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoads a video from an arbitrary path\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emeta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences\u003Cdiv style=\"font-size: 1em\"\u003EUsing this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The loaded images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_count: The length of images just returned\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: The audio from the loaded video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo_info: Exposes additional info about the video such as the source frame rate, or the total length\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The loaded images pre-converted to latents. Only available when a vae is connected\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo: The video file to be loaded.\u003Cdiv style=\"font-size: 1em\"\u003EYou can also select an image to load it as a single frame\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThis is a VHS_PATH input. When edited, it provides a list of possible valid files or directories\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cvideo preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe current top-most completion may be selected with Tab\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EYou can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe filter on suggested file types can be disabled by pressing Ctrl+G.\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EIf converted to an input, this functions as a string\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_size: Previously was used to provide suggested resolutions. Instead, custom_width and custom_height can be disabled by setting to 0.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_load_cap: The maximum number of frames to load. If 0, all frames are loaded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eskip_first_frames: A number of frames which are discarded before producing output.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eselect_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eformat: Updates other widgets so that only values supported by the given format can be entered and provides recommended defaults.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_LoadVideoFFmpeg": {
    "input": {
      "required": {
        "video": [
          []
        ],
        "force_rate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 60,
            "step": 1,
            "disable": 0
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "frame_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1,
            "disable": 0
          }
        ],
        "start_time": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ],
        "format": [
          [
            "None",
            "AnimateDiff",
            "Mochi",
            "LTXV",
            "Hunyuan",
            "Cosmos",
            "Wan"
          ],
          {
            "default": "AnimateDiff",
            "formats": {
              "None": {

              },
              "AnimateDiff": {
                "target_rate": 8,
                "dim": [8, 0, 512, 512]
              },
              "Mochi": {
                "target_rate": 24,
                "dim": [16, 0, 848, 480],
                "frames": [6, 1]
              },
              "LTXV": {
                "target_rate": 24,
                "dim": [32, 0, 768, 512],
                "frames": [8, 1]
              },
              "Hunyuan": {
                "target_rate": 24,
                "dim": [16, 0, 848, 480],
                "frames": [4, 1]
              },
              "Cosmos": {
                "target_rate": 24,
                "dim": [16, 0, 1280, 704],
                "frames": [8, 1]
              },
              "Wan": {
                "target_rate": 16,
                "dim": [8, 0, 832, 480],
                "frames": [4, 1]
              }
            }
          }
        ]
      },
      "hidden": {
        "force_size": "STRING",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "force_rate",
        "custom_width",
        "custom_height",
        "frame_load_cap",
        "start_time"
      ],
      "optional": [
        "meta_batch",
        "vae",
        "format"
      ],
      "hidden": [
        "force_size",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "AUDIO",
      "VHS_VIDEOINFO"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "IMAGE",
      "mask",
      "audio",
      "video_info"
    ],
    "name": "VHS_LoadVideoFFmpeg",
    "display_name": "Load Video FFmpeg (Upload) 🎥🅥🅗🅢",
    "description": "Load Video FFmpeg 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoads a video from the input folder using ffmpeg instead of opencv\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EProvides faster execution speed, transparency support, and allows specifying start time in seconds\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emeta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences\u003Cdiv style=\"font-size: 1em\"\u003EUsing this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The loaded images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emask: Transparency data from the loaded video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: The audio from the loaded video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo_info: Exposes additional info about the video such as the source frame rate, or the total length\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The loaded images pre-converted to latents. Only available when a vae is connected\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo: The video file to be loaded. Lists all files with a video extension in the ComfyUI/Input folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_size: Previously was used to provide suggested resolutions. Instead, custom_width and custom_height can be disabled by setting to 0.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_load_cap: The maximum number of frames to load. If 0, all frames are loaded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Estart_time: A timestamp, in seconds from the start of the video, to start loading frames from. \u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eformat: Updates other widgets so that only values supported by the given format can be entered and provides recommended defaults.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"choose video to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Echoose video to upload: An upload button is provided to upload local files to the input folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideopreview: Displays a preview for the selected video input. If advanced previews is enabled, this preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_LoadVideoFFmpegPath": {
    "input": {
      "required": {
        "video": [
          "STRING",
          {
            "placeholder": "X://insert/path/here.mp4",
            "vhs_path_extensions": [
              "webm",
              "mp4",
              "mkv",
              "gif",
              "mov"
            ]
          }
        ],
        "force_rate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 60,
            "step": 1,
            "disable": 0
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "frame_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1,
            "disable": 0
          }
        ],
        "start_time": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ],
        "format": [
          [
            "None",
            "AnimateDiff",
            "Mochi",
            "LTXV",
            "Hunyuan",
            "Cosmos",
            "Wan"
          ],
          {
            "default": "AnimateDiff",
            "formats": {
              "None": {

              },
              "AnimateDiff": {
                "target_rate": 8,
                "dim": [8, 0, 512, 512]
              },
              "Mochi": {
                "target_rate": 24,
                "dim": [16, 0, 848, 480],
                "frames": [6, 1]
              },
              "LTXV": {
                "target_rate": 24,
                "dim": [32, 0, 768, 512],
                "frames": [8, 1]
              },
              "Hunyuan": {
                "target_rate": 24,
                "dim": [16, 0, 848, 480],
                "frames": [4, 1]
              },
              "Cosmos": {
                "target_rate": 24,
                "dim": [16, 0, 1280, 704],
                "frames": [8, 1]
              },
              "Wan": {
                "target_rate": 16,
                "dim": [8, 0, 832, 480],
                "frames": [4, 1]
              }
            }
          }
        ]
      },
      "hidden": {
        "force_size": "STRING",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "force_rate",
        "custom_width",
        "custom_height",
        "frame_load_cap",
        "start_time"
      ],
      "optional": [
        "meta_batch",
        "vae",
        "format"
      ],
      "hidden": [
        "force_size",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "AUDIO",
      "VHS_VIDEOINFO"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "IMAGE",
      "mask",
      "audio",
      "video_info"
    ],
    "name": "VHS_LoadVideoFFmpegPath",
    "display_name": "Load Video FFmpeg (Path) 🎥🅥🅗🅢",
    "description": "Load Video FFmpeg (Path) 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoads a video from an arbitrary path using ffmpeg instead of opencv\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EProvides faster execution speed, transparency support, and allows specifying start time in seconds\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emeta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences\u003Cdiv style=\"font-size: 1em\"\u003EUsing this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The loaded images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emask: Transparency data from the loaded video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: The audio from the loaded video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo_info: Exposes additional info about the video such as the source frame rate, or the total length\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The loaded images pre-converted to latents. Only available when a vae is connected\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo: The video file to be loaded.\u003Cdiv style=\"font-size: 1em\"\u003EYou can also select an image to load it as a single frame\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThis is a VHS_PATH input. When edited, it provides a list of possible valid files or directories\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cvideo preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe current top-most completion may be selected with Tab\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EYou can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe filter on suggested file types can be disabled by pressing Ctrl+G.\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EIf converted to an input, this functions as a string\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_size: Previously was used to provide suggested resolutions. Instead, custom_width and custom_height can be disabled by setting to 0.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_load_cap: The maximum number of frames to load. If 0, all frames are loaded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eskip_first_frames: A number of frames which are discarded before producing output.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eselect_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eformat: Updates other widgets so that only values supported by the given format can be entered and provides recommended defaults.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_LoadImagePath": {
    "input": {
      "required": {
        "image": [
          "STRING",
          {
            "placeholder": "X://insert/path/here.png",
            "vhs_path_extensions": [
              ".jpg",
              ".ppm",
              ".png",
              ".pgm",
              ".webp",
              ".jpeg",
              ".bmp",
              ".tif",
              ".tiff"
            ]
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 8,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 8,
            "disable": 0
          }
        ]
      },
      "optional": {
        "vae": [
          "VAE"
        ]
      },
      "hidden": {
        "force_size": "STRING"
      }
    },
    "input_order": {
      "required": [
        "image",
        "custom_width",
        "custom_height"
      ],
      "optional": [
        "vae"
      ],
      "hidden": [
        "force_size"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "mask"
    ],
    "name": "VHS_LoadImagePath",
    "display_name": "Load Image (Path) 🎥🅥🅗🅢",
    "description": "Load Image (Path) 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoad a single image from a given path\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evae: (optional) If provided the node will output latents instead of images.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The loaded images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EMASK: The alpha channel of the loaded images.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"image\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimage: The image file to be loaded.\u003Cdiv style=\"font-size: 1em\"\u003EThis is a VHS_PATH input. When edited, it provides a list of possible valid files or directories\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cvideo preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe current top-most completion may be selected with Tab\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EYou can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe filter on suggested file types can be disabled by pressing Ctrl+G.\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EIf converted to an input, this functions as a string\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eforce_size: Allows for conveniently scaling the input without requiring an additional node. Provides options to maintain aspect ratio or conveniently target common training formats for Animate Diff\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cdiv vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecustom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_LoadImages": {
    "input": {
      "required": {
        "directory": [
          [
            "3d"
          ]
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_images": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "meta_batch": [
          "VHS_BatchManager"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "image_load_cap",
        "skip_first_images",
        "select_every_nth",
        "meta_batch"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "MASK",
      "frame_count"
    ],
    "name": "VHS_LoadImages",
    "display_name": "Load Images (Upload) 🎥🅥🅗🅢",
    "description": "Load Images 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoads a sequence of images from a subdirectory of the input folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emeta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The loaded images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EMASK: The alpha channel of the loaded images.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_count: The length of images just returned\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"directory\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Edirectory: The directory images will be loaded from. Filtered to process jpg, png, ppm, bmp, tif, and webp files\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"image_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimage_load_cap: The maximum number of images to load. If 0, all images are loaded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Estart_time: A timestamp, in seconds from the start of the video, to start loading frames from. \u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"choose folder to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Echoose folder to upload: An upload button is provided to upload a local folder containing images to the input folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_LoadImagesPath": {
    "input": {
      "required": {
        "directory": [
          "STRING",
          {
            "placeholder": "X://path/to/images",
            "vhs_path_extensions": []
          }
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_images": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "meta_batch": [
          "VHS_BatchManager"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "image_load_cap",
        "skip_first_images",
        "select_every_nth",
        "meta_batch"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "MASK",
      "frame_count"
    ],
    "name": "VHS_LoadImagesPath",
    "display_name": "Load Images (Path) 🎥🅥🅗🅢",
    "description": "Load Images (Path) 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoads a sequence of images from an arbitrary path\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emeta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The loaded images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EMASK: The alpha channel of the loaded images.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframe_count: The length of images just returned\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"directory\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Edirectory: The directory images will be loaded from. Filtered to process jpg, png, ppm, bmp, tif, and webp files\u003Cdiv style=\"font-size: 1em\"\u003EThis is a VHS_PATH input. When edited, it provides a list of possible valid files or directories\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cvideo preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe current top-most completion may be selected with Tab\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EYou can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe filter on suggested file types can be disabled by pressing Ctrl+G.\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EIf converted to an input, this functions as a string\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"image_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimage_load_cap: The maximum number of images to load. If 0, all images are loaded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"skip_first_images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eskip_first_images: A number of images which are discarded before producing output.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eselect_every_nth: Keeps only the first of every n frames and discard the rest.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_LoadAudio": {
    "input": {
      "required": {
        "audio_file": [
          "STRING",
          {
            "default": "input/",
            "vhs_path_extensions": [
              "wav",
              "mp3",
              "ogg",
              "m4a",
              "flac"
            ]
          }
        ]
      },
      "optional": {
        "seek_seconds": [
          "FLOAT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "duration": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio_file"
      ],
      "optional": [
        "seek_seconds",
        "duration"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "audio"
    ],
    "name": "VHS_LoadAudio",
    "display_name": "Load Audio (Path)🎥🅥🅗🅢",
    "description": "Load Audio (Path) 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoads an audio file from an arbitrary path\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: The loaded audio\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"audio_file\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio_file: The audio file to be loaded.\u003Cdiv style=\"font-size: 1em\"\u003EThis is a VHS_PATH input. When edited, it provides a list of possible valid files or directories\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cvideo preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe current top-most completion may be selected with Tab\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EYou can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EThe filter on suggested file types can be disabled by pressing Ctrl+G.\u003C/div\u003E\u003Cdiv style=\"font-size: 1em\"\u003EIf converted to an input, this functions as a string\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"seek_seconds\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eseek_seconds: An offset from the start of the sound file that the audio should start from\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/audio",
    "output_node": false
  },
  "VHS_LoadAudioUpload": {
    "input": {
      "required": {
        "audio": [
          []
        ],
        "start_time": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 0.01
          }
        ],
        "duration": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "start_time",
        "duration"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "audio"
    ],
    "name": "VHS_LoadAudioUpload",
    "display_name": "Load Audio (Upload)🎥🅥🅗🅢",
    "description": "Load Audio (Upload) 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ELoads an audio file from the input directory\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EVery similar in functionality to the built-in LoadAudio. It was originally added before VHS swapped to use Comfy's internal AUDIO format, but provides the additional options for start time and duration\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: The loaded audio\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: The audio file to be loaded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Estart_time: An offset from the start of the sound file that the audio should start from\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"duration\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eduration: A maximum limit for the audio. Disabled if 0\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"choose audio to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Echoose audio to upload: An upload button is provided to upload an audio file to the input folder\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/audio",
    "output_node": false
  },
  "VHS_AudioToVHSAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "VHS_AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "vhs_audio"
    ],
    "name": "VHS_AudioToVHSAudio",
    "display_name": "Audio to legacy VHS_AUDIO🎥🅥🅗🅢",
    "description": "Audio to legacy VHS_AUDIO 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003Eutility function for compatibility with external nodes\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EVHS used to use an internal VHS_AUDIO format for routing audio between inputs and outputs. This format was intended to only be used internally and was designed with a focus on performance over ease of use. Since ComfyUI now has an internal AUDIO format, VHS now uses this format. However, some custom node packs were made that are external to both ComfyUI and VHS that use VHS_AUDIO. This node was added so that those external nodes can still function\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eaudio: An input in the standardized AUDIO format\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evhs_audio: An output in the legacy VHS_AUDIO format for use with external nodes\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/audio",
    "output_node": false
  },
  "VHS_VHSAudioToAudio": {
    "input": {
      "required": {
        "vhs_audio": [
          "VHS_AUDIO"
        ]
      }
    },
    "input_order": {
      "required": [
        "vhs_audio"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [false],
    "output_name": [
      "audio"
    ],
    "name": "VHS_VHSAudioToAudio",
    "display_name": "Legacy VHS_AUDIO to Audio🎥🅥🅗🅢",
    "description": "Legacy VHS_AUDIO to Audio 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003Eutility function for compatibility with external nodes\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EVHS used to use an internal VHS_AUDIO format for routing audio between inputs and outputs. This format was intended to only be used internally and was designed with a focus on performance over ease of use. Since ComfyUI now has an internal AUDIO format, VHS now uses this format. However, some custom node packs were made that are external to both ComfyUI and VHS that use VHS_AUDIO. This node was added so that those external nodes can still function\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evhs_audio: An input in the legacy VHS_AUDIO format produced by an external node\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evhs_audio: An output in the standardized AUDIO format\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/audio",
    "output_node": false
  },
  "VHS_PruneOutputs": {
    "input": {
      "required": {
        "filenames": [
          "VHS_FILENAMES"
        ],
        "options": [
          [
            "Intermediate",
            "Intermediate and Utility"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "filenames",
        "options"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VHS_PruneOutputs",
    "display_name": "Prune Outputs 🎥🅥🅗🅢",
    "description": "Prune Outputs 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EAutomates deletion of undesired outputs from a Video Combine node.\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EVideo Combine produces a number of file outputs in addition to the final output. Some of these, such as a video file without audio included, are implementation limitations and are not feasible to solve. As an alternative, the Prune Outputs node is added to automate the deletion of these file outputs if they are not desired\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"filenames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Efilenames: A connection from a Video Combine node to indicate which outputs should be pruned\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"options\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eoptions: Which files should be deleted\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cdiv vhs_title=\"Intermediate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIntermediate: Delete any files that were required for intermediate processing but are not the final output, like the no-audio output file when audio is included\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Intermediate and Utility\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIntermediate and Utility: Delete all produced files that aren't the final output, including the first frame png\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": true
  },
  "VHS_BatchManager": {
    "input": {
      "required": {
        "frames_per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "frames_per_batch"
      ],
      "hidden": [
        "prompt",
        "unique_id"
      ]
    },
    "output": [
      "VHS_BatchManager"
    ],
    "output_is_list": [false],
    "output_name": [
      "meta_batch"
    ],
    "name": "VHS_BatchManager",
    "display_name": "Meta Batch Manager 🎥🅥🅗🅢",
    "description": "Meta Batch Manager 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ESplit the processing of a very long video into sets of smaller Meta Batches\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EThe Meta Batch Manager allows for extremely long input videos to be processed when all other methods for fitting the content in RAM fail. It does not effect VRAM usage.\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EIt must be connected to at least one Input (a Load Video or Load Images) AND at least one Video Combine\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cimg src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/7cb3fb7e-59d8-4cb2-a09f-9c6698de8b1f loading=lazy style=\"width: 0px; min-width: 100%\"\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EIt functions by holding both the inputs and ouputs open between executions, and automatically requeue's the workflow until one of the inputs is unable to provide additional images.\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EBecause each sub execution only contains a subset of the total frames, each sub execution creates a hard window which temporal smoothing can not be applied across. This results in jumps in the output.\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emeta_batch: Add all connected nodes to this Meta Batch\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"frames_per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eframes_per_batch: How many frames to process for each sub execution. If loading as image, each frame will use about 50MB of RAM (not VRAM), and this can safely be set in the 100-1000 range, depending on available memory. When loading and combining from latent space (no blue image noodles exist), this value can be much higher, around the 2,000 to 20,000 range\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_VideoInfo": {
    "input": {
      "required": {
        "video_info": [
          "VHS_VIDEOINFO"
        ]
      }
    },
    "input_order": {
      "required": [
        "video_info"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false, false],
    "output_name": [
      "source_fps🟨",
      "source_frame_count🟨",
      "source_duration🟨",
      "source_width🟨",
      "source_height🟨",
      "loaded_fps🟦",
      "loaded_frame_count🟦",
      "loaded_duration🟦",
      "loaded_width🟦",
      "loaded_height🟦"
    ],
    "name": "VHS_VideoInfo",
    "display_name": "Video Info 🎥🅥🅗🅢",
    "description": "Video Info 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ESplits information on a video into a numerous outputs\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo_info: A connection to a Load Video node\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"source_fps🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_fps🟨: The frame rate of the video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"source_frame_count🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_frame_count🟨: How many total frames the video contains before accounting for frame rate or select_every_nth\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"source_duration🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_duration🟨: The length of images just returned in seconds\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"source_width🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_width🟨: The width\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"source_height🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_height🟨: The height\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_fps🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_fps🟦: The frame rate after accounting for force_rate and select_every_nth. This output is of particular use as it can be connected to the converted frame_rate input of a Video Combine node to ensure audio remains synchronized.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_frame_count🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_frame_count🟦: The number of frames returned by the current execution. Identical to the frame_count returned by the node itself\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_duration🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_duration🟦: The duration in seconds of returned images after accounting for frame_load_cap\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_width🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_width🟦: The width of the video after scaling. These coordinates are in image space even if loading to latent space\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_height🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_height🟦: The height of the video after scaling. These coordinates are in image space even if loading to latent space\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_VideoInfoSource": {
    "input": {
      "required": {
        "video_info": [
          "VHS_VIDEOINFO"
        ]
      }
    },
    "input_order": {
      "required": [
        "video_info"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "fps🟨",
      "frame_count🟨",
      "duration🟨",
      "width🟨",
      "height🟨"
    ],
    "name": "VHS_VideoInfoSource",
    "display_name": "Video Info (Source) 🎥🅥🅗🅢",
    "description": "Video Info Source 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ESplits information on a video into a numerous outputs describing the file itself without accounting for load options\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo_info: A connection to a Load Video node\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"source_fps🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_fps🟨: The frame rate of the video\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"source_frame_count🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_frame_count🟨: How many total frames the video contains before accounting for frame rate or select_every_nth\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"source_duration🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_duration🟨: The length of images just returned in seconds\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"source_width🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_width🟨: The original width\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"source_height🟨\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esource_height🟨: The original height\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_VideoInfoLoaded": {
    "input": {
      "required": {
        "video_info": [
          "VHS_VIDEOINFO"
        ]
      }
    },
    "input_order": {
      "required": [
        "video_info"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "fps🟦",
      "frame_count🟦",
      "duration🟦",
      "width🟦",
      "height🟦"
    ],
    "name": "VHS_VideoInfoLoaded",
    "display_name": "Video Info (Loaded) 🎥🅥🅗🅢",
    "description": "Video Info Loaded 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ESplits information on a video into a numerous outputs describing the file itself after accounting for load options\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evideo_info: A connection to a Load Video node\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"loaded_fps🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_fps🟦: The frame rate after accounting for force_rate and select_every_nth. This output is of particular use as it can be connected to the converted frame_rate input of a Video Combine node to ensure audio remains synchronized.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_frame_count🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_frame_count🟦: The number of frames returned by the current execution. Identical to the frame_count returned by the node itself\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_duration🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_duration🟦: The duration in seconds of returned images after accounting for frame_load_cap\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_width🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_width🟦: The width of the video after scaling. This is the dimension of the corresponding image even if loading as a latent directly\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"loaded_height🟦\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eloaded_height🟦: The height of the video after scaling. This is the dimension of the corresponding image even if loading as a latent directly\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_SelectFilename": {
    "input": {
      "required": {
        "filenames": [
          "VHS_FILENAMES"
        ],
        "index": [
          "INT",
          {
            "default": -1,
            "step": 1,
            "min": -1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filenames",
        "index"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "Filename"
    ],
    "name": "VHS_SelectFilename",
    "display_name": "Select Filename 🎥🅥🅗🅢",
    "description": "VAE Select Filename 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ESelect a single filename from the VHS_FILENAMES output by a Video Combine and return it as a string\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003ETake care when combining this node with Prune Outputs. The VHS_FILENAMES object is immutable and will always contain the full list of output files, but execution order is undefined behavior (currently, Prune Outputs will generally execute first) and SelectFilename may return a path to a file that no longer exists.\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"filenames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Efilenames: A VHS_FILENAMES from a Video Combine node\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"filename\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Efilename: A string representation of the full output path for the chosen file\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eindex: The index of which file should be selected. The default, -1, chooses the most complete output\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_VAEEncodeBatched": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "per_batch"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "VHS_VAEEncodeBatched",
    "display_name": "VAE Encode Batched 🎥🅥🅗🅢",
    "description": "VAE Encode Batched 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EEncode images as latents with a manually specified batch size.\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003ESome people have ran into VRAM issues when encoding or decoding large batches of images. As a workaround, this node lets you manually set a batch size when encoding images.\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EUnless these issues have been encountered, it is simpler to use the native VAE Encode or to encode directly from a Load Video\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"pixels\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Epixels: The images to be encoded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evae: The VAE to use when encoding.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The encoded latents.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eper_batch: The maximum number of images to encode in each batch.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/batched nodes",
    "output_node": false
  },
  "VHS_VAEDecodeBatched": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "per_batch"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "VHS_VAEDecodeBatched",
    "display_name": "VAE Decode Batched 🎥🅥🅗🅢",
    "description": "VAE Decode Batched 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EDecode latents to images with a manually specified batch size\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003ESome people have ran into VRAM issues when encoding or decoding large batches of images. As a workaround, this node lets you manually set a batch size when decoding latents.\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EUnless these issues have been encountered, it is simpler to use the native VAE Decode or to decode from a Video Combine directly\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"samples\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esamples: The latents to be decoded.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Evae: The VAE to use when decoding.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The decoded images.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eper_batch: The maximum number of images to decode in each batch.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/batched nodes",
    "output_node": false
  },
  "VHS_SplitLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "split_index": [
          "INT",
          {
            "default": 0,
            "step": 1,
            "min": -9007199254740991,
            "max": 9007199254740991
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "split_index"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "LATENT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "LATENT_A",
      "A_count",
      "LATENT_B",
      "B_count"
    ],
    "name": "VHS_SplitLatents",
    "display_name": "Split Latents 🎥🅥🅗🅢",
    "description": "Split Latents 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ESplit a set of latents into two groups\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Elatents: The latents to be split.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"LATENT_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT_A: The first group of latents\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EA_count: The number of latents in group A. This will be equal to split_index unless the latents input has length less than split_index\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"LATENT_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT_B: The second group of latents\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EB_count: The number of latents in group B\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esplit_index: The index of the first latent that will be in the second output groups.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/latent",
    "output_node": false
  },
  "VHS_SplitImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "split_index": [
          "INT",
          {
            "default": 0,
            "step": 1,
            "min": -9007199254740991,
            "max": 9007199254740991
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "split_index"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "IMAGE_A",
      "A_count",
      "IMAGE_B",
      "B_count"
    ],
    "name": "VHS_SplitImages",
    "display_name": "Split Images 🎥🅥🅗🅢",
    "description": "Split Images 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ESplit a set of images into two groups\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimages: The images to be split.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE_A: The first group of images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EA_count: The number of images in group A. This will be equal to split_index unless the images input has length less than split_index\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"IMAGE_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE_B: The second group of images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EB_count: The number of images in group B\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esplit_index: The index of the first latent that will be in the second output groups.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/image",
    "output_node": false
  },
  "VHS_SplitMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "split_index": [
          "INT",
          {
            "default": 0,
            "step": 1,
            "min": -9007199254740991,
            "max": 9007199254740991
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "split_index"
      ]
    },
    "output": [
      "MASK",
      "INT",
      "MASK",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "MASK_A",
      "A_count",
      "MASK_B",
      "B_count"
    ],
    "name": "VHS_SplitMasks",
    "display_name": "Split Masks 🎥🅥🅗🅢",
    "description": "Split Masks 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ESplit a set of masks into two groups\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emask: The masks to be split.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"MASK_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EMASK_A: The first group of masks\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EA_count: The number of masks in group A. This will be equal to split_index unless the mask input has length less than split_index\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"MASK_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EMASK_B: The second group of masks\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EB_count: The number of masks in group B\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Esplit_index: The index of the first latent that will be in the second output groups.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/mask",
    "output_node": false
  },
  "VHS_MergeLatents": {
    "input": {
      "required": {
        "latents_A": [
          "LATENT"
        ],
        "latents_B": [
          "LATENT"
        ],
        "merge_strategy": [
          [
            "match A",
            "match B",
            "match smaller",
            "match larger"
          ]
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "latents_A",
        "latents_B",
        "merge_strategy",
        "scale_method",
        "crop"
      ]
    },
    "output": [
      "LATENT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "LATENT",
      "count"
    ],
    "name": "VHS_MergeLatents",
    "display_name": "Merge Latents 🎥🅥🅗🅢",
    "description": "Merge Latents 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ECombine two groups of latents into a single group of latents\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"latents_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Elatents_A: The first group of latents\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"latents_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Elatents_B: The first group of latents\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The combined group of latents\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The length of the combined group\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emerge_strategy: Determines what the output resolution will be if input resolutions don't match\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cdiv vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch A: Always use the resolution for A\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch B: Always use the resolution for B\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch smaller: Pick the smaller resolution by area\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch larger: Pick the larger resolution by area\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Escale_method: Determines what method to use if scaling is required\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecrop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/latent",
    "output_node": false
  },
  "VHS_MergeImages": {
    "input": {
      "required": {
        "images_A": [
          "IMAGE"
        ],
        "images_B": [
          "IMAGE"
        ],
        "merge_strategy": [
          [
            "match A",
            "match B",
            "match smaller",
            "match larger"
          ]
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images_A",
        "images_B",
        "merge_strategy",
        "scale_method",
        "crop"
      ]
    },
    "output": [
      "IMAGE",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "count"
    ],
    "name": "VHS_MergeImages",
    "display_name": "Merge Images 🎥🅥🅗🅢",
    "description": "Merge Images 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ECombine two groups of images into a single group of images\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"images_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimages_A: The first group of images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"images_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimages_B: The first group of images\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The combined group of images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The length of the combined group\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emerge_strategy: Determines what the output resolution will be if input resolutions don't match\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cdiv vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch A: Always use the resolution for A\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch B: Always use the resolution for B\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch smaller: Pick the smaller resolution by area\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch larger: Pick the larger resolution by area\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Escale_method: Determines what method to use if scaling is required\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecrop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/image",
    "output_node": false
  },
  "VHS_MergeMasks": {
    "input": {
      "required": {
        "mask_A": [
          "MASK"
        ],
        "mask_B": [
          "MASK"
        ],
        "merge_strategy": [
          [
            "match A",
            "match B",
            "match smaller",
            "match larger"
          ]
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask_A",
        "mask_B",
        "merge_strategy",
        "scale_method",
        "crop"
      ]
    },
    "output": [
      "MASK",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MASK",
      "count"
    ],
    "name": "VHS_MergeMasks",
    "display_name": "Merge Masks 🎥🅥🅗🅢",
    "description": "Merge Masks 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003ECombine two groups of masks into a single group of masks\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"mask_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emask_A: The first group of masks\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"mask_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emask_B: The first group of masks\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EMASK: The combined group of masks\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The length of the combined group\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emerge_strategy: Determines what the output resolution will be if input resolutions don't match\u003Cdiv style=\"font-size: 1em\"\u003E\u003Cdiv vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch A: Always use the resolution for A\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch B: Always use the resolution for B\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch smaller: Pick the smaller resolution by area\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ematch larger: Pick the larger resolution by area\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Escale_method: Determines what method to use if scaling is required\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecrop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/mask",
    "output_node": false
  },
  "VHS_GetLatentCount": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latents"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "count"
    ],
    "name": "VHS_GetLatentCount",
    "display_name": "Get Latent Count 🎥🅥🅗🅢",
    "description": "Get Latent Count 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EReturn the number of latents in an input as an INT\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Elatents: The input latent\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of latents in the input\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/latent",
    "output_node": false
  },
  "VHS_GetImageCount": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "count"
    ],
    "name": "VHS_GetImageCount",
    "display_name": "Get Image Count 🎥🅥🅗🅢",
    "description": "Get Image Count 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EReturn the number of images in an input as an INT\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimages: The input image\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of images in the input\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/image",
    "output_node": false
  },
  "VHS_GetMaskCount": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "count"
    ],
    "name": "VHS_GetMaskCount",
    "display_name": "Get Mask Count 🎥🅥🅗🅢",
    "description": "Get Mask Count 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EReturn the number of masks in an input as an INT\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"masks\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emasks: The input mask\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of masks in the input\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/mask",
    "output_node": false
  },
  "VHS_DuplicateLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "multiply_by": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "multiply_by"
      ]
    },
    "output": [
      "LATENT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "LATENT",
      "count"
    ],
    "name": "VHS_DuplicateLatents",
    "display_name": "Repeat Latents 🎥🅥🅗🅢",
    "description": "Repeat Latents 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EAppend copies of a latent to itself so it repeats\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Elatents: The latents to be repeated\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The latent with repeats\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of latents in the output. Equal to the length of the input latent * multiply_by\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emultiply_by: Controls the number of times the latent should repeat. 1, the default, means no change.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/latent",
    "output_node": false
  },
  "VHS_DuplicateImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "multiply_by": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "multiply_by"
      ]
    },
    "output": [
      "IMAGE",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "count"
    ],
    "name": "VHS_DuplicateImages",
    "display_name": "Repeat Images 🎥🅥🅗🅢",
    "description": "Repeat Images 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EAppend copies of a image to itself so it repeats\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"IMAGES\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGES: The image to be repeated\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The image with repeats\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of image in the output. Equal to the length of the input image * multiply_by\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emultiply_by: Controls the number of times the mask should repeat. 1, the default, means no change.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/image",
    "output_node": false
  },
  "VHS_DuplicateMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "multiply_by": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "multiply_by"
      ]
    },
    "output": [
      "MASK",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MASK",
      "count"
    ],
    "name": "VHS_DuplicateMasks",
    "display_name": "Repeat Masks 🎥🅥🅗🅢",
    "description": "Repeat Masks 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EAppend copies of a mask to itself so it repeats\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"masks\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emasks: The masks to be repeated\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The mask with repeats\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of mask in the output. Equal to the length of the input mask * multiply_by\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emultiply_by: Controls the number of times the mask should repeat. 1, the default, means no change.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/mask",
    "output_node": false
  },
  "VHS_SelectEveryNthLatent": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_latents": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "select_every_nth",
        "skip_first_latents"
      ]
    },
    "output": [
      "LATENT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "LATENT",
      "count"
    ],
    "name": "VHS_SelectEveryNthLatent",
    "display_name": "Select Every Nth Latent 🎥🅥🅗🅢",
    "description": "Select Every Nth Latent 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EKeep only 1 latent for every interval\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Elatents: The input latent\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003ELATENT: The output latents\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of latents in the input\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eselect_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"skip_first_latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eskip_first_latents: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the latent into groups\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/latent",
    "output_node": false
  },
  "VHS_SelectEveryNthImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_images": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "select_every_nth",
        "skip_first_images"
      ]
    },
    "output": [
      "IMAGE",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "count"
    ],
    "name": "VHS_SelectEveryNthImage",
    "display_name": "Select Every Nth Image 🎥🅥🅗🅢",
    "description": "Select Every Nth Image 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EKeep only 1 image for every interval\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eimages: The input image\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EIMAGE: The output images\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of images in the input\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eselect_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"skip_first_images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eskip_first_images: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the image into groups\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/image",
    "output_node": false
  },
  "VHS_SelectEveryNthMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_masks": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "select_every_nth",
        "skip_first_masks"
      ]
    },
    "output": [
      "MASK",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MASK",
      "count"
    ],
    "name": "VHS_SelectEveryNthMask",
    "display_name": "Select Every Nth Mask 🎥🅥🅗🅢",
    "description": "Select Every Nth Mask 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EKeep only 1 mask for every interval\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Emask: The input mask\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EMASK: The output mask\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ecount: The number of mask in the input\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EWidgets: \u003Cdiv vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eselect_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"skip_first_mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eskip_first_mask: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the mask into groups\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/mask",
    "output_node": false
  },
  "VHS_SelectLatents": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "err_if_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "err_if_empty": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "indexes",
        "err_if_missing",
        "err_if_empty"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "VHS_SelectLatents",
    "display_name": "Select Latents 🎥🅥🅗🅢",
    "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -\u003E Returns [0]\n-1        -\u003E Returns [15]\n0, 1, 13  -\u003E Returns [0, 1, 13]\n0:5, 13   -\u003E Returns [0, 1, 2, 3, 4, 13]\n0:-1      -\u003E Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -\u003E Returns [4, 3, 2, 1, 0]\n0:5:2     -\u003E Returns [0, 2, 4]\n::-1     -\u003E Returns [15, 14, 13, ..., 2, 1, 0]\n",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/latent",
    "output_node": false
  },
  "VHS_SelectImages": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "err_if_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "err_if_empty": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "indexes",
        "err_if_missing",
        "err_if_empty"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "VHS_SelectImages",
    "display_name": "Select Images 🎥🅥🅗🅢",
    "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -\u003E Returns [0]\n-1        -\u003E Returns [15]\n0, 1, 13  -\u003E Returns [0, 1, 13]\n0:5, 13   -\u003E Returns [0, 1, 2, 3, 4, 13]\n0:-1      -\u003E Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -\u003E Returns [4, 3, 2, 1, 0]\n0:5:2     -\u003E Returns [0, 2, 4]\n::-1     -\u003E Returns [15, 14, 13, ..., 2, 1, 0]\n",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/image",
    "output_node": false
  },
  "VHS_SelectMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "err_if_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "err_if_empty": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "indexes",
        "err_if_missing",
        "err_if_empty"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "VHS_SelectMasks",
    "display_name": "Select Masks 🎥🅥🅗🅢",
    "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -\u003E Returns [0]\n-1        -\u003E Returns [15]\n0, 1, 13  -\u003E Returns [0, 1, 13]\n0:5, 13   -\u003E Returns [0, 1, 2, 3, 4, 13]\n0:-1      -\u003E Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -\u003E Returns [4, 3, 2, 1, 0]\n0:5:2     -\u003E Returns [0, 2, 4]\n::-1     -\u003E Returns [15, 14, 13, ..., 2, 1, 0]\n",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢/mask",
    "output_node": false
  },
  "VHS_Unbatch": {
    "input": {
      "required": {
        "batched": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "batched"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "unbatched"
    ],
    "name": "VHS_Unbatch",
    "display_name": "Unbatch 🎥🅥🅗🅢",
    "description": "Unbatch 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EUnbatch a list of items into a single concatenated item\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EUseful for when you want a single video output from a complex workflow\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EHas no relation to the Meta Batch system of VHS\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"batched\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Ebatched: Any input which may or may not be batched\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"unbatched\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Eunbatched: A single output element. Torch tensors are concatenated across dim 0, all other types are added which functions as concatenation for strings and arrays, but may give undesired results for other types\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false
  },
  "VHS_SelectLatest": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "output/AnimateDiff",
            "vhs_path_extensions": []
          }
        ],
        "filename_postfix": [
          "STRING",
          {
            "placeholder": ".webm"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix",
        "filename_postfix"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "Filename"
    ],
    "name": "VHS_SelectLatest",
    "display_name": "Select Latest 🎥🅥🅗🅢",
    "description": "Select Latest 🎥🅥🅗🅢\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv id=VHS_shortdesc\u003EExperimental virtual node to select the most recently modified file from a given folder\u003C/div\u003E\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003EAssists in the creation of workflows where outputs from one execution are used elsewhere in subsequent executions.\u003C/div\u003E\u003Cdiv style=\"font-size: 0.8em\"\u003E\u003Cdiv vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EInputs: \u003Cdiv vhs_title=\"filename_prefix\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Efilename_prefix: A path which can consist of a combination of folders and a prefix which candidate files must match\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"filename_postfix\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003Efilename_postfix: A string which chich the selected file must end with. Useful for limiting to a target extension.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EOutputs: \u003Cdiv vhs_title=\"Filename\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"\u003E\u003Cdiv style=\"color: #AAA; height: 1.5em;\"\u003E[\u003Cspan style=\"font-family: monospace\"\u003E-\u003C/span\u003E]\u003C/div\u003E\u003Cdiv style=\"width: 100%\"\u003EFilename: A string representing a file path to the most recently modified file.\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E",
    "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
    "category": "Video Helper Suite 🎥🅥🅗🅢",
    "output_node": false,
    "experimental": true
  },
  "WanVideoSampler": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "image_embeds": [
          "WANVIDIMAGE_EMBEDS"
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "shift": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Moves the model to the offload device after sampling"
          }
        ],
        "scheduler": [
          [
            "unipc",
            "unipc/beta",
            "dpm++",
            "dpm++/beta",
            "dpm++_sde",
            "dpm++_sde/beta",
            "euler",
            "euler/beta",
            "deis",
            "lcm",
            "lcm/beta",
            "res_multistep",
            "flowmatch_causvid",
            "flowmatch_distill",
            "flowmatch_pusa",
            "multitalk"
          ],
          {
            "default": "uni_pc"
          }
        ],
        "riflex_freq_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1,
            "tooltip": "Frequency index for RIFLEX, disabled when 0, default 6. Allows for new frames to be generated after without looping"
          }
        ]
      },
      "optional": {
        "text_embeds": [
          "WANVIDEOTEXTEMBEDS"
        ],
        "samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video process"
          }
        ],
        "denoise_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "feta_args": [
          "FETAARGS"
        ],
        "context_options": [
          "WANVIDCONTEXT"
        ],
        "cache_args": [
          "CACHEARGS"
        ],
        "flowedit_args": [
          "FLOWEDITARGS"
        ],
        "batched_cfg": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Batch cond and uncond for faster sampling, possibly faster on some hardware, uses more memory"
          }
        ],
        "slg_args": [
          "SLGARGS"
        ],
        "rope_function": [
          [
            "default",
            "comfy",
            "comfy_chunked"
          ],
          {
            "default": "comfy",
            "tooltip": "Comfy's RoPE implementation doesn't use complex numbers and can thus be compiled, that should be a lot faster when using torch.compile. Chunked version has reduced peak VRAM usage when not using torch.compile"
          }
        ],
        "loop_args": [
          "LOOPARGS"
        ],
        "experimental_args": [
          "EXPERIMENTALARGS"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "unianimate_poses": [
          "UNIANIMATE_POSE"
        ],
        "fantasytalking_embeds": [
          "FANTASYTALKING_EMBEDS"
        ],
        "uni3c_embeds": [
          "UNI3C_EMBEDS"
        ],
        "multitalk_embeds": [
          "MULTITALK_EMBEDS"
        ],
        "freeinit_args": [
          "FREEINITARGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image_embeds",
        "steps",
        "cfg",
        "shift",
        "seed",
        "force_offload",
        "scheduler",
        "riflex_freq_index"
      ],
      "optional": [
        "text_embeds",
        "samples",
        "denoise_strength",
        "feta_args",
        "context_options",
        "cache_args",
        "flowedit_args",
        "batched_cfg",
        "slg_args",
        "rope_function",
        "loop_args",
        "experimental_args",
        "sigmas",
        "unianimate_poses",
        "fantasytalking_embeds",
        "uni3c_embeds",
        "multitalk_embeds",
        "freeinit_args"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "WanVideoSampler",
    "display_name": "WanVideo Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoDecode": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "samples": [
          "LATENT"
        ],
        "enable_vae_tiling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Drastically reduces memory use but will introduce seams at tile stride boundaries. The location and number of seams is dictated by the tile stride size. The visibility of seams can be controlled by increasing the tile size. Seams become less obvious at 1.5x stride and are barely noticeable at 2x stride size. Which is to say if you use a stride width of 160, the seams are barely noticeable with a tile width of 320."
          }
        ],
        "tile_x": [
          "INT",
          {
            "default": 272,
            "min": 40,
            "max": 2048,
            "step": 8,
            "tooltip": "Tile width in pixels. Smaller values use less VRAM but will make seams more obvious."
          }
        ],
        "tile_y": [
          "INT",
          {
            "default": 272,
            "min": 40,
            "max": 2048,
            "step": 8,
            "tooltip": "Tile height in pixels. Smaller values use less VRAM but will make seams more obvious."
          }
        ],
        "tile_stride_x": [
          "INT",
          {
            "default": 144,
            "min": 32,
            "max": 2040,
            "step": 8,
            "tooltip": "Tile stride width in pixels. Smaller values use less VRAM but will introduce more seams."
          }
        ],
        "tile_stride_y": [
          "INT",
          {
            "default": 128,
            "min": 32,
            "max": 2040,
            "step": 8,
            "tooltip": "Tile stride height in pixels. Smaller values use less VRAM but will introduce more seams."
          }
        ]
      },
      "optional": {
        "normalization": [
          [
            "default",
            "minmax"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "samples",
        "enable_vae_tiling",
        "tile_x",
        "tile_y",
        "tile_stride_x",
        "tile_stride_y"
      ],
      "optional": [
        "normalization"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "WanVideoDecode",
    "display_name": "WanVideo Decode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTextEncode": {
    "input": {
      "required": {
        "t5": [
          "WANTEXTENCODER"
        ],
        "positive_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model_to_offload": [
          "WANVIDEOMODEL",
          {
            "tooltip": "Model to move to offload_device before encoding"
          }
        ],
        "use_disk_cache": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Cache the text embeddings to disk for faster re-use, under the custom_nodes/ComfyUI-WanVideoWrapper/text_embed_cache directory"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "t5",
        "positive_prompt",
        "negative_prompt"
      ],
      "optional": [
        "force_offload",
        "model_to_offload",
        "use_disk_cache"
      ]
    },
    "output": [
      "WANVIDEOTEXTEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "text_embeds"
    ],
    "name": "WanVideoTextEncode",
    "display_name": "WanVideo TextEncode",
    "description": "Encodes text prompts into text embeddings. For rudimentary prompt travel you can input multiple prompts separated by '|', they will be equally spread over the video length",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTextEncodeSingle": {
    "input": {
      "required": {
        "t5": [
          "WANTEXTENCODER"
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model_to_offload": [
          "WANVIDEOMODEL",
          {
            "tooltip": "Model to move to offload_device before encoding"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "t5",
        "prompt"
      ],
      "optional": [
        "force_offload",
        "model_to_offload"
      ]
    },
    "output": [
      "WANVIDEOTEXTEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "text_embeds"
    ],
    "name": "WanVideoTextEncodeSingle",
    "display_name": "WanVideo TextEncodeSingle",
    "description": "Encodes text prompt into text embedding.",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoClipVisionEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image_1": [
          "IMAGE",
          {
            "tooltip": "Image to encode"
          }
        ],
        "strength_1": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional clip embed multiplier"
          }
        ],
        "strength_2": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional clip embed multiplier"
          }
        ],
        "crop": [
          [
            "center",
            "disabled"
          ],
          {
            "default": "center",
            "tooltip": "Crop image to 224x224 before encoding"
          }
        ],
        "combine_embeds": [
          [
            "average",
            "sum",
            "concat",
            "batch"
          ],
          {
            "default": "average",
            "tooltip": "Method to combine multiple clip embeds"
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "negative_image": [
          "IMAGE",
          {
            "tooltip": "image to use for uncond"
          }
        ],
        "tiles": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16,
            "step": 2,
            "tooltip": "Use matteo's tiled image encoding for improved accuracy"
          }
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Ratio of the tile average"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image_1",
        "strength_1",
        "strength_2",
        "crop",
        "combine_embeds",
        "force_offload"
      ],
      "optional": [
        "image_2",
        "negative_image",
        "tiles",
        "ratio"
      ]
    },
    "output": [
      "WANVIDIMAGE_CLIPEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoClipVisionEncode",
    "display_name": "WanVideo ClipVision Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoImageToVideoEncode": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Strength of noise augmentation, helpful for I2V where some noise can add motion and give sharper results"
          }
        ],
        "start_latent_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for I2V where lower values allow for more motion"
          }
        ],
        "end_latent_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for I2V where lower values allow for more motion"
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "clip_embeds": [
          "WANVIDIMAGE_CLIPEMBEDS",
          {
            "tooltip": "Clip vision encoded image"
          }
        ],
        "start_image": [
          "IMAGE",
          {
            "tooltip": "Image to encode"
          }
        ],
        "end_image": [
          "IMAGE",
          {
            "tooltip": "end frame"
          }
        ],
        "control_embeds": [
          "WANVIDIMAGE_EMBEDS",
          {
            "tooltip": "Control signal for the Fun -model"
          }
        ],
        "fun_or_fl2v_model": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Enable when using official FLF2V or Fun model"
          }
        ],
        "temporal_mask": [
          "MASK",
          {
            "tooltip": "mask"
          }
        ],
        "extra_latents": [
          "LATENT",
          {
            "tooltip": "Extra latents to add to the input front, used for Skyreels A2 reference images"
          }
        ],
        "tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Use tiled VAE encoding for reduced memory use"
          }
        ],
        "add_cond_latents": [
          "ADD_COND_LATENTS",
          {
            "advanced": true,
            "tooltip": "Additional cond latents WIP"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "num_frames",
        "noise_aug_strength",
        "start_latent_strength",
        "end_latent_strength",
        "force_offload"
      ],
      "optional": [
        "clip_embeds",
        "start_image",
        "end_image",
        "control_embeds",
        "fun_or_fl2v_model",
        "temporal_mask",
        "extra_latents",
        "tiled_vae",
        "add_cond_latents"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoImageToVideoEncode",
    "display_name": "WanVideo ImageToVideo Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoEncode": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "image": [
          "IMAGE"
        ],
        "enable_vae_tiling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Drastically reduces memory use but may introduce seams"
          }
        ],
        "tile_x": [
          "INT",
          {
            "default": 272,
            "min": 64,
            "max": 2048,
            "step": 1,
            "tooltip": "Tile size in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "tile_y": [
          "INT",
          {
            "default": 272,
            "min": 64,
            "max": 2048,
            "step": 1,
            "tooltip": "Tile size in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "tile_stride_x": [
          "INT",
          {
            "default": 144,
            "min": 32,
            "max": 2048,
            "step": 32,
            "tooltip": "Tile stride in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "tile_stride_y": [
          "INT",
          {
            "default": 128,
            "min": 32,
            "max": 2048,
            "step": 32,
            "tooltip": "Tile stride in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ]
      },
      "optional": {
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Strength of noise augmentation, helpful for leapfusion I2V where some noise can add motion and give sharper results"
          }
        ],
        "latent_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for leapfusion I2V where lower values allow for more motion"
          }
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "image",
        "enable_vae_tiling",
        "tile_x",
        "tile_y",
        "tile_stride_x",
        "tile_stride_y"
      ],
      "optional": [
        "noise_aug_strength",
        "latent_strength",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "WanVideoEncode",
    "display_name": "WanVideo Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoEmptyEmbeds": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ]
      },
      "optional": {
        "control_embeds": [
          "WANVIDIMAGE_EMBEDS",
          {
            "tooltip": "control signal for the Fun -model"
          }
        ],
        "extra_latents": [
          "LATENT",
          {
            "tooltip": "First latent to use for the Pusa -model"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_frames"
      ],
      "optional": [
        "control_embeds",
        "extra_latents"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoEmptyEmbeds",
    "display_name": "WanVideo Empty Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoEnhanceAVideo": {
    "input": {
      "required": {
        "weight": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "tooltip": "The feta Weight of the Enhance-A-Video"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percentage of the steps to apply Enhance-A-Video"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percentage of the steps to apply Enhance-A-Video"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weight",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "FETAARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "feta_args"
    ],
    "name": "WanVideoEnhanceAVideo",
    "display_name": "WanVideo Enhance-A-Video",
    "description": "https://github.com/NUS-HPC-AI-Lab/Enhance-A-Video",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoContextOptions": {
    "input": {
      "required": {
        "context_schedule": [
          [
            "uniform_standard",
            "uniform_looped",
            "static_standard"
          ]
        ],
        "context_frames": [
          "INT",
          {
            "default": 81,
            "min": 2,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of pixel frames in the context, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "context_stride": [
          "INT",
          {
            "default": 4,
            "min": 4,
            "max": 100,
            "step": 1,
            "tooltip": "Context stride as pixel frames, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "context_overlap": [
          "INT",
          {
            "default": 16,
            "min": 4,
            "max": 100,
            "step": 1,
            "tooltip": "Context overlap as pixel frames, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "freenoise": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Shuffle the noise"
          }
        ],
        "verbose": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Print debug output"
          }
        ]
      },
      "optional": {
        "fuse_method": [
          [
            "linear",
            "pyramid"
          ],
          {
            "default": "linear",
            "tooltip": "Window weight function: linear=ramps at edges only, pyramid=triangular weights peaking in middle"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "context_schedule",
        "context_frames",
        "context_stride",
        "context_overlap",
        "freenoise",
        "verbose"
      ],
      "optional": [
        "fuse_method"
      ]
    },
    "output": [
      "WANVIDCONTEXT"
    ],
    "output_is_list": [false],
    "output_name": [
      "context_options"
    ],
    "name": "WanVideoContextOptions",
    "display_name": "WanVideo Context Options",
    "description": "Context options for WanVideo, allows splitting the video into context windows and attemps blending them for longer generations than the model and memory otherwise would allow.",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTextEmbedBridge": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive"
      ],
      "optional": [
        "negative"
      ]
    },
    "output": [
      "WANVIDEOTEXTEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "text_embeds"
    ],
    "name": "WanVideoTextEmbedBridge",
    "display_name": "WanVideo TextEmbed Bridge",
    "description": "Bridge between ComfyUI native text embedding and WanVideoWrapper text embedding",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoFlowEdit": {
    "input": {
      "required": {
        "source_embeds": [
          "WANVIDEOTEXTEMBEDS"
        ],
        "skip_steps": [
          "INT",
          {
            "default": 4,
            "min": 0
          }
        ],
        "drift_steps": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "drift_flow_shift": [
          "FLOAT",
          {
            "default": 3,
            "min": 1,
            "max": 30,
            "step": 0.01
          }
        ],
        "source_cfg": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "drift_cfg": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "source_image_embeds": [
          "WANVIDIMAGE_EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "source_embeds",
        "skip_steps",
        "drift_steps",
        "drift_flow_shift",
        "source_cfg",
        "drift_cfg"
      ],
      "optional": [
        "source_image_embeds"
      ]
    },
    "output": [
      "FLOWEDITARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "flowedit_args"
    ],
    "name": "WanVideoFlowEdit",
    "display_name": "WanVideo FlowEdit",
    "description": "Flowedit options for WanVideo",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoControlEmbeds": {
    "input": {
      "required": {
        "latents": [
          "LATENT",
          {
            "tooltip": "Encoded latents to use as control signals"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the control signal"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the control signal"
          }
        ]
      },
      "optional": {
        "fun_ref_image": [
          "LATENT",
          {
            "tooltip": "Reference latent for the Fun 1.1 -model"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "fun_ref_image"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoControlEmbeds",
    "display_name": "WanVideo Control Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoSLG": {
    "input": {
      "required": {
        "blocks": [
          "STRING",
          {
            "default": "10",
            "tooltip": "Blocks to skip uncond on, separated by comma, index starts from 0"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the control signal"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the control signal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blocks",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "SLGARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "slg_args"
    ],
    "name": "WanVideoSLG",
    "display_name": "WanVideo SLG",
    "description": "Skips uncond on the selected blocks",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoLoopArgs": {
    "input": {
      "required": {
        "shift_skip": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "tooltip": "Skip step of latent shift"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the looping effect"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the looping effect"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shift_skip",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "LOOPARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "loop_args"
    ],
    "name": "WanVideoLoopArgs",
    "display_name": "WanVideo Loop Args",
    "description": "Looping through latent shift as shown in https://github.com/YisuiTT/Mobius/",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoSetBlockSwap": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "block_swap_args": [
          "BLOCKSWAPARGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "block_swap_args"
      ]
    },
    "output": [
      "WANVIDEOMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoSetBlockSwap",
    "display_name": "WanVideo Set BlockSwap",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoExperimentalArgs": {
    "input": {
      "required": {
        "video_attention_split_steps": [
          "STRING",
          {
            "default": "",
            "tooltip": "Steps to split self attention when using multiple prompts"
          }
        ],
        "cfg_zero_star": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "https://github.com/WeichenFan/CFG-Zero-star"
          }
        ],
        "use_zero_init": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "zero_star_steps": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "tooltip": "Steps to split self attention when using multiple prompts"
          }
        ],
        "use_fresca": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "https://github.com/WikiChao/FreSca"
          }
        ],
        "fresca_scale_low": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "fresca_scale_high": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "fresca_freq_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "video_attention_split_steps",
        "cfg_zero_star",
        "use_zero_init",
        "zero_star_steps",
        "use_fresca",
        "fresca_scale_low",
        "fresca_scale_high",
        "fresca_freq_cutoff"
      ]
    },
    "output": [
      "EXPERIMENTALARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "exp_args"
    ],
    "name": "WanVideoExperimentalArgs",
    "display_name": "WanVideo Experimental Args",
    "description": "Experimental stuff",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "experimental": true
  },
  "WanVideoVACEEncode": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "vace_start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the steps to apply VACE"
          }
        ],
        "vace_end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the steps to apply VACE"
          }
        ]
      },
      "optional": {
        "input_frames": [
          "IMAGE"
        ],
        "ref_images": [
          "IMAGE"
        ],
        "input_masks": [
          "MASK"
        ],
        "prev_vace_embeds": [
          "WANVIDIMAGE_EMBEDS"
        ],
        "tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Use tiled VAE encoding for reduced memory use"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "num_frames",
        "strength",
        "vace_start_percent",
        "vace_end_percent"
      ],
      "optional": [
        "input_frames",
        "ref_images",
        "input_masks",
        "prev_vace_embeds",
        "tiled_vae"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "vace_embeds"
    ],
    "name": "WanVideoVACEEncode",
    "display_name": "WanVideo VACE Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoPhantomEmbeds": {
    "input": {
      "required": {
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "phantom_latent_1": [
          "LATENT",
          {
            "tooltip": "reference latents for the phantom model"
          }
        ],
        "phantom_cfg_scale": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "tooltip": "CFG scale for the extra phantom cond pass"
          }
        ],
        "phantom_start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the phantom model"
          }
        ],
        "phantom_end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the phantom model"
          }
        ]
      },
      "optional": {
        "phantom_latent_2": [
          "LATENT",
          {
            "tooltip": "reference latents for the phantom model"
          }
        ],
        "phantom_latent_3": [
          "LATENT",
          {
            "tooltip": "reference latents for the phantom model"
          }
        ],
        "phantom_latent_4": [
          "LATENT",
          {
            "tooltip": "reference latents for the phantom model"
          }
        ],
        "vace_embeds": [
          "WANVIDIMAGE_EMBEDS",
          {
            "tooltip": "VACE embeds"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "num_frames",
        "phantom_latent_1",
        "phantom_cfg_scale",
        "phantom_start_percent",
        "phantom_end_percent"
      ],
      "optional": [
        "phantom_latent_2",
        "phantom_latent_3",
        "phantom_latent_4",
        "vace_embeds"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoPhantomEmbeds",
    "display_name": "WanVideo Phantom Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoRealisDanceLatents": {
    "input": {
      "required": {
        "ref_latent": [
          "LATENT",
          {
            "tooltip": "Reference image to encode"
          }
        ],
        "pose_cond_start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the SMPL model"
          }
        ],
        "pose_cond_end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the SMPL model"
          }
        ]
      },
      "optional": {
        "smpl_latent": [
          "LATENT",
          {
            "tooltip": "SMPL pose image to encode"
          }
        ],
        "hamer_latent": [
          "LATENT",
          {
            "tooltip": "Hamer hand pose image to encode"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ref_latent",
        "pose_cond_start_percent",
        "pose_cond_end_percent"
      ],
      "optional": [
        "smpl_latent",
        "hamer_latent"
      ]
    },
    "output": [
      "ADD_COND_LATENTS"
    ],
    "output_is_list": [false],
    "output_name": [
      "add_cond_latents"
    ],
    "name": "WanVideoRealisDanceLatents",
    "display_name": "WanVideo RealisDance Latents",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoApplyNAG": {
    "input": {
      "required": {
        "original_text_embeds": [
          "WANVIDEOTEXTEMBEDS"
        ],
        "nag_text_embeds": [
          "WANVIDEOTEXTEMBEDS"
        ],
        "nag_scale": [
          "FLOAT",
          {
            "default": 11,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "nag_tau": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0,
            "max": 10,
            "step": 0.1
          }
        ],
        "nag_alpha": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_text_embeds",
        "nag_text_embeds",
        "nag_scale",
        "nag_tau",
        "nag_alpha"
      ]
    },
    "output": [
      "WANVIDEOTEXTEMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "text_embeds"
    ],
    "name": "WanVideoApplyNAG",
    "display_name": "WanVideo Apply NAG",
    "description": "Adds NAG prompt embeds to original prompt embeds: 'https://github.com/ChenDarYen/Normalized-Attention-Guidance'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoMiniMaxRemoverEmbeds": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "latents": [
          "LATENT",
          {
            "tooltip": "Encoded latents to use as control signals"
          }
        ],
        "mask_latents": [
          "LATENT",
          {
            "tooltip": "Encoded latents to use as mask"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_frames",
        "latents",
        "mask_latents"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoMiniMaxRemoverEmbeds",
    "display_name": "WanVideo MiniMax Remover Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoFreeInitArgs": {
    "input": {
      "required": {
        "freeinit_num_iters": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "tooltip": "Number of FreeInit iterations"
          }
        ],
        "freeinit_method": [
          [
            "butterworth",
            "ideal",
            "gaussian",
            "none"
          ],
          {
            "default": "ideal",
            "tooltip": "Frequency filter type"
          }
        ],
        "freeinit_n": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 10,
            "tooltip": "Butterworth filter order (only for butterworth)"
          }
        ],
        "freeinit_d_s": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "tooltip": "Spatial filter cutoff"
          }
        ],
        "freeinit_d_t": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "tooltip": "Temporal filter cutoff"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "freeinit_num_iters",
        "freeinit_method",
        "freeinit_n",
        "freeinit_d_s",
        "freeinit_d_t"
      ]
    },
    "output": [
      "FREEINITARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "freeinit_args"
    ],
    "name": "WanVideoFreeInitArgs",
    "display_name": "WanVideo Free Init Args",
    "description": "https://github.com/TianxingWu/FreeInit; FreeInit, a concise yet effective method to improve temporal consistency of videos generated by diffusion models",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "experimental": true
  },
  "WanVideoSetRadialAttention": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "dense_attention_mode": [
          [
            "sdpa",
            "flash_attn_2",
            "flash_attn_3",
            "sageattn",
            "sparse_sage_attention"
          ],
          {
            "default": "sageattn",
            "tooltip": "The attention mode for dense attention"
          }
        ],
        "dense_blocks": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 40,
            "step": 1,
            "tooltip": "Number of blocks to apply normal attention to"
          }
        ],
        "dense_vace_blocks": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 15,
            "step": 1,
            "tooltip": "Number of vace blocks to apply normal attention to"
          }
        ],
        "dense_timesteps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "The step to start applying sparse attention"
          }
        ],
        "decay_factor": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Controls how quickly the attention window shrinks as the distance between frames increases in the sparse attention mask."
          }
        ],
        "block_size": [
          [128, 64],
          {
            "default": 128,
            "tooltip": "Radial attention block size, larger blocks are faster but restricts usable dimensions more."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "dense_attention_mode",
        "dense_blocks",
        "dense_vace_blocks",
        "dense_timesteps",
        "decay_factor",
        "block_size"
      ]
    },
    "output": [
      "WANVIDEOMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoSetRadialAttention",
    "display_name": "WanVideo Set Radial Attention",
    "description": "Sets radial attention parameters, dense attention refers to normal attention",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoBlockList": {
    "input": {
      "required": {
        "blocks": [
          "STRING",
          {
            "default": "1",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blocks"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "block_list"
    ],
    "name": "WanVideoBlockList",
    "display_name": "WanVideo Block List",
    "description": "Comma separated list of blocks to apply block swap to, can also use ranges like '0-5' or '0,2,3-5' etc., can be connected to the dense_blocks input of 'WanVideoSetRadialAttention' node",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoReCamMasterCameraEmbed": {
    "input": {
      "required": {
        "camera_poses": [
          "CAMERAPOSES"
        ],
        "latents": [
          "LATENT",
          {
            "tooltip": "source video"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_poses",
        "latents"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS",
      "CAMERAPOSES"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "camera_embeds",
      "camera_poses"
    ],
    "name": "WanVideoReCamMasterCameraEmbed",
    "display_name": "WanVideo ReCamMaster Camera Embed",
    "description": "https://github.com/KwaiVGI/ReCamMaster",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "ReCamMasterPoseVisualizer": {
    "input": {
      "required": {
        "camera_poses": [
          "CAMERAPOSES"
        ],
        "base_xval": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "zval": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 10,
            "step": 0.01
          }
        ],
        "arrow_length": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_poses",
        "base_xval",
        "zval",
        "scale",
        "arrow_length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReCamMasterPoseVisualizer",
    "display_name": "ReCamMaster Pose Visualizer",
    "description": "\nVisualizes the camera poses, from Animatediff-Evolved CameraCtrl Pose  \nor a .txt file with RealEstate camera intrinsics and coordinates, in a 3D plot. \n",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoReCamMasterGenerateOrbitCamera": {
    "input": {
      "required": {
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of frames to generate"
          }
        ],
        "degrees": [
          "INT",
          {
            "default": 90,
            "min": -180,
            "max": 180,
            "step": 1,
            "tooltip": "Degrees to orbit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "num_frames",
        "degrees"
      ]
    },
    "output": [
      "CAMERAPOSES"
    ],
    "output_is_list": [false],
    "output_name": [
      "camera_poses"
    ],
    "name": "WanVideoReCamMasterGenerateOrbitCamera",
    "display_name": "WanVideo ReCamMaster Generate Orbit Camera",
    "description": "https://github.com/KwaiVGI/ReCamMaster",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoReCamMasterDefaultCamera": {
    "input": {
      "required": {
        "camera_type": [
          [
            "pan_right",
            "pan_left",
            "tilt_up",
            "tilt_down",
            "zoom_in",
            "zoom_out",
            "translate_up",
            "translate_down",
            "arc_left",
            "arc_right"
          ],
          {
            "default": "pan_right",
            "tooltip": "Camera type to use"
          }
        ],
        "latents": [
          "LATENT",
          {
            "tooltip": "source video"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_type",
        "latents"
      ]
    },
    "output": [
      "CAMERAPOSES"
    ],
    "output_is_list": [false],
    "output_name": [
      "camera_poses"
    ],
    "name": "WanVideoReCamMasterDefaultCamera",
    "display_name": "WanVideo ReCamMaster Default Camera",
    "description": "https://github.com/KwaiVGI/ReCamMaster",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoUniAnimatePoseInput": {
    "input": {
      "required": {
        "pose_images": [
          "IMAGE",
          {
            "tooltip": "Pose images"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Strength of the pose control"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percentage for the pose control"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percentage for the pose control"
          }
        ]
      },
      "optional": {
        "reference_pose_image": [
          "IMAGE",
          {
            "tooltip": "Reference pose image"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_images",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "reference_pose_image"
      ]
    },
    "output": [
      "UNIANIMATE_POSE"
    ],
    "output_is_list": [false],
    "output_name": [
      "unianimate_poses"
    ],
    "name": "WanVideoUniAnimatePoseInput",
    "display_name": "WanVideo UniAnimate Pose Input",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoUniAnimateDWPoseDetector": {
    "input": {
      "required": {
        "pose_images": [
          "IMAGE",
          {
            "tooltip": "Pose images"
          }
        ],
        "score_threshold": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Score threshold for pose detection"
          }
        ],
        "stick_width": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100,
            "step": 1,
            "tooltip": "Stick width for drawing keypoints"
          }
        ],
        "draw_body": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Draw body keypoints"
          }
        ],
        "body_keypoint_size": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "Body keypoint size"
          }
        ],
        "draw_feet": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Draw feet keypoints"
          }
        ],
        "draw_hands": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Draw hand keypoints"
          }
        ],
        "hand_keypoint_size": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "Hand keypoint size"
          }
        ],
        "colorspace": [
          [
            "RGB",
            "BGR"
          ],
          {
            "tooltip": "Color space for the output image"
          }
        ],
        "handle_not_detected": [
          [
            "empty",
            "repeat"
          ],
          {
            "default": "empty",
            "tooltip": "How to handle undetected poses, empty inserts black and repeat inserts previous detection"
          }
        ],
        "draw_head": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Draw head keypoints"
          }
        ]
      },
      "optional": {
        "reference_pose_image": [
          "IMAGE",
          {
            "tooltip": "Reference pose image"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_images",
        "score_threshold",
        "stick_width",
        "draw_body",
        "body_keypoint_size",
        "draw_feet",
        "draw_hands",
        "hand_keypoint_size",
        "colorspace",
        "handle_not_detected",
        "draw_head"
      ],
      "optional": [
        "reference_pose_image"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "poses",
      "reference_pose"
    ],
    "name": "WanVideoUniAnimateDWPoseDetector",
    "display_name": "WanVideo UniAnimate DWPose Detector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoDiffusionForcingSampler": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "text_embeds": [
          "WANVIDEOTEXTEMBEDS"
        ],
        "image_embeds": [
          "WANVIDIMAGE_EMBEDS"
        ],
        "addnoise_condition": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 1000,
            "tooltip": "Improves consistency in long video generation"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 24,
            "min": 1,
            "max": 120,
            "step": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 30,
            "step": 0.01
          }
        ],
        "shift": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 1000,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Moves the model to the offload device after sampling"
          }
        ],
        "scheduler": [
          [
            "unipc",
            "unipc/beta",
            "euler",
            "euler/beta",
            "lcm",
            "lcm/beta"
          ],
          {
            "default": "unipc"
          }
        ]
      },
      "optional": {
        "samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video process"
          }
        ],
        "prefix_samples": [
          "LATENT",
          {
            "tooltip": "prefix latents"
          }
        ],
        "denoise_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cache_args": [
          "CACHEARGS"
        ],
        "slg_args": [
          "SLGARGS"
        ],
        "rope_function": [
          [
            "default",
            "comfy"
          ],
          {
            "default": "comfy",
            "tooltip": "Comfy's RoPE implementation doesn't use complex numbers and can thus be compiled, that should be a lot faster when using torch.compile"
          }
        ],
        "experimental_args": [
          "EXPERIMENTALARGS"
        ],
        "unianimate_poses": [
          "UNIANIMATE_POSE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "text_embeds",
        "image_embeds",
        "addnoise_condition",
        "fps",
        "steps",
        "cfg",
        "shift",
        "seed",
        "force_offload",
        "scheduler"
      ],
      "optional": [
        "samples",
        "prefix_samples",
        "denoise_strength",
        "cache_args",
        "slg_args",
        "rope_function",
        "experimental_args",
        "unianimate_poses"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "WanVideoDiffusionForcingSampler",
    "display_name": "WanVideo Diffusion Forcing Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "DownloadAndLoadWav2VecModel": {
    "input": {
      "required": {
        "model": [
          [
            "facebook/wav2vec2-base-960h",
            "TencentGameMate/chinese-wav2vec2-base"
          ]
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16"
          ],
          {
            "default": "fp16"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "main_device",
            "tooltip": "Initial device to load the model to, NOT recommended with the larger models unless you have 48GB+ VRAM"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision",
        "load_device"
      ]
    },
    "output": [
      "WAV2VECMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "wav2vec_model"
    ],
    "name": "DownloadAndLoadWav2VecModel",
    "display_name": "(Down)load Wav2Vec Model",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "FantasyTalkingModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16"
          ],
          {
            "default": "fp16"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision"
      ]
    },
    "output": [
      "FANTASYTALKINGMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "FantasyTalkingModelLoader",
    "display_name": "FantasyTalking Model Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "FantasyTalkingWav2VecEmbeds": {
    "input": {
      "required": {
        "wav2vec_model": [
          "WAV2VECMODEL"
        ],
        "fantasytalking_model": [
          "FANTASYTALKINGMODEL"
        ],
        "audio": [
          "AUDIO"
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 1000,
            "step": 1
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 23,
            "min": 1,
            "max": 60,
            "step": 0.1
          }
        ],
        "audio_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "tooltip": "Strength of the audio conditioning"
          }
        ],
        "audio_cfg_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "tooltip": "When not 1.0, an extra model pass without audio conditioning is done: slower inference but more motion is allowed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "wav2vec_model",
        "fantasytalking_model",
        "audio",
        "num_frames",
        "fps",
        "audio_scale",
        "audio_cfg_scale"
      ]
    },
    "output": [
      "FANTASYTALKING_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "fantasytalking_embeds"
    ],
    "name": "FantasyTalkingWav2VecEmbeds",
    "display_name": "FantasyTalking Wav2Vec Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoFunCameraEmbeds": {
    "input": {
      "required": {
        "poses": [
          "CAMERACTRL_POSES"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Strength of the camera motion"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the steps to apply camera motion"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the steps to apply camera motion"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "poses",
        "width",
        "height",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoFunCameraEmbeds",
    "display_name": "WanVideo FunCamera Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoUni3C_ControlnetLoader": {
    "input": {
      "required": {
        "model": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/controlnet' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16"
          ],
          {
            "default": "fp16"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp8_e4m3fn_fast_no_ffn"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "main_device",
            "tooltip": "Initial device to load the model to, NOT recommended with the larger models unless you have 48GB+ VRAM"
          }
        ],
        "attention_mode": [
          [
            "sdpa",
            "sageattn"
          ],
          {
            "default": "sdpa"
          }
        ]
      },
      "optional": {
        "compile_args": [
          "WANCOMPILEARGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision",
        "quantization",
        "load_device",
        "attention_mode"
      ],
      "optional": [
        "compile_args"
      ]
    },
    "output": [
      "WANVIDEOCONTROLNET"
    ],
    "output_is_list": [false],
    "output_name": [
      "controlnet"
    ],
    "name": "WanVideoUni3C_ControlnetLoader",
    "display_name": "WanVideo Uni3C Controlnet Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoUni3C_embeds": {
    "input": {
      "required": {
        "controlnet": [
          "WANVIDEOCONTROLNET"
        ],
        "render_latent": [
          "LATENT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the steps to apply the controlnet"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the steps to apply the controlnet"
          }
        ]
      },
      "optional": {
        "render_mask": [
          "MASK",
          {
            "tooltip": "NOT IMPLEMENTED!"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "controlnet",
        "render_latent",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "render_mask"
      ]
    },
    "output": [
      "UNI3C_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "uni3c_embeds"
    ],
    "name": "WanVideoUni3C_embeds",
    "display_name": "WanVideo Uni3C Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoControlnetLoader": {
    "input": {
      "required": {
        "model": [
          [
            "FLUX.1_Dev_ControlNet_Upscaler.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/controlnet' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16"
          ],
          {
            "default": "bf16"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp8_e4m3fn_fast_no_ffn"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "main_device",
            "tooltip": "Initial device to load the model to, NOT recommended with the larger models unless you have 48GB+ VRAM"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision",
        "quantization",
        "load_device"
      ]
    },
    "output": [
      "WANVIDEOCONTROLNET"
    ],
    "output_is_list": [false],
    "output_name": [
      "controlnet"
    ],
    "name": "WanVideoControlnetLoader",
    "display_name": "WanVideo Controlnet Loader",
    "description": "Loads ControlNet model from 'https://huggingface.co/collections/TheDenk/wan21-controlnets-68302b430411dafc0d74d2fc'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoControlnet": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "controlnet": [
          "WANVIDEOCONTROLNET"
        ],
        "control_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.0001,
            "tooltip": "controlnet strength"
          }
        ],
        "control_stride": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 8,
            "step": 1,
            "tooltip": "controlnet stride"
          }
        ],
        "control_start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the steps to apply controlnet"
          }
        ],
        "control_end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the steps to apply controlnet"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "controlnet",
        "control_images",
        "strength",
        "control_stride",
        "control_start_percent",
        "control_end_percent"
      ]
    },
    "output": [
      "WANVIDEOMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoControlnet",
    "display_name": "WanVideo Controlnet Apply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoATITracks": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "tracks": [
          "STRING"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 220,
            "min": 0,
            "max": 1000,
            "step": 0.1
          }
        ],
        "topk": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Start percent of the steps to apply ATI"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "End percent of the steps to apply ATI"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tracks",
        "width",
        "height",
        "temperature",
        "topk",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "WANVIDEOMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoATITracks",
    "display_name": "WanVideo ATI Tracks",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoATITracksVisualize": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "tracks": [
          "STRING"
        ],
        "min_radius": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "radius for the very first point (oldest)"
          }
        ],
        "max_radius": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "radius for the current point (newest)"
          }
        ],
        "max_retain": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "Maximum number of points to retain"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "tracks",
        "min_radius",
        "max_radius",
        "max_retain"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "WanVideoATITracksVisualize",
    "display_name": "WanVideo ATI Tracks Visualize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoATI_comfy": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "tracks": [
          "STRING"
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 220,
            "min": 0,
            "max": 1000,
            "step": 0.1
          }
        ],
        "topk": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "width",
        "height",
        "tracks",
        "temperature",
        "topk"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoATI_comfy",
    "display_name": "WanVideo ATI Comfy",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "MultiTalkModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16"
          ],
          {
            "default": "fp16"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision"
      ]
    },
    "output": [
      "MULTITALKMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "MultiTalkModelLoader",
    "display_name": "MultiTalk Model Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "MultiTalkWav2VecEmbeds": {
    "input": {
      "required": {
        "wav2vec_model": [
          "WAV2VECMODEL"
        ],
        "audio_1": [
          "AUDIO"
        ],
        "normalize_loudness": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 1000,
            "step": 1
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 25,
            "min": 1,
            "max": 60,
            "step": 0.1
          }
        ],
        "audio_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "tooltip": "Strength of the audio conditioning"
          }
        ],
        "audio_cfg_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "tooltip": "When not 1.0, an extra model pass without audio conditioning is done: slower inference but more motion is allowed"
          }
        ],
        "multi_audio_type": [
          [
            "para",
            "add"
          ],
          {
            "default": "para",
            "tooltip": "'para' overlay speakers in parallel, 'add' concatenate sequentially"
          }
        ]
      },
      "optional": {
        "audio_2": [
          "AUDIO"
        ],
        "audio_3": [
          "AUDIO"
        ],
        "audio_4": [
          "AUDIO"
        ],
        "ref_target_masks": [
          "MASK",
          {
            "tooltip": "Per-speaker semantic mask(s) in pixel space. Supply one mask per speaker (plus optional background) to guide mouth assignment"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "wav2vec_model",
        "audio_1",
        "normalize_loudness",
        "num_frames",
        "fps",
        "audio_scale",
        "audio_cfg_scale",
        "multi_audio_type"
      ],
      "optional": [
        "audio_2",
        "audio_3",
        "audio_4",
        "ref_target_masks"
      ]
    },
    "output": [
      "MULTITALK_EMBEDS",
      "AUDIO"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "multitalk_embeds",
      "audio"
    ],
    "name": "MultiTalkWav2VecEmbeds",
    "display_name": "MultiTalk Wav2Vec Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoImageToVideoMultiTalk": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "frame_window_size": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "motion_frame": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000,
            "step": 1,
            "tooltip": "Driven frame length used in the long video generation."
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "colormatch": [
          [
            "disabled",
            "mkl",
            "hm",
            "reinhard",
            "mvgd",
            "hm-mvgd-hm",
            "hm-mkl-hm"
          ],
          {
            "default": "disabled"
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE",
          {
            "tooltip": "Image to encode"
          }
        ],
        "tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Use tiled VAE encoding for reduced memory use"
          }
        ],
        "clip_embeds": [
          "WANVIDIMAGE_CLIPEMBEDS",
          {
            "tooltip": "Clip vision encoded image"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "frame_window_size",
        "motion_frame",
        "force_offload",
        "colormatch"
      ],
      "optional": [
        "start_image",
        "tiled_vae",
        "clip_embeds"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoImageToVideoMultiTalk",
    "display_name": "WanVideo Image To Video MultiTalk",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "FLUX.1\\FLUX.1_Canny_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Depth_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Dev_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Fill_Dev_Q8_0.gguf",
            "FLUX.1_Kontext\\FLUX.1_Kontext_Dev_Q8_0.gguf",
            "HiDream-E1\\HiDream-E1_Q8_0.gguf",
            "HiDream-I1\\HiDream-I1_Full_Q8_0.gguf",
            "Wan2.1\\Wan2.1_I2V_14B_480p_Q8_0.gguf",
            "Wan2.1\\Wan2.1_I2V_14B_FusionX_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_FusionX_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_FusionX_VACE_Q8_0.gguf",
            "Wan2.1\\Wan2.1_T2V_14B_Q8_0.gguf",
            "Wan2.1\\Wan2.1_VACE_14B_Q8_0.gguf",
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16",
            "fp16_fast"
          ],
          {
            "default": "bf16"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp8_e4m3fn_fast_no_ffn",
            "fp8_e4m3fn_scaled",
            "fp8_e5m2_scaled"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "main_device",
            "tooltip": "Initial device to load the model to, NOT recommended with the larger models unless you have 48GB+ VRAM"
          }
        ]
      },
      "optional": {
        "attention_mode": [
          [
            "sdpa",
            "flash_attn_2",
            "flash_attn_3",
            "sageattn",
            "flex_attention",
            "radial_sage_attention"
          ],
          {
            "default": "sdpa"
          }
        ],
        "compile_args": [
          "WANCOMPILEARGS"
        ],
        "block_swap_args": [
          "BLOCKSWAPARGS"
        ],
        "lora": [
          "WANVIDLORA",
          {
            "default": null
          }
        ],
        "vram_management_args": [
          "VRAM_MANAGEMENTARGS",
          {
            "default": null,
            "tooltip": "Alternative offloading method from DiffSynth-Studio, more aggressive in reducing memory use than block swapping, but can be slower"
          }
        ],
        "vace_model": [
          "VACEPATH",
          {
            "default": null,
            "tooltip": "VACE model to use when not using model that has it included"
          }
        ],
        "fantasytalking_model": [
          "FANTASYTALKINGMODEL",
          {
            "default": null,
            "tooltip": "FantasyTalking model https://github.com/Fantasy-AMAP"
          }
        ],
        "multitalk_model": [
          "MULTITALKMODEL",
          {
            "default": null,
            "tooltip": "Multitalk model"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision",
        "quantization",
        "load_device"
      ],
      "optional": [
        "attention_mode",
        "compile_args",
        "block_swap_args",
        "lora",
        "vram_management_args",
        "vace_model",
        "fantasytalking_model",
        "multitalk_model"
      ]
    },
    "output": [
      "WANVIDEOMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoModelLoader",
    "display_name": "WanVideo Model Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoVAELoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/vae'"
          }
        ]
      },
      "optional": {
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "bf16"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ],
      "optional": [
        "precision"
      ]
    },
    "output": [
      "WANVAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "vae"
    ],
    "name": "WanVideoVAELoader",
    "display_name": "WanVideo VAE Loader",
    "description": "Loads Wan VAE model from 'ComfyUI/models/vae'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoLoraSelect": {
    "input": {
      "required": {
        "lora": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "tooltip": "LORA models are expected to be in ComfyUI/models/loras with .safetensors extension"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ]
      },
      "optional": {
        "prev_lora": [
          "WANVIDLORA",
          {
            "default": null,
            "tooltip": "For loading multiple LoRAs"
          }
        ],
        "blocks": [
          "SELECTEDBLOCKS"
        ],
        "low_mem_load": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Load the LORA model with less VRAM usage, slower loading. This affects ALL LoRAs, not just the current one"
          }
        ],
        "merge_loras": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Merge LoRAs into the model, otherwise they are loaded on the fly. Always enabled for GGUF and scaled fp8 models. This affects ALL LoRAs, not just the current one"
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "lora",
        "strength"
      ],
      "optional": [
        "prev_lora",
        "blocks",
        "low_mem_load",
        "merge_loras"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "WANVIDLORA"
    ],
    "output_is_list": [false],
    "output_name": [
      "lora"
    ],
    "name": "WanVideoLoraSelect",
    "display_name": "WanVideo Lora Select",
    "description": "Select a LoRA model from ComfyUI/models/loras",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoSetLoRAs": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "lora": [
          "WANVIDLORA"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora"
      ]
    },
    "output": [
      "WANVIDEOMODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "WanVideoSetLoRAs",
    "display_name": "WanVideo Set LoRAs",
    "description": "Sets the LoRA weights to be used directly in linear layers of the model, this does NOT merge LoRAs",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "experimental": true
  },
  "WanVideoLoraBlockEdit": {
    "input": {
      "required": {
        "blocks.0.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.1.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.2.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.3.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.4.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.5.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.6.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.7.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.8.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.9.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.10.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.11.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.12.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.13.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.14.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.15.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.16.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.17.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.18.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.19.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.20.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.21.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.22.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.23.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.24.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.25.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.26.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.27.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.28.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.29.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.30.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.31.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.32.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.33.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.34.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.35.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.36.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.37.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.38.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.39.": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "layer_filter": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39."
      ],
      "optional": [
        "layer_filter"
      ]
    },
    "output": [
      "SELECTEDBLOCKS"
    ],
    "output_is_list": [false],
    "output_name": [
      "blocks"
    ],
    "name": "WanVideoLoraBlockEdit",
    "display_name": "WanVideo Lora Block Edit",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "output_tooltips": [
      "The modified lora model"
    ]
  },
  "WanVideoTinyVAELoader": {
    "input": {
      "required": {
        "model_name": [
          [],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/vae_approx'"
          }
        ]
      },
      "optional": {
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "fp16"
          }
        ],
        "parallel": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "uses more memory but is faster"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ],
      "optional": [
        "precision",
        "parallel"
      ]
    },
    "output": [
      "WANVAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "vae"
    ],
    "name": "WanVideoTinyVAELoader",
    "display_name": "WanVideo Tiny VAE Loader",
    "description": "Loads Wan VAE model from 'ComfyUI/models/vae'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoVACEModelSelect": {
    "input": {
      "required": {
        "vace_model": [
          [
            "FLUX.1\\FLUX.1_Dev_FP16.safetensors",
            "FramePack\\FramePack_I2V_HY_FP8.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_FP16.safetensors.safetensors",
            "Hunyuan3D-2\\Hunyuan3d-DiT-2_mv_FP16.safetensors.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' VACE model to use when not using model that has it included"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vace_model"
      ]
    },
    "output": [
      "VACEPATH"
    ],
    "output_is_list": [false],
    "output_name": [
      "vace_model"
    ],
    "name": "WanVideoVACEModelSelect",
    "display_name": "WanVideo VACE Module Select",
    "description": "VACE model to use when not using model that has it included, loaded from 'ComfyUI/models/diffusion_models'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoLoraSelectMulti": {
    "input": {
      "required": {
        "lora_0": [
          [
            "none",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "none"
          }
        ],
        "strength_0": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ],
        "lora_1": [
          [
            "none",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "none"
          }
        ],
        "strength_1": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ],
        "lora_2": [
          [
            "none",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "none"
          }
        ],
        "strength_2": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ],
        "lora_3": [
          [
            "none",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "none"
          }
        ],
        "strength_3": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ],
        "lora_4": [
          [
            "none",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "default": "none"
          }
        ],
        "strength_4": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ]
      },
      "optional": {
        "prev_lora": [
          "WANVIDLORA",
          {
            "default": null,
            "tooltip": "For loading multiple LoRAs"
          }
        ],
        "blocks": [
          "SELECTEDBLOCKS"
        ],
        "low_mem_load": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Load the LORA model with less VRAM usage, slower loading"
          }
        ],
        "merge_loras": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Merge LoRAs into the model, otherwise they are loaded on the fly. Always enabled for GGUF and scaled fp8 models. This affects ALL LoRAs, not just the current one"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_0",
        "strength_0",
        "lora_1",
        "strength_1",
        "lora_2",
        "strength_2",
        "lora_3",
        "strength_3",
        "lora_4",
        "strength_4"
      ],
      "optional": [
        "prev_lora",
        "blocks",
        "low_mem_load",
        "merge_loras"
      ]
    },
    "output": [
      "WANVIDLORA"
    ],
    "output_is_list": [false],
    "output_name": [
      "lora"
    ],
    "name": "WanVideoLoraSelectMulti",
    "display_name": "WanVideo Lora Select Multi",
    "description": "Select a LoRA model from ComfyUI/models/loras",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoBlockSwap": {
    "input": {
      "required": {
        "blocks_to_swap": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 40,
            "step": 1,
            "tooltip": "Number of transformer blocks to swap, the 14B model has 40, while the 1.3B model has 30 blocks"
          }
        ],
        "offload_img_emb": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Offload img_emb to offload_device"
          }
        ],
        "offload_txt_emb": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Offload time_emb to offload_device"
          }
        ]
      },
      "optional": {
        "use_non_blocking": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Use non-blocking memory transfer for offloading, reserves more RAM but is faster"
          }
        ],
        "vace_blocks_to_swap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 15,
            "step": 1,
            "tooltip": "Number of VACE blocks to swap, the VACE model has 15 blocks"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blocks_to_swap",
        "offload_img_emb",
        "offload_txt_emb"
      ],
      "optional": [
        "use_non_blocking",
        "vace_blocks_to_swap"
      ]
    },
    "output": [
      "BLOCKSWAPARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "block_swap_args"
    ],
    "name": "WanVideoBlockSwap",
    "display_name": "WanVideo Block Swap",
    "description": "Settings for block swapping, reduces VRAM use by swapping blocks to CPU memory",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoVRAMManagement": {
    "input": {
      "required": {
        "offload_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Percentage of parameters to offload"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "offload_percent"
      ]
    },
    "output": [
      "VRAM_MANAGEMENTARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "vram_management_args"
    ],
    "name": "WanVideoVRAMManagement",
    "display_name": "WanVideo VRAM Management",
    "description": "Alternative offloading method from DiffSynth-Studio, more aggressive in reducing memory use than block swapping, but can be slower",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTorchCompileSettings": {
    "input": {
      "required": {
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_transformer_blocks_only": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile only the transformer blocks, usually enough and can make compilation faster and less error prone"
          }
        ]
      },
      "optional": {
        "dynamo_recompile_limit": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.recompile_limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_transformer_blocks_only"
      ],
      "optional": [
        "dynamo_recompile_limit"
      ]
    },
    "output": [
      "WANCOMPILEARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "torch_compile_args"
    ],
    "name": "WanVideoTorchCompileSettings",
    "display_name": "WanVideo Torch Compile Settings",
    "description": "torch.compile settings, when connected to the model loader, torch.compile of the selected layers is attempted. Requires Triton and torch 2.5.0 is recommended",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "LoadWanVideoT5TextEncoder": {
    "input": {
      "required": {
        "model_name": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/text_encoders'"
          }
        ],
        "precision": [
          [
            "fp32",
            "bf16"
          ],
          {
            "default": "bf16"
          }
        ]
      },
      "optional": {
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "precision"
      ],
      "optional": [
        "load_device",
        "quantization"
      ]
    },
    "output": [
      "WANTEXTENCODER"
    ],
    "output_is_list": [false],
    "output_name": [
      "wan_t5_model"
    ],
    "name": "LoadWanVideoT5TextEncoder",
    "display_name": "WanVideo T5 Text Encoder Loader",
    "description": "Loads Wan text_encoder model from 'ComfyUI/models/LLM'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "LoadWanVideoClipTextEncoder": {
    "input": {
      "required": {
        "model_name": [
          [
            "CLIP_Vision_H.safetensors",
            "Llava_Llama_3_Vision.safetensors",
            "SigCLIP_Vision_Patch14_384.safetensors",
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/clip_vision'"
          }
        ],
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "fp16"
          }
        ]
      },
      "optional": {
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "precision"
      ],
      "optional": [
        "load_device"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [false],
    "output_name": [
      "wan_clip_vision"
    ],
    "name": "LoadWanVideoClipTextEncoder",
    "display_name": "WanVideo CLIP Text Encoder Loader",
    "description": "Loads Wan clip_vision model from 'ComfyUI/models/clip_vision'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoImageResizeToClosest": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "Image to resize"
          }
        ],
        "generation_width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "generation_height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "aspect_ratio_preservation": [
          [
            "keep_input",
            "stretch_to_new",
            "crop_to_new"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "generation_width",
        "generation_height",
        "aspect_ratio_preservation"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "image",
      "width",
      "height"
    ],
    "name": "WanVideoImageResizeToClosest",
    "display_name": "WanVideo Image Resize To Closest",
    "description": "Resizes image to the closest supported resolution based on aspect ratio and max pixels, according to the original code",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoVACEStartToEndFrame": {
    "input": {
      "required": {
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "empty_frame_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "White level of empty frame to use"
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ],
        "control_images": [
          "IMAGE"
        ],
        "inpaint_mask": [
          "MASK",
          {
            "tooltip": "Inpaint mask to use for the empty frames"
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1,
            "tooltip": "Index to start from"
          }
        ],
        "end_index": [
          "INT",
          {
            "default": -1,
            "min": -10000,
            "max": 10000,
            "step": 1,
            "tooltip": "Index to end at"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "num_frames",
        "empty_frame_level"
      ],
      "optional": [
        "start_image",
        "end_image",
        "control_images",
        "inpaint_mask",
        "start_index",
        "end_index"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "WanVideoVACEStartToEndFrame",
    "display_name": "WanVideo VACE Start To End Frame",
    "description": "Helper node to create start/end frame batch and masks for VACE",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "ExtractStartFramesForContinuations": {
    "input": {
      "required": {
        "input_video_frames": [
          "IMAGE",
          {
            "tooltip": "Input video frames to extract the start frames from."
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1024,
            "step": 1,
            "tooltip": "Number of frames to get from the start of the video."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_video_frames",
        "num_frames"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "start_frames"
    ],
    "name": "ExtractStartFramesForContinuations",
    "display_name": "Extract Start Frames For Continuations",
    "description": "Extracts the first N frames from a video sequence for continuations.",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "CreateCFGScheduleFloatList": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of steps to schedule cfg for"
          }
        ],
        "cfg_scale_start": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 30,
            "step": 0.01,
            "round": 0.01,
            "tooltip": "CFG scale to use for the steps"
          }
        ],
        "cfg_scale_end": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 30,
            "step": 0.01,
            "round": 0.01,
            "tooltip": "CFG scale to use for the steps"
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out"
          ],
          {
            "default": "linear",
            "tooltip": "Interpolation method to use for the cfg scale"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "round": 0.01,
            "tooltip": "Start percent of the steps to apply cfg"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "round": 0.01,
            "tooltip": "End percent of the steps to apply cfg"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "cfg_scale_start",
        "cfg_scale_end",
        "interpolation",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "float_list"
    ],
    "name": "CreateCFGScheduleFloatList",
    "display_name": "Create CFG Schedule Float List",
    "description": "Helper node to generate a list of floats that can be used to schedule cfg scale for the steps, outside the set range cfg is set to 1.0",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTeaCache": {
    "input": {
      "required": {
        "rel_l1_thresh": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0,
            "max": 1,
            "step": 0.001,
            "tooltip": "Higher values will make TeaCache more aggressive, faster, but may cause artifacts. Good value range for 1.3B: 0.05 - 0.08, for other models 0.15-0.30"
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9999,
            "step": 1,
            "tooltip": "Start percentage of the steps to apply TeaCache"
          }
        ],
        "end_step": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9999,
            "step": 1,
            "tooltip": "End steps to apply TeaCache"
          }
        ],
        "cache_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device",
            "tooltip": "Device to cache to"
          }
        ],
        "use_coefficients": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Use calculated coefficients for more accuracy. When enabled therel_l1_thresh should be about 10 times higher than without"
          }
        ]
      },
      "optional": {
        "mode": [
          [
            "e",
            "e0"
          ],
          {
            "default": "e",
            "tooltip": "Choice between using e (time embeds, default) or e0 (modulated time embeds)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "rel_l1_thresh",
        "start_step",
        "end_step",
        "cache_device",
        "use_coefficients"
      ],
      "optional": [
        "mode"
      ]
    },
    "output": [
      "CACHEARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "cache_args"
    ],
    "name": "WanVideoTeaCache",
    "display_name": "WaWanVideo TeaCache",
    "description": "\nPatch WanVideo model to use TeaCache. Speeds up inference by caching the output and  \napplying it instead of doing the step.  Best results are achieved by choosing the  \nappropriate coefficients for the model. Early steps should never be skipped, with too  \naggressive values this can happen and the motion suffers. Starting later can help with that too.   \nWhen NOT using coefficients, the threshold value should be  \nabout 10 times smaller than the value used with coefficients.  \n\nOfficial recommended values https://github.com/ali-vilab/TeaCache/tree/main/TeaCache4Wan2.1:\n\n\n\u003Cpre style='font-family:monospace'\u003E\n+-------------------+--------+---------+--------+\n|       Model       |  Low   | Medium  |  High  |\n+-------------------+--------+---------+--------+\n| Wan2.1 t2v 1.3B  |  0.05  |  0.07   |  0.08  |\n| Wan2.1 t2v 14B   |  0.14  |  0.15   |  0.20  |\n| Wan2.1 i2v 480P  |  0.13  |  0.19   |  0.26  |\n| Wan2.1 i2v 720P  |  0.18  |  0.20   |  0.30  |\n+-------------------+--------+---------+--------+\n\u003C/pre\u003E \n",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoMagCache": {
    "input": {
      "required": {
        "magcache_thresh": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0,
            "max": 0.3,
            "step": 0.001,
            "tooltip": "How strongly to cache the output of diffusion model. This value must be non-negative."
          }
        ],
        "magcache_K": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 6,
            "step": 1,
            "tooltip": "The maxium skip steps of MagCache."
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9999,
            "step": 1,
            "tooltip": "Step to start applying MagCache"
          }
        ],
        "end_step": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9999,
            "step": 1,
            "tooltip": "Step to end applying MagCache"
          }
        ],
        "cache_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device",
            "tooltip": "Device to cache to"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "magcache_thresh",
        "magcache_K",
        "start_step",
        "end_step",
        "cache_device"
      ]
    },
    "output": [
      "CACHEARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "cache_args"
    ],
    "name": "WanVideoMagCache",
    "display_name": "WanVideo MagCache",
    "description": "MagCache for WanVideoWrapper, source https://github.com/Zehong-Ma/MagCache",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "experimental": true
  },
  "WanVideoEasyCache": {
    "input": {
      "required": {
        "easycache_thresh": [
          "FLOAT",
          {
            "default": 0.015,
            "min": 0,
            "max": 1,
            "step": 0.001,
            "tooltip": "How strongly to cache the output of diffusion model. This value must be non-negative."
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 9999,
            "step": 1,
            "tooltip": "Step to start applying EasyCache"
          }
        ],
        "end_step": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9999,
            "step": 1,
            "tooltip": "Step to end applying EasyCache"
          }
        ],
        "cache_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device",
            "tooltip": "Device to cache to"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "easycache_thresh",
        "start_step",
        "end_step",
        "cache_device"
      ]
    },
    "output": [
      "CACHEARGS"
    ],
    "output_is_list": [false],
    "output_name": [
      "cache_args"
    ],
    "name": "WanVideoEasyCache",
    "display_name": "WanVideo EasyCache",
    "description": "EasyCache for WanVideoWrapper, source https://github.com/H-EmbodVis/EasyCache",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "experimental": true
  },
  "WanVideoImageClipEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "Image to encode"
          }
        ],
        "vae": [
          "WANVAE"
        ],
        "generation_width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "generation_height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 8096,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ]
      },
      "optional": {
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Strength of noise augmentation, helpful for I2V where some noise can add motion and give sharper results"
          }
        ],
        "latent_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for I2V where lower values allow for more motion"
          }
        ],
        "clip_embed_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.001,
            "tooltip": "Additional clip embed multiplier"
          }
        ],
        "adjust_resolution": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Performs the same resolution adjustment as in the original code"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image",
        "vae",
        "generation_width",
        "generation_height",
        "num_frames"
      ],
      "optional": [
        "force_offload",
        "noise_aug_strength",
        "latent_strength",
        "clip_embed_strength",
        "adjust_resolution"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoImageClipEncode",
    "display_name": "WanVideo ImageClip Encode (Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "deprecated": true
  },
  "AutoDownloadBiRefNetModel": {
    "input": {
      "required": {
        "model_name": [
          [
            "General",
            "General-HR",
            "Matting-HR",
            "General-Lite",
            "General-Lite-2K",
            "General-reso_512",
            "Portrait",
            "Matting",
            "Matting-Lite",
            "DIS",
            "HRSOD",
            "COD",
            "DIS-TR_TEs",
            "General-legacy",
            "General-dynamic"
          ]
        ],
        "device": [
          [
            "AUTO",
            "CPU"
          ]
        ]
      },
      "optional": {
        "dtype": [
          [
            "float32",
            "float16"
          ],
          {
            "default": "float32"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "device"
      ],
      "optional": [
        "dtype"
      ]
    },
    "output": [
      "BIREFNET"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "AutoDownloadBiRefNetModel",
    "display_name": "AutoDownloadBiRefNetModel",
    "description": "Auto download BiRefNet model from huggingface to models/BiRefNet/{model_name}.safetensors",
    "python_module": "custom_nodes.comfyui_birefnet_ll",
    "category": "image/BiRefNet",
    "output_node": false
  },
  "LoadRembgByBiRefNetModel": {
    "input": {
      "required": {
        "model": [
          [
            "General-HR.safetensors",
            "Portrait.safetensors"
          ]
        ],
        "device": [
          [
            "AUTO",
            "CPU"
          ]
        ]
      },
      "optional": {
        "use_weight": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dtype": [
          [
            "float32",
            "float16"
          ],
          {
            "default": "float32"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "device"
      ],
      "optional": [
        "use_weight",
        "dtype"
      ]
    },
    "output": [
      "BIREFNET"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "LoadRembgByBiRefNetModel",
    "display_name": "LoadRembgByBiRefNetModel",
    "description": "Load BiRefNet model from folder models/BiRefNet or the path of birefnet configured in the extra YAML file",
    "python_module": "custom_nodes.comfyui_birefnet_ll",
    "category": "rembg/BiRefNet",
    "output_node": false
  },
  "RembgByBiRefNet": {
    "input": {
      "required": {
        "model": [
          "BIREFNET"
        ],
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "images"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "RembgByBiRefNet",
    "display_name": "RembgByBiRefNet",
    "description": "Approximate Fast Foreground Colour Estimation. https://github.com/Photoroom/fast-foreground-estimation",
    "python_module": "custom_nodes.comfyui_birefnet_ll",
    "category": "rembg/BiRefNet",
    "output_node": false
  },
  "RembgByBiRefNetAdvanced": {
    "input": {
      "required": {
        "model": [
          "BIREFNET"
        ],
        "images": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "tooltip": "The width of the pre-processing image, does not affect the final output image size"
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "tooltip": "The height of the pre-processing image, does not affect the final output image size"
          }
        ],
        "upscale_method": [
          [
            "bilinear",
            "nearest",
            "nearest-exact",
            "bicubic"
          ],
          {
            "default": "bilinear",
            "tooltip": "Interpolation method for pre-processing image and post-processing mask"
          }
        ],
        "blur_size": [
          "INT",
          {
            "default": 90,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "blur_size_two": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "fill_color": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ],
        "mask_threshold": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "images",
        "width",
        "height",
        "upscale_method",
        "blur_size",
        "blur_size_two",
        "fill_color",
        "color",
        "mask_threshold"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "RembgByBiRefNetAdvanced",
    "display_name": "RembgByBiRefNetAdvanced",
    "description": "Approximate Fast Foreground Colour Estimation. https://github.com/Photoroom/fast-foreground-estimation",
    "python_module": "custom_nodes.comfyui_birefnet_ll",
    "category": "rembg/BiRefNet",
    "output_node": false
  },
  "GetMaskByBiRefNet": {
    "input": {
      "required": {
        "model": [
          "BIREFNET"
        ],
        "images": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "tooltip": "The width of the pre-processing image, does not affect the final output image size"
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "tooltip": "The height of the pre-processing image, does not affect the final output image size"
          }
        ],
        "upscale_method": [
          [
            "bilinear",
            "nearest",
            "nearest-exact",
            "bicubic"
          ],
          {
            "default": "bilinear",
            "tooltip": "Interpolation method for pre-processing image and post-processing mask"
          }
        ],
        "mask_threshold": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.004
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "images",
        "width",
        "height",
        "upscale_method",
        "mask_threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "mask"
    ],
    "name": "GetMaskByBiRefNet",
    "display_name": "GetMaskByBiRefNet",
    "description": "",
    "python_module": "custom_nodes.comfyui_birefnet_ll",
    "category": "rembg/BiRefNet",
    "output_node": false
  },
  "BlurFusionForegroundEstimation": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "blur_size": [
          "INT",
          {
            "default": 90,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "blur_size_two": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "fill_color": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "masks",
        "blur_size",
        "blur_size_two",
        "fill_color",
        "color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "BlurFusionForegroundEstimation",
    "display_name": "BlurFusionForegroundEstimation",
    "description": "Approximate Fast Foreground Colour Estimation. https://github.com/Photoroom/fast-foreground-estimation",
    "python_module": "custom_nodes.comfyui_birefnet_ll",
    "category": "rembg/BiRefNet",
    "output_node": false
  },
  "AnimeFace_SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "remove_background_using_abg": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 512,
            "max": 512,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "remove_background_using_abg",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "ABG_CHARACTER_MASK (MASK)"
    ],
    "name": "AnimeFace_SemSegPreprocessor",
    "display_name": "Anime Face Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "AnyLineArtPreprocessor_aux": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "merge_with_lineart": [
          [
            "lineart_standard",
            "lineart_realisitic",
            "lineart_anime",
            "manga_line"
          ],
          {
            "default": "lineart_standard"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 1280,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "lineart_lower_bound": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "lineart_upper_bound": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "object_min_size": [
          "INT",
          {
            "default": 36,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "object_connectivity": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "merge_with_lineart",
        "resolution",
        "lineart_lower_bound",
        "lineart_upper_bound",
        "object_min_size",
        "object_connectivity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "AnyLineArtPreprocessor_aux",
    "display_name": "AnyLine Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "BinaryPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bin_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bin_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "BinaryPreprocessor",
    "display_name": "Binary Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "CannyEdgePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "CannyEdgePreprocessor",
    "display_name": "Canny Edge",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ColorPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ColorPreprocessor",
    "display_name": "Color Pallete",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "DensePosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "model": [
          [
            "densepose_r50_fpn_dl.torchscript",
            "densepose_r101_fpn_dl.torchscript"
          ],
          {
            "default": "densepose_r50_fpn_dl.torchscript"
          }
        ],
        "cmap": [
          [
            "Viridis (MagicAnimate)",
            "Parula (CivitAI)"
          ],
          {
            "default": "Viridis (MagicAnimate)"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "model",
        "cmap",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "DensePosePreprocessor",
    "display_name": "DensePose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_vitl14.pth",
            "depth_anything_vitb14.pth",
            "depth_anything_vits14.pth"
          ],
          {
            "default": "depth_anything_vitl14.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingPreprocessor",
    "display_name": "Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Zoe_DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "outdoor"
          ],
          {
            "default": "indoor"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe_DepthAnythingPreprocessor",
    "display_name": "Zoe Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DepthAnythingV2Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_v2_vitg.pth",
            "depth_anything_v2_vitl.pth",
            "depth_anything_v2_vitb.pth",
            "depth_anything_v2_vits.pth"
          ],
          {
            "default": "depth_anything_v2_vitl.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingV2Preprocessor",
    "display_name": "Depth Anything V2 - Relative",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DiffusionEdge_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "urban",
            "natrual"
          ],
          {
            "default": "indoor"
          }
        ],
        "patch_batch_size": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "patch_batch_size",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "DiffusionEdge_Preprocessor",
    "display_name": "Diffusion Edge (batch size ↑ =\u003E speed ↑, VRAM ↑)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DSINE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "fov": [
          "FLOAT",
          {
            "default": 60,
            "min": 0,
            "max": 365,
            "step": 0.01
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "fov",
        "iterations",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "DSINE-NormalMapPreprocessor",
    "display_name": "DSINE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DWPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "bbox_detector": [
          [
            "None",
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.onnx"
          }
        ],
        "pose_estimator": [
          [
            "dw-ll_ucoco_384_bs5.torchscript.pt",
            "dw-ll_ucoco_384.onnx",
            "dw-ll_ucoco.onnx"
          ],
          {
            "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "bbox_detector",
        "pose_estimator",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "DWPreprocessor",
    "display_name": "DWPose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "AnimalPosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bbox_detector": [
          [
            "None",
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.torchscript.pt"
          }
        ],
        "pose_estimator": [
          [
            "rtmpose-m_ap10k_256_bs5.torchscript.pt",
            "rtmpose-m_ap10k_256.onnx"
          ],
          {
            "default": "rtmpose-m_ap10k_256_bs5.torchscript.pt"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bbox_detector",
        "pose_estimator",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "AnimalPosePreprocessor",
    "display_name": "AnimalPose Estimator (AP10K)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "HEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "HEDPreprocessor",
    "display_name": "HED Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "FakeScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FakeScribblePreprocessor",
    "display_name": "Fake Scribble Lines (aka scribble_hed)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "InpaintPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "optional": {
        "black_pixel_for_xinsir_cn": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ],
      "optional": [
        "black_pixel_for_xinsir_cn"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "InpaintPreprocessor",
    "display_name": "Inpaint Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "LeReS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "rm_nearest": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "rm_background": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "boost": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "rm_nearest",
        "rm_background",
        "boost",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "LeReS-DepthMapPreprocessor",
    "display_name": "LeReS Depth Map (enable boost for leres++)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "LineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "coarse": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "coarse",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineArtPreprocessor",
    "display_name": "Realistic Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AnimeLineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "AnimeLineArtPreprocessor",
    "display_name": "Anime Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "LineartStandardPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "guassian_sigma": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "intensity_threshold": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "guassian_sigma",
        "intensity_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineartStandardPreprocessor",
    "display_name": "Standard Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Manga2Anime_LineArt_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Manga2Anime_LineArt_Preprocessor",
    "display_name": "Manga Lineart (aka lineart_anime_denoise)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "MediaPipe-FaceMeshPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "max_faces": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "min_confidence": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "max_faces",
        "min_confidence",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "MediaPipe-FaceMeshPreprocessor",
    "display_name": "MediaPipe Face Mesh",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "MeshGraphormer-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ],
        "detect_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "presence_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "mask_bbox_padding",
        "resolution",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "detect_thr",
        "presence_thr"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ]
      },
      "optional": {
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 0.01
          }
        ],
        "drop_size": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "bbox_detector"
      ],
      "optional": [
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "drop_size",
        "mask_bbox_padding",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner With External Detector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Metric3D-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-DepthMapPreprocessor",
    "display_name": "Metric3D Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Metric3D-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-NormalMapPreprocessor",
    "display_name": "Metric3D Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MiDaS-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.28318530717959,
            "min": 0,
            "max": 15.707963267949,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-NormalMapPreprocessor",
    "display_name": "MiDaS Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MiDaS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.28318530717959,
            "min": 0,
            "max": 15.707963267949,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-DepthMapPreprocessor",
    "display_name": "MiDaS Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "M-LSDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "score_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 2,
            "step": 0.01
          }
        ],
        "dist_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 20,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "score_threshold",
        "dist_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "M-LSDPreprocessor",
    "display_name": "M-LSD Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "BAE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "BAE-NormalMapPreprocessor",
    "display_name": "BAE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "OneFormer-COCO-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-COCO-SemSegPreprocessor",
    "display_name": "OneFormer COCO Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "OneFormer-ADE20K-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-ADE20K-SemSegPreprocessor",
    "display_name": "OneFormer ADE20K Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "OpenposePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "OpenposePreprocessor",
    "display_name": "OpenPose Pose",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "PiDiNetPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "PiDiNetPreprocessor",
    "display_name": "PiDiNet Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "SavePoseKpsAsJsonFile": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "PoseKeypoint"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SavePoseKpsAsJsonFile",
    "display_name": "Save Pose Keypoints",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": true
  },
  "FacialPartColoringFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "mode": [
          [
            "point",
            "polygon"
          ],
          {
            "default": "polygon"
          }
        ],
        "skin": [
          "STRING",
          {
            "default": "rgb(0, 153, 255)",
            "multiline": false
          }
        ],
        "left_eye": [
          "STRING",
          {
            "default": "rgb(0, 204, 153)",
            "multiline": false
          }
        ],
        "right_eye": [
          "STRING",
          {
            "default": "rgb(255, 153, 0)",
            "multiline": false
          }
        ],
        "nose": [
          "STRING",
          {
            "default": "rgb(255, 102, 255)",
            "multiline": false
          }
        ],
        "upper_lip": [
          "STRING",
          {
            "default": "rgb(102, 0, 51)",
            "multiline": false
          }
        ],
        "inner_mouth": [
          "STRING",
          {
            "default": "rgb(255, 204, 255)",
            "multiline": false
          }
        ],
        "lower_lip": [
          "STRING",
          {
            "default": "rgb(255, 0, 102)",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "mode",
        "skin",
        "left_eye",
        "right_eye",
        "nose",
        "upper_lip",
        "inner_mouth",
        "lower_lip"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "FacialPartColoringFromPoseKps",
    "display_name": "Colorize Facial Parts from PoseKPS",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "UpperBodyTrackingFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "id_include": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Head_width_height": [
          "STRING",
          {
            "default": "256, 256",
            "multiline": false
          }
        ],
        "Neck_width_height": [
          "STRING",
          {
            "default": "100, 100",
            "multiline": false
          }
        ],
        "Shoulder_width_height": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Torso_width_height": [
          "STRING",
          {
            "default": "350, 450",
            "multiline": false
          }
        ],
        "RArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "RForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "id_include",
        "Head_width_height",
        "Neck_width_height",
        "Shoulder_width_height",
        "Torso_width_height",
        "RArm_width_height",
        "RForearm_width_height",
        "LArm_width_height",
        "LForearm_width_height"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "UpperBodyTrackingFromPoseKps",
    "display_name": "Upper Body Tracking From PoseKps (InstanceDiffusion)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderPeopleKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ],
        "render_body": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_hand": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_face": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "kps",
        "render_body",
        "render_hand",
        "render_face"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderPeopleKps",
    "display_name": "Render Pose JSON (Human)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderAnimalKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ]
      }
    },
    "input_order": {
      "required": [
        "kps"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderAnimalKps",
    "display_name": "Render Pose JSON (Animal)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "PyraCannyPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "PyraCannyPreprocessor",
    "display_name": "PyraCanny",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ImageLuminanceDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 2,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageLuminanceDetector",
    "display_name": "Image Luminance",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "ImageIntensityDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 2,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageIntensityDetector",
    "display_name": "Image Intensity",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "ScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ScribblePreprocessor",
    "display_name": "Scribble Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_XDoG_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "threshold": [
          "INT",
          {
            "default": 32,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_XDoG_Preprocessor",
    "display_name": "Scribble XDoG Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_PiDiNet_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ]
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_PiDiNet_Preprocessor",
    "display_name": "Scribble PiDiNet Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "SAMPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "SAMPreprocessor",
    "display_name": "SAM Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "ShufflePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ShufflePreprocessor",
    "display_name": "Content Shuffle",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "TEEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe_steps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe_steps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "TEEDPreprocessor",
    "display_name": "TEEDPreprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "TilePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "pyrUp_iters": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "pyrUp_iters",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "TilePreprocessor",
    "display_name": "Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileGF_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 0.01
          }
        ],
        "radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "eps": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.001,
            "max": 0.1,
            "step": 0.001
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength",
        "radius",
        "eps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileGF_Preprocessor",
    "display_name": "TTPlanet Tile GuidedFilter",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileSimple_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileSimple_Preprocessor",
    "display_name": "TTPlanet Tile Simple",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "UniFormer-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "UniFormer-SemSegPreprocessor",
    "display_name": "UniFormer Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "SemSegPreprocessor",
    "display_name": "Semantic Segmentor (legacy, alias for UniFormer)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "Unimatch_OptFlowPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "ckpt_name": [
          [
            "gmflow-scale1-mixdata.pth",
            "gmflow-scale2-mixdata.pth",
            "gmflow-scale2-regrefine6-mixdata.pth"
          ],
          {
            "default": "gmflow-scale2-regrefine6-mixdata.pth"
          }
        ],
        "backward_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bidirectional_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "ckpt_name",
        "backward_flow",
        "bidirectional_flow"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "Unimatch_OptFlowPreprocessor",
    "display_name": "Unimatch Optical Flow",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "MaskOptFlow": {
    "input": {
      "required": {
        "optical_flow": [
          "OPTICAL_FLOW"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "optical_flow",
        "mask"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "MaskOptFlow",
    "display_name": "Mask Optical Flow (DragNUWA)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "Zoe-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe-DepthMapPreprocessor",
    "display_name": "Zoe Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "AIO_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "preprocessor": [
          [
            "none",
            "AnimeFace_SemSegPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "BinaryPreprocessor",
            "CannyEdgePreprocessor",
            "ColorPreprocessor",
            "DensePosePreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DSINE-NormalMapPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "LeReS-DepthMapPreprocessor",
            "LineArtPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineartStandardPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "M-LSDPreprocessor",
            "BAE-NormalMapPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "OpenposePreprocessor",
            "PiDiNetPreprocessor",
            "PyraCannyPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "SAMPreprocessor",
            "ShufflePreprocessor",
            "TEEDPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "Zoe-DepthMapPreprocessor"
          ],
          {
            "default": "none"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "preprocessor",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "AIO_Preprocessor",
    "display_name": "AIO Aux Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetPreprocessorSelector": {
    "input": {
      "required": {
        "preprocessor": [
          [
            "none",
            "AnimeFace_SemSegPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "BinaryPreprocessor",
            "CannyEdgePreprocessor",
            "ColorPreprocessor",
            "DensePosePreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DSINE-NormalMapPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "LeReS-DepthMapPreprocessor",
            "LineArtPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineartStandardPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "M-LSDPreprocessor",
            "BAE-NormalMapPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "OpenposePreprocessor",
            "PiDiNetPreprocessor",
            "PyraCannyPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "SAMPreprocessor",
            "ShufflePreprocessor",
            "TEEDPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "Zoe-DepthMapPreprocessor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "preprocessor"
      ]
    },
    "output": [
      [
        "none",
        "AnimeFace_SemSegPreprocessor",
        "AnyLineArtPreprocessor_aux",
        "BinaryPreprocessor",
        "CannyEdgePreprocessor",
        "ColorPreprocessor",
        "DensePosePreprocessor",
        "DepthAnythingPreprocessor",
        "Zoe_DepthAnythingPreprocessor",
        "DepthAnythingV2Preprocessor",
        "DSINE-NormalMapPreprocessor",
        "DWPreprocessor",
        "AnimalPosePreprocessor",
        "HEDPreprocessor",
        "FakeScribblePreprocessor",
        "LeReS-DepthMapPreprocessor",
        "LineArtPreprocessor",
        "AnimeLineArtPreprocessor",
        "LineartStandardPreprocessor",
        "Manga2Anime_LineArt_Preprocessor",
        "MediaPipe-FaceMeshPreprocessor",
        "MeshGraphormer-DepthMapPreprocessor",
        "Metric3D-DepthMapPreprocessor",
        "Metric3D-NormalMapPreprocessor",
        "MiDaS-NormalMapPreprocessor",
        "MiDaS-DepthMapPreprocessor",
        "M-LSDPreprocessor",
        "BAE-NormalMapPreprocessor",
        "OneFormer-COCO-SemSegPreprocessor",
        "OneFormer-ADE20K-SemSegPreprocessor",
        "OpenposePreprocessor",
        "PiDiNetPreprocessor",
        "PyraCannyPreprocessor",
        "ImageLuminanceDetector",
        "ImageIntensityDetector",
        "ScribblePreprocessor",
        "Scribble_XDoG_Preprocessor",
        "Scribble_PiDiNet_Preprocessor",
        "SAMPreprocessor",
        "ShufflePreprocessor",
        "TEEDPreprocessor",
        "TilePreprocessor",
        "TTPlanet_TileGF_Preprocessor",
        "TTPlanet_TileSimple_Preprocessor",
        "UniFormer-SemSegPreprocessor",
        "SemSegPreprocessor",
        "Zoe-DepthMapPreprocessor"
      ]
    ],
    "output_is_list": [false],
    "output_name": [
      "preprocessor"
    ],
    "name": "ControlNetPreprocessorSelector",
    "display_name": "Preprocessor Selector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "PixelPerfectResolution": {
    "input": {
      "required": {
        "original_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "RESOLUTION (INT)"
    ],
    "name": "PixelPerfectResolution",
    "display_name": "Pixel Perfect Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromImage",
    "display_name": "Generation Resolution From Image",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromLatent": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromLatent",
    "display_name": "Generation Resolution From Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "HintImageEnchance": {
    "input": {
      "required": {
        "hint_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hint_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "HintImageEnchance",
    "display_name": "Enchance And Resize Hint Images",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ExecuteAllControlNetPreprocessors": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ExecuteAllControlNetPreprocessors",
    "display_name": "Execute All ControlNet Preprocessors",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetAuxSimpleAddText": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ControlNetAuxSimpleAddText",
    "display_name": "ControlNetAuxSimpleAddText",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "CLIPTextEncodeSDXL+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "size_cond_factor": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "size_cond_factor",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL+",
    "display_name": "🔧 SDXL CLIPTextEncode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "ConditioningCombineMultiple+": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "conditioning_3": [
          "CONDITIONING"
        ],
        "conditioning_4": [
          "CONDITIONING"
        ],
        "conditioning_5": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ],
      "optional": [
        "conditioning_3",
        "conditioning_4",
        "conditioning_5"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombineMultiple+",
    "display_name": "🔧 Cond Combine Multiple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3NegativeConditioning+": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "end": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "SD3NegativeConditioning+",
    "display_name": "🔧 SD3 Negative Conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "FluxAttentionSeeker+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_l_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "clip_l_0",
        "clip_l_1",
        "clip_l_2",
        "clip_l_3",
        "clip_l_4",
        "clip_l_5",
        "clip_l_6",
        "clip_l_7",
        "clip_l_8",
        "clip_l_9",
        "clip_l_10",
        "clip_l_11",
        "t5xxl_0",
        "t5xxl_1",
        "t5xxl_2",
        "t5xxl_3",
        "t5xxl_4",
        "t5xxl_5",
        "t5xxl_6",
        "t5xxl_7",
        "t5xxl_8",
        "t5xxl_9",
        "t5xxl_10",
        "t5xxl_11",
        "t5xxl_12",
        "t5xxl_13",
        "t5xxl_14",
        "t5xxl_15",
        "t5xxl_16",
        "t5xxl_17",
        "t5xxl_18",
        "t5xxl_19",
        "t5xxl_20",
        "t5xxl_21",
        "t5xxl_22",
        "t5xxl_23"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "FluxAttentionSeeker+",
    "display_name": "🔧 Flux Attention Seeker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3AttentionSeekerLG+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_l_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_24": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_25": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_26": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_27": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_28": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_29": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_30": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_31": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "clip_l_0",
        "clip_l_1",
        "clip_l_2",
        "clip_l_3",
        "clip_l_4",
        "clip_l_5",
        "clip_l_6",
        "clip_l_7",
        "clip_l_8",
        "clip_l_9",
        "clip_l_10",
        "clip_l_11",
        "clip_g_0",
        "clip_g_1",
        "clip_g_2",
        "clip_g_3",
        "clip_g_4",
        "clip_g_5",
        "clip_g_6",
        "clip_g_7",
        "clip_g_8",
        "clip_g_9",
        "clip_g_10",
        "clip_g_11",
        "clip_g_12",
        "clip_g_13",
        "clip_g_14",
        "clip_g_15",
        "clip_g_16",
        "clip_g_17",
        "clip_g_18",
        "clip_g_19",
        "clip_g_20",
        "clip_g_21",
        "clip_g_22",
        "clip_g_23",
        "clip_g_24",
        "clip_g_25",
        "clip_g_26",
        "clip_g_27",
        "clip_g_28",
        "clip_g_29",
        "clip_g_30",
        "clip_g_31"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "SD3AttentionSeekerLG+",
    "display_name": "🔧 SD3 Attention Seeker L/G",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3AttentionSeekerT5+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "t5xxl_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "t5xxl_0",
        "t5xxl_1",
        "t5xxl_2",
        "t5xxl_3",
        "t5xxl_4",
        "t5xxl_5",
        "t5xxl_6",
        "t5xxl_7",
        "t5xxl_8",
        "t5xxl_9",
        "t5xxl_10",
        "t5xxl_11",
        "t5xxl_12",
        "t5xxl_13",
        "t5xxl_14",
        "t5xxl_15",
        "t5xxl_16",
        "t5xxl_17",
        "t5xxl_18",
        "t5xxl_19",
        "t5xxl_20",
        "t5xxl_21",
        "t5xxl_22",
        "t5xxl_23"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "SD3AttentionSeekerT5+",
    "display_name": "🔧 SD3 Attention Seeker T5",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "FluxBlocksBuster+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "blocks": [
          "STRING",
          {
            "default": "## 0 = 1.0\n## 1 = 1.0\n## 2 = 1.0\n## 3 = 1.0\n## 4 = 1.0\n## 5 = 1.0\n## 6 = 1.0\n## 7 = 1.0\n## 8 = 1.0\n## 9 = 1.0\n## 10 = 1.0\n## 11 = 1.0\n## 12 = 1.0\n## 13 = 1.0\n## 14 = 1.0\n## 15 = 1.0\n## 16 = 1.0\n## 17 = 1.0\n## 18 = 1.0\n# 0 = 1.0\n# 1 = 1.0\n# 2 = 1.0\n# 3 = 1.0\n# 4 = 1.0\n# 5 = 1.0\n# 6 = 1.0\n# 7 = 1.0\n# 8 = 1.0\n# 9 = 1.0\n# 10 = 1.0\n# 11 = 1.0\n# 12 = 1.0\n# 13 = 1.0\n# 14 = 1.0\n# 15 = 1.0\n# 16 = 1.0\n# 17 = 1.0\n# 18 = 1.0\n# 19 = 1.0\n# 20 = 1.0\n# 21 = 1.0\n# 22 = 1.0\n# 23 = 1.0\n# 24 = 1.0\n# 25 = 1.0\n# 26 = 1.0\n# 27 = 1.0\n# 28 = 1.0\n# 29 = 1.0\n# 30 = 1.0\n# 31 = 1.0\n# 32 = 1.0\n# 33 = 1.0\n# 34 = 1.0\n# 35 = 1.0\n# 36 = 1.0\n# 37 = 1.0",
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "blocks"
      ]
    },
    "output": [
      "MODEL",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MODEL",
      "patched_blocks"
    ],
    "name": "FluxBlocksBuster+",
    "display_name": "🔧 Flux Model Blocks Buster",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "ImageEnhanceDifference+": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "exponent"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageEnhanceDifference+",
    "display_name": "🔧 Image Enhance Difference",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image analysis",
    "output_node": false
  },
  "ImageBatchMultiple+": {
    "input": {
      "required": {
        "image_1": [
          "IMAGE"
        ],
        "method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ],
          {
            "default": "lanczos"
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_1",
        "method"
      ],
      "optional": [
        "image_2",
        "image_3",
        "image_4",
        "image_5"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchMultiple+",
    "display_name": "🔧 Images Batch Multiple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageExpandBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "method": [
          [
            "expand",
            "repeat all",
            "repeat first",
            "repeat last"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageExpandBatch+",
    "display_name": "🔧 Image Expand Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageFromBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "length": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "start",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch+",
    "display_name": "🔧 Image From Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageListToBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageListToBatch+",
    "display_name": "🔧 Image List To Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageBatchToList+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [true],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchToList+",
    "display_name": "🔧 Image Batch To List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageCompositeFromMaskBatch+": {
    "input": {
      "required": {
        "image_from": [
          "IMAGE"
        ],
        "image_to": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_from",
        "image_to",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeFromMaskBatch+",
    "display_name": "🔧 Image Composite From Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageComposite+": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "offset_x",
        "offset_y"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageComposite+",
    "display_name": "🔧 Image Composite",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageCrop+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "position": [
          [
            "top-left",
            "top-center",
            "top-right",
            "right-center",
            "bottom-right",
            "bottom-center",
            "bottom-left",
            "left-center",
            "center"
          ]
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "step": 1
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "position",
        "x_offset",
        "y_offset"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "x",
      "y"
    ],
    "name": "ImageCrop+",
    "display_name": "🔧 Image Crop",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageFlip+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "axis": [
          [
            "x",
            "y",
            "xy"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "axis"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFlip+",
    "display_name": "🔧 Image Flip",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageRandomTransform+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "variation": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "seed",
        "repeat",
        "variation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRandomTransform+",
    "display_name": "🔧 Image Random Transform",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageRemoveAlpha+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRemoveAlpha+",
    "display_name": "🔧 Image Remove Alpha",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImageRemoveBackground+": {
    "input": {
      "required": {
        "rembg_session": [
          "REMBG_SESSION"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "rembg_session",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageRemoveBackground+",
    "display_name": "🔧 Image Remove Background",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageResize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "area",
            "nearest-exact",
            "lanczos"
          ]
        ],
        "method": [
          [
            "stretch",
            "keep proportion",
            "fill / crop",
            "pad"
          ]
        ],
        "condition": [
          [
            "always",
            "downscale if bigger",
            "upscale if smaller",
            "if bigger area",
            "if smaller area"
          ]
        ],
        "multiple_of": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "interpolation",
        "method",
        "condition",
        "multiple_of"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "ImageResize+",
    "display_name": "🔧 Image Resize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageSeamCarving+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "energy": [
          [
            "backward",
            "forward"
          ]
        ],
        "order": [
          [
            "width-first",
            "height-first"
          ]
        ]
      },
      "optional": {
        "keep_mask": [
          "MASK"
        ],
        "drop_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "energy",
        "order"
      ],
      "optional": [
        "keep_mask",
        "drop_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSeamCarving+",
    "display_name": "🔧 Image Seam Carving",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageTile+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "overlap": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "overlap_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "overlap_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rows",
        "cols",
        "overlap",
        "overlap_x",
        "overlap_y"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "IMAGE",
      "tile_width",
      "tile_height",
      "overlap_x",
      "overlap_y"
    ],
    "name": "ImageTile+",
    "display_name": "🔧 Image Tile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageUntile+": {
    "input": {
      "required": {
        "tiles": [
          "IMAGE"
        ],
        "overlap_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "overlap_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tiles",
        "overlap_x",
        "overlap_y",
        "rows",
        "cols"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUntile+",
    "display_name": "🔧 Image Untile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "RemBGSession+": {
    "input": {
      "required": {
        "model": [
          [
            "u2net: general purpose",
            "u2netp: lightweight general purpose",
            "u2net_human_seg: human segmentation",
            "u2net_cloth_seg: cloths Parsing",
            "silueta: very small u2net",
            "isnet-general-use: general purpose",
            "isnet-anime: anime illustrations",
            "sam: general purpose"
          ]
        ],
        "providers": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML",
            "Tensorrt",
            "Azure"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "providers"
      ]
    },
    "output": [
      "REMBG_SESSION"
    ],
    "output_is_list": [false],
    "output_name": [
      "REMBG_SESSION"
    ],
    "name": "RemBGSession+",
    "display_name": "🔧 RemBG Session",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "TransparentBGSession+": {
    "input": {
      "required": {
        "mode": [
          [
            "base",
            "fast",
            "base-nightly"
          ]
        ],
        "use_jit": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "use_jit"
      ]
    },
    "output": [
      "REMBG_SESSION"
    ],
    "output_is_list": [false],
    "output_name": [
      "REMBG_SESSION"
    ],
    "name": "TransparentBGSession+",
    "display_name": "🔧 InSPyReNet TransparentBG",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageApplyLUT+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "lut_file": [
          [
            "put_luts_files_here.txt"
          ]
        ],
        "gamma_correction": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_values": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "lut_file",
        "gamma_correction",
        "clip_values",
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageApplyLUT+",
    "display_name": "🔧 Image Apply LUT",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageCASharpening+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCASharpening+",
    "display_name": "🔧 Image Contrast Adaptive Sharpening",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageDesaturate+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "method": [
          [
            "luminance (Rec.709)",
            "luminance (Rec.601)",
            "average",
            "lightness"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor",
        "method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageDesaturate+",
    "display_name": "🔧 Image Desaturate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "PixelOEPixelize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "downscale_mode": [
          [
            "contrast",
            "bicubic",
            "nearest",
            "center",
            "k-centroid"
          ]
        ],
        "target_size": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "patch_size": [
          "INT",
          {
            "default": 16,
            "min": 4,
            "max": 32,
            "step": 2
          }
        ],
        "thickness": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "color_matching": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "upscale": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "downscale_mode",
        "target_size",
        "patch_size",
        "thickness",
        "color_matching",
        "upscale"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "PixelOEPixelize+",
    "display_name": "🔧 Pixelize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImagePosterize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImagePosterize+",
    "display_name": "🔧 Image Posterize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageColorMatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "color_space": [
          [
            "LAB",
            "YCbCr",
            "RGB",
            "LUV",
            "YUV",
            "XYZ"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ]
      },
      "optional": {
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "color_space",
        "factor",
        "device",
        "batch_size"
      ],
      "optional": [
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageColorMatch+",
    "display_name": "🔧 Image Color Match",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageColorMatchAdobe+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "color_space": [
          [
            "RGB",
            "LAB"
          ]
        ],
        "luminance_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 2,
            "step": 0.05
          }
        ],
        "color_intensity_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 2,
            "step": 0.05
          }
        ],
        "fade_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "neutralization_factor": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      },
      "optional": {
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "color_space",
        "luminance_factor",
        "color_intensity_factor",
        "fade_factor",
        "neutralization_factor",
        "device"
      ],
      "optional": [
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageColorMatchAdobe+",
    "display_name": "🔧 Image Color Match Adobe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageHistogramMatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "method": [
          [
            "pytorch",
            "skimage"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "method",
        "factor",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageHistogramMatch+",
    "display_name": "🔧 Image Histogram Match",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageSmartSharpen+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 25,
            "step": 1
          }
        ],
        "preserve_edges": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "sharpen": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 25,
            "step": 0.5
          }
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_radius",
        "preserve_edges",
        "sharpen",
        "ratio"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSmartSharpen+",
    "display_name": "🔧 Image Smart Sharpen",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "GetImageSize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "width",
      "height",
      "count"
    ],
    "name": "GetImageSize+",
    "display_name": "🔧 Get Image Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImageToDevice+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageToDevice+",
    "display_name": "🔧 Image To Device",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImagePreviewFromLatent+": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "latent",
        "vae",
        "tile_size"
      ],
      "optional": [
        "image"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "IMAGE",
      "MASK",
      "width",
      "height"
    ],
    "name": "ImagePreviewFromLatent+",
    "display_name": "🔧 Image Preview From Latent",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": true
  },
  "NoiseFromImage+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_strenght": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "noise_size": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "color_noise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "mask_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "mask_scale_diff": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "mask_contrast": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "blur": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "noise_mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_strenght",
        "noise_size",
        "color_noise",
        "mask_strength",
        "mask_scale_diff",
        "mask_contrast",
        "saturation",
        "contrast",
        "blur"
      ],
      "optional": [
        "noise_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "NoiseFromImage+",
    "display_name": "🔧 Noise From Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "MaskBlur+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "amount": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "amount",
        "device"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskBlur+",
    "display_name": "🔧 Mask Blur",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskBoundingBox+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ]
      },
      "optional": {
        "image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "blur"
      ],
      "optional": [
        "image_optional"
      ]
    },
    "output": [
      "MASK",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false],
    "output_name": [
      "MASK",
      "IMAGE",
      "x",
      "y",
      "width",
      "height"
    ],
    "name": "MaskBoundingBox+",
    "display_name": "🔧 Mask Bounding Box",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFix+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "erode_dilate": [
          "INT",
          {
            "default": 0,
            "min": -256,
            "max": 256,
            "step": 1
          }
        ],
        "fill_holes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 128,
            "step": 1
          }
        ],
        "remove_isolated_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "smooth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "erode_dilate",
        "fill_holes",
        "remove_isolated_pixels",
        "smooth",
        "blur"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFix+",
    "display_name": "🔧 Mask Fix",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFlip+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "axis": [
          [
            "x",
            "y",
            "xy"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "axis"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFlip+",
    "display_name": "🔧 Mask Flip",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromColor+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 127,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red",
        "green",
        "blue",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromColor+",
    "display_name": "🔧 Mask From Color",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromList+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      },
      "optional": {
        "values": [
          "*",
          {
            "default": 0,
            "min": 0,
            "max": 1
          }
        ],
        "str_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "0.0, 0.5, 1.0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height"
      ],
      "optional": [
        "values",
        "str_values"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromList+",
    "display_name": "🔧 Mask From List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromRGBCMYBW+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold_r": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_g": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_b": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold_r",
        "threshold_g",
        "threshold_b"
      ]
    },
    "output": [
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false],
    "output_name": [
      "red",
      "green",
      "blue",
      "cyan",
      "magenta",
      "yellow",
      "black",
      "white"
    ],
    "name": "MaskFromRGBCMYBW+",
    "display_name": "🔧 Mask From RGB/CMY/BW",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromSegmentation+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segments": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "remove_isolated_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "remove_small_masks": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "fill_holes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segments",
        "remove_isolated_pixels",
        "remove_small_masks",
        "fill_holes"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromSegmentation+",
    "display_name": "🔧 Mask From Segmentation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskPreview+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "MaskPreview+",
    "display_name": "🔧 Mask Preview",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": true
  },
  "MaskSmooth+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "amount": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 127,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "amount"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskSmooth+",
    "display_name": "🔧 Mask Smooth",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "TransitionMask+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 9999,
            "step": 1
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "end_frame": [
          "INT",
          {
            "default": 9999,
            "min": 0,
            "step": 1
          }
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "horizontal bar",
            "vertical bar",
            "center box",
            "horizontal door",
            "vertical door",
            "circle",
            "fade"
          ]
        ],
        "timing_function": [
          [
            "linear",
            "in",
            "out",
            "in-out"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frames",
        "start_frame",
        "end_frame",
        "transition_type",
        "timing_function"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "TransitionMask+",
    "display_name": "🔧 Transition Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskBatch+": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskBatch+",
    "display_name": "🔧 Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "MaskExpandBatch+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "method": [
          [
            "expand",
            "repeat all",
            "repeat first",
            "repeat last"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "size",
        "method"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskExpandBatch+",
    "display_name": "🔧 Mask Expand Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "MaskFromBatch+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "start",
        "length"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromBatch+",
    "display_name": "🔧 Mask From Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "KSamplerVariationsStochastic+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "variation_seed": [
          "INT:seed",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1,
            "step": 0.05,
            "round": 0.01
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.05,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "noise_seed",
        "steps",
        "cfg",
        "sampler",
        "scheduler",
        "positive",
        "negative",
        "variation_seed",
        "variation_strength",
        "cfg_scale"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerVariationsStochastic+",
    "display_name": "🔧 KSampler Stochastic Variations",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "KSamplerVariationsWithNoise+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "main_seed": [
          "INT:seed",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.17,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "variation_seed": [
          "INT:seed",
          {
            "default": 12345,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "main_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "variation_strength",
        "variation_seed",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerVariationsWithNoise+",
    "display_name": "🔧 KSampler Variations with Noise Injection",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "InjectLatentNoise+": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "noise_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "normalize": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "noise_seed",
        "noise_strength",
        "normalize"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "InjectLatentNoise+",
    "display_name": "🔧 Inject Latent Noise",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "FluxSamplerParams+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "seed": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "?"
          }
        ],
        "sampler": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "euler"
          }
        ],
        "scheduler": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "simple"
          }
        ],
        "steps": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "20"
          }
        ],
        "guidance": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "3.5"
          }
        ],
        "max_shift": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": ""
          }
        ],
        "base_shift": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": ""
          }
        ],
        "denoise": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.0"
          }
        ]
      },
      "optional": {
        "loras": [
          "LORA_PARAMS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning",
        "latent_image",
        "seed",
        "sampler",
        "scheduler",
        "steps",
        "guidance",
        "max_shift",
        "base_shift",
        "denoise"
      ],
      "optional": [
        "loras"
      ]
    },
    "output": [
      "LATENT",
      "SAMPLER_PARAMS"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "latent",
      "params"
    ],
    "name": "FluxSamplerParams+",
    "display_name": "🔧 Flux Sampler Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "GuidanceTimestepping+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "value": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 100,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "value",
        "start_at",
        "end_at"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "GuidanceTimestepping+",
    "display_name": "🔧 Guidance Timestep (experimental)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "PlotParameters+": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "params": [
          "SAMPLER_PARAMS"
        ],
        "order_by": [
          [
            "none",
            "time",
            "seed",
            "steps",
            "denoise",
            "sampler",
            "scheduler",
            "guidance",
            "max_shift",
            "base_shift",
            "lora_strength"
          ]
        ],
        "cols_value": [
          [
            "none",
            "time",
            "seed",
            "steps",
            "denoise",
            "sampler",
            "scheduler",
            "guidance",
            "max_shift",
            "base_shift",
            "lora_strength"
          ]
        ],
        "cols_num": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1024
          }
        ],
        "add_prompt": [
          [
            "false",
            "true",
            "excerpt"
          ]
        ],
        "add_params": [
          [
            "false",
            "true",
            "changes only"
          ],
          {
            "default": "true"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "params",
        "order_by",
        "cols_value",
        "cols_num",
        "add_prompt",
        "add_params"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "PlotParameters+",
    "display_name": "🔧 Plot Sampler Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "TextEncodeForSamplerParams+": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "Separate prompts with at least three dashes\n---\nLike so"
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TextEncodeForSamplerParams+",
    "display_name": "🔧Text Encode for Sampler Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "SamplerSelectHelper+": {
    "input": {
      "required": {
        "euler": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_ancestral_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "heun": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "heunpp2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_2_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "lms": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_fast": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_adaptive": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2s_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2s_ancestral_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_3m_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_3m_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddpm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "lcm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ipndm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ipndm_v": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "deis": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "res_multistep": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "res_multistep_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "res_multistep_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "res_multistep_ancestral_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "gradient_estimation": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "gradient_estimation_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "er_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seeds_2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seeds_3": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sa_solver": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sa_solver_pece": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddim": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "uni_pc": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "uni_pc_bh2": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "gradient_estimation_cfg_pp",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "sa_solver",
        "sa_solver_pece",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "SamplerSelectHelper+",
    "display_name": "🔧 Sampler Select Helper",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "SchedulerSelectHelper+": {
    "input": {
      "required": {
        "simple": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sgm_uniform": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "karras": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "exponential": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddim_uniform": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "beta": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "normal": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "linear_quadratic": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "kl_optimal": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "simple",
        "sgm_uniform",
        "karras",
        "exponential",
        "ddim_uniform",
        "beta",
        "normal",
        "linear_quadratic",
        "kl_optimal"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "SchedulerSelectHelper+",
    "display_name": "🔧 Scheduler Select Helper",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "LorasForFluxParams+": {
    "input": {
      "required": {
        "lora_1": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model_1": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_1",
        "strength_model_1"
      ]
    },
    "output": [
      "LORA_PARAMS"
    ],
    "output_is_list": [false],
    "output_name": [
      "LORA_PARAMS"
    ],
    "name": "LorasForFluxParams+",
    "display_name": "🔧 LoRA for Flux Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "ModelSamplingSD3Advanced+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "cut_off": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "shift_multiplier": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift",
        "cut_off",
        "shift_multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3Advanced+",
    "display_name": "🔧 Model Sampling SD3 Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "ApplyCLIPSeg+": {
    "input": {
      "required": {
        "clip_seg": [
          "CLIP_SEG"
        ],
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "smooth": [
          "INT",
          {
            "default": 9,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "dilate": [
          "INT",
          {
            "default": 0,
            "min": -32,
            "max": 32,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_seg",
        "image",
        "prompt",
        "threshold",
        "smooth",
        "dilate",
        "blur"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "ApplyCLIPSeg+",
    "display_name": "🔧 Apply CLIPSeg",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/segmentation",
    "output_node": false
  },
  "LoadCLIPSegModels+": {
    "input": {
      "required": {

      }
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CLIP_SEG"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP_SEG"
    ],
    "name": "LoadCLIPSegModels+",
    "display_name": "🔧 Load CLIPSeg Models",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/segmentation",
    "output_node": false
  },
  "DrawText+": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "Hello, World!"
          }
        ],
        "font": [
          [
            "ShareTechMono-Regular.ttf"
          ]
        ],
        "size": [
          "INT",
          {
            "default": 56,
            "min": 1,
            "max": 9999,
            "step": 1
          }
        ],
        "color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "background_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#00000000"
          }
        ],
        "shadow_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "shadow_blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "shadow_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "horizontal_align": [
          [
            "left",
            "center",
            "right"
          ]
        ],
        "vertical_align": [
          [
            "top",
            "center",
            "bottom"
          ]
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "direction": [
          [
            "ltr",
            "rtl"
          ]
        ]
      },
      "optional": {
        "img_composite": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "font",
        "size",
        "color",
        "background_color",
        "shadow_distance",
        "shadow_blur",
        "shadow_color",
        "horizontal_align",
        "vertical_align",
        "offset_x",
        "offset_y",
        "direction"
      ],
      "optional": [
        "img_composite"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "DrawText+",
    "display_name": "🔧 Draw Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/text",
    "output_node": false
  },
  "BatchCount+": {
    "input": {
      "required": {
        "batch": [
          "*",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "BatchCount+",
    "display_name": "🔧 Batch Count",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "ConsoleDebug+": {
    "input": {
      "required": {
        "value": [
          "*",
          {

          }
        ]
      },
      "optional": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": "Value:"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ],
      "optional": [
        "prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ConsoleDebug+",
    "display_name": "🔧 Console Debug",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "DebugTensorShape+": {
    "input": {
      "required": {
        "tensor": [
          "*",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tensor"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "DebugTensorShape+",
    "display_name": "🔧 Debug Tensor Shape",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "DisplayAny": {
    "input": {
      "required": {
        "input": [
          "*",
          {

          }
        ],
        "mode": [
          [
            "raw value",
            "tensor shape"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "mode"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "DisplayAny",
    "display_name": "🔧 Display Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "ModelCompile+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mode": [
          [
            "default",
            "reduce-overhead",
            "max-autotune",
            "max-autotune-no-cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "fullgraph",
        "dynamic",
        "mode"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelCompile+",
    "display_name": "🔧 Model Compile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "RemoveLatentMask+": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "RemoveLatentMask+",
    "display_name": "🔧 Remove Latent Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SDXLEmptyLatentSizePicker+": {
    "input": {
      "required": {
        "resolution": [
          [
            "704x1408 (0.5)",
            "704x1344 (0.52)",
            "768x1344 (0.57)",
            "768x1280 (0.6)",
            "832x1216 (0.68)",
            "832x1152 (0.72)",
            "896x1152 (0.78)",
            "896x1088 (0.82)",
            "960x1088 (0.88)",
            "960x1024 (0.94)",
            "1024x1024 (1.0)",
            "1024x960 (1.07)",
            "1088x960 (1.13)",
            "1088x896 (1.21)",
            "1152x896 (1.29)",
            "1152x832 (1.38)",
            "1216x832 (1.46)",
            "1280x768 (1.67)",
            "1344x768 (1.75)",
            "1344x704 (1.91)",
            "1408x704 (2.0)",
            "1472x704 (2.09)",
            "1536x640 (2.4)",
            "1600x640 (2.5)",
            "1664x576 (2.89)",
            "1728x576 (3.0)"
          ],
          {
            "default": "1024x1024 (1.0)"
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "width_override": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height_override": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "batch_size",
        "width_override",
        "height_override"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "LATENT",
      "width",
      "height"
    ],
    "name": "SDXLEmptyLatentSizePicker+",
    "display_name": "🔧 Empty Latent Size Picker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleComparison+": {
    "input": {
      "required": {
        "a": [
          "*",
          {
            "default": 0
          }
        ],
        "b": [
          "*",
          {
            "default": 0
          }
        ],
        "comparison": [
          [
            "==",
            "!=",
            "\u003C",
            "\u003C=",
            "\u003E",
            "\u003E="
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "comparison"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "SimpleComparison+",
    "display_name": "🔧 Simple Comparison",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleCondition+": {
    "input": {
      "required": {
        "evaluate": [
          "*",
          {
            "default": 0
          }
        ],
        "on_true": [
          "*",
          {
            "default": 0
          }
        ]
      },
      "optional": {
        "on_false": [
          "*",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "evaluate",
        "on_true"
      ],
      "optional": [
        "on_false"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "result"
    ],
    "name": "SimpleCondition+",
    "display_name": "🔧 Simple Condition",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMath+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0
          }
        ],
        "b": [
          "*",
          {
            "default": 0
          }
        ],
        "c": [
          "*",
          {
            "default": 0
          }
        ]
      },
      "required": {
        "value": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c"
      ],
      "required": [
        "value"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "SimpleMath+",
    "display_name": "🔧 Simple Math",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathDual+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0
          }
        ],
        "b": [
          "*",
          {
            "default": 0
          }
        ],
        "c": [
          "*",
          {
            "default": 0
          }
        ],
        "d": [
          "*",
          {
            "default": 0
          }
        ]
      },
      "required": {
        "value_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "value_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c",
        "d"
      ],
      "required": [
        "value_1",
        "value_2"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "INT",
      "FLOAT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "int_1",
      "float_1",
      "int_2",
      "float_2"
    ],
    "name": "SimpleMathDual+",
    "display_name": "🔧 Simple Math Dual",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathCondition+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0
          }
        ],
        "b": [
          "*",
          {
            "default": 0
          }
        ],
        "c": [
          "*",
          {
            "default": 0
          }
        ]
      },
      "required": {
        "evaluate": [
          "*",
          {
            "default": 0
          }
        ],
        "on_true": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "on_false": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c"
      ],
      "required": [
        "evaluate",
        "on_true",
        "on_false"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "SimpleMathCondition+",
    "display_name": "🔧 Simple Math Condition",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathBoolean+": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "SimpleMathBoolean+",
    "display_name": "🔧 Simple Math Boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathFloat+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "SimpleMathFloat+",
    "display_name": "🔧 Simple Math Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathInt+": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "SimpleMathInt+",
    "display_name": "🔧 Simple Math Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathPercent+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "SimpleMathPercent+",
    "display_name": "🔧 Simple Math Percent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathSlider+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "display": "slider",
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "min": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.001
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.001
          }
        ],
        "rounding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "min",
        "max",
        "rounding"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "FLOAT",
      "INT"
    ],
    "name": "SimpleMathSlider+",
    "display_name": "🔧 Simple Math Slider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathSliderLowRes+": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "display": "slider",
            "default": 5,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "min": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.001
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.001
          }
        ],
        "rounding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "min",
        "max",
        "rounding"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "FLOAT",
      "INT"
    ],
    "name": "SimpleMathSliderLowRes+",
    "display_name": "🔧 Simple Math Slider low-res",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "DitCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "model": [
          [
            "XL/2",
            "XL/4",
            "XL/8",
            "L/2",
            "L/4",
            "L/8",
            "B/2",
            "B/4",
            "B/8",
            "S/2",
            "S/4",
            "S/8"
          ]
        ],
        "image_size": [
          [256, 512]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "model",
        "image_size"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "DitCheckpointLoader",
    "display_name": "DitCheckpointLoader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/DiT",
    "output_node": false
  },
  "DiTCondLabelSelect": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "label_name": [
          [
            "tench, Tinca tinca",
            "goldfish, Carassius auratus",
            "great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",
            "tiger shark, Galeocerdo cuvieri",
            "hammerhead, hammerhead shark",
            "electric ray, crampfish, numbfish, torpedo",
            "stingray",
            "cock",
            "hen",
            "ostrich, Struthio camelus",
            "brambling, Fringilla montifringilla",
            "goldfinch, Carduelis carduelis",
            "house finch, linnet, Carpodacus mexicanus",
            "junco, snowbird",
            "indigo bunting, indigo finch, indigo bird, Passerina cyanea",
            "robin, American robin, Turdus migratorius",
            "bulbul",
            "jay",
            "magpie",
            "chickadee",
            "water ouzel, dipper",
            "kite",
            "bald eagle, American eagle, Haliaeetus leucocephalus",
            "vulture",
            "great grey owl, great gray owl, Strix nebulosa",
            "European fire salamander, Salamandra salamandra",
            "common newt, Triturus vulgaris",
            "eft",
            "spotted salamander, Ambystoma maculatum",
            "axolotl, mud puppy, Ambystoma mexicanum",
            "bullfrog, Rana catesbeiana",
            "tree frog, tree-frog",
            "tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",
            "loggerhead, loggerhead turtle, Caretta caretta",
            "leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",
            "mud turtle",
            "terrapin",
            "box turtle, box tortoise",
            "banded gecko",
            "common iguana, iguana, Iguana iguana",
            "American chameleon, anole, Anolis carolinensis",
            "whiptail, whiptail lizard",
            "agama",
            "frilled lizard, Chlamydosaurus kingi",
            "alligator lizard",
            "Gila monster, Heloderma suspectum",
            "green lizard, Lacerta viridis",
            "African chameleon, Chamaeleo chamaeleon",
            "Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",
            "African crocodile, Nile crocodile, Crocodylus niloticus",
            "American alligator, Alligator mississipiensis",
            "triceratops",
            "thunder snake, worm snake, Carphophis amoenus",
            "ringneck snake, ring-necked snake, ring snake",
            "hognose snake, puff adder, sand viper",
            "green snake, grass snake",
            "king snake, kingsnake",
            "garter snake, grass snake",
            "water snake",
            "vine snake",
            "night snake, Hypsiglena torquata",
            "boa constrictor, Constrictor constrictor",
            "rock python, rock snake, Python sebae",
            "Indian cobra, Naja naja",
            "green mamba",
            "sea snake",
            "horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",
            "diamondback, diamondback rattlesnake, Crotalus adamanteus",
            "sidewinder, horned rattlesnake, Crotalus cerastes",
            "trilobite",
            "harvestman, daddy longlegs, Phalangium opilio",
            "scorpion",
            "black and gold garden spider, Argiope aurantia",
            "barn spider, Araneus cavaticus",
            "garden spider, Aranea diademata",
            "black widow, Latrodectus mactans",
            "tarantula",
            "wolf spider, hunting spider",
            "tick",
            "centipede",
            "black grouse",
            "ptarmigan",
            "ruffed grouse, partridge, Bonasa umbellus",
            "prairie chicken, prairie grouse, prairie fowl",
            "peacock",
            "quail",
            "partridge",
            "African grey, African gray, Psittacus erithacus",
            "macaw",
            "sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",
            "lorikeet",
            "coucal",
            "bee eater",
            "hornbill",
            "hummingbird",
            "jacamar",
            "toucan",
            "drake",
            "red-breasted merganser, Mergus serrator",
            "goose",
            "black swan, Cygnus atratus",
            "tusker",
            "echidna, spiny anteater, anteater",
            "platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",
            "wallaby, brush kangaroo",
            "koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",
            "wombat",
            "jellyfish",
            "sea anemone, anemone",
            "brain coral",
            "flatworm, platyhelminth",
            "nematode, nematode worm, roundworm",
            "conch",
            "snail",
            "slug",
            "sea slug, nudibranch",
            "chiton, coat-of-mail shell, sea cradle, polyplacophore",
            "chambered nautilus, pearly nautilus, nautilus",
            "Dungeness crab, Cancer magister",
            "rock crab, Cancer irroratus",
            "fiddler crab",
            "king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",
            "American lobster, Northern lobster, Maine lobster, Homarus americanus",
            "spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",
            "crayfish, crawfish, crawdad, crawdaddy",
            "hermit crab",
            "isopod",
            "white stork, Ciconia ciconia",
            "black stork, Ciconia nigra",
            "spoonbill",
            "flamingo",
            "little blue heron, Egretta caerulea",
            "American egret, great white heron, Egretta albus",
            "bittern",
            "crane",
            "limpkin, Aramus pictus",
            "European gallinule, Porphyrio porphyrio",
            "American coot, marsh hen, mud hen, water hen, Fulica americana",
            "bustard",
            "ruddy turnstone, Arenaria interpres",
            "red-backed sandpiper, dunlin, Erolia alpina",
            "redshank, Tringa totanus",
            "dowitcher",
            "oystercatcher, oyster catcher",
            "pelican",
            "king penguin, Aptenodytes patagonica",
            "albatross, mollymawk",
            "grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",
            "killer whale, killer, orca, grampus, sea wolf, Orcinus orca",
            "dugong, Dugong dugon",
            "sea lion",
            "Chihuahua",
            "Japanese spaniel",
            "Maltese dog, Maltese terrier, Maltese",
            "Pekinese, Pekingese, Peke",
            "Shih-Tzu",
            "Blenheim spaniel",
            "papillon",
            "toy terrier",
            "Rhodesian ridgeback",
            "Afghan hound, Afghan",
            "basset, basset hound",
            "beagle",
            "bloodhound, sleuthhound",
            "bluetick",
            "black-and-tan coonhound",
            "Walker hound, Walker foxhound",
            "English foxhound",
            "redbone",
            "borzoi, Russian wolfhound",
            "Irish wolfhound",
            "Italian greyhound",
            "whippet",
            "Ibizan hound, Ibizan Podenco",
            "Norwegian elkhound, elkhound",
            "otterhound, otter hound",
            "Saluki, gazelle hound",
            "Scottish deerhound, deerhound",
            "Weimaraner",
            "Staffordshire bullterrier, Staffordshire bull terrier",
            "American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",
            "Bedlington terrier",
            "Border terrier",
            "Kerry blue terrier",
            "Irish terrier",
            "Norfolk terrier",
            "Norwich terrier",
            "Yorkshire terrier",
            "wire-haired fox terrier",
            "Lakeland terrier",
            "Sealyham terrier, Sealyham",
            "Airedale, Airedale terrier",
            "cairn, cairn terrier",
            "Australian terrier",
            "Dandie Dinmont, Dandie Dinmont terrier",
            "Boston bull, Boston terrier",
            "miniature schnauzer",
            "giant schnauzer",
            "standard schnauzer",
            "Scotch terrier, Scottish terrier, Scottie",
            "Tibetan terrier, chrysanthemum dog",
            "silky terrier, Sydney silky",
            "soft-coated wheaten terrier",
            "West Highland white terrier",
            "Lhasa, Lhasa apso",
            "flat-coated retriever",
            "curly-coated retriever",
            "golden retriever",
            "Labrador retriever",
            "Chesapeake Bay retriever",
            "German short-haired pointer",
            "vizsla, Hungarian pointer",
            "English setter",
            "Irish setter, red setter",
            "Gordon setter",
            "Brittany spaniel",
            "clumber, clumber spaniel",
            "English springer, English springer spaniel",
            "Welsh springer spaniel",
            "cocker spaniel, English cocker spaniel, cocker",
            "Sussex spaniel",
            "Irish water spaniel",
            "kuvasz",
            "schipperke",
            "groenendael",
            "malinois",
            "briard",
            "kelpie",
            "komondor",
            "Old English sheepdog, bobtail",
            "Shetland sheepdog, Shetland sheep dog, Shetland",
            "collie",
            "Border collie",
            "Bouvier des Flandres, Bouviers des Flandres",
            "Rottweiler",
            "German shepherd, German shepherd dog, German police dog, alsatian",
            "Doberman, Doberman pinscher",
            "miniature pinscher",
            "Greater Swiss Mountain dog",
            "Bernese mountain dog",
            "Appenzeller",
            "EntleBucher",
            "boxer",
            "bull mastiff",
            "Tibetan mastiff",
            "French bulldog",
            "Great Dane",
            "Saint Bernard, St Bernard",
            "Eskimo dog, husky",
            "malamute, malemute, Alaskan malamute",
            "Siberian husky",
            "dalmatian, coach dog, carriage dog",
            "affenpinscher, monkey pinscher, monkey dog",
            "basenji",
            "pug, pug-dog",
            "Leonberg",
            "Newfoundland, Newfoundland dog",
            "Great Pyrenees",
            "Samoyed, Samoyede",
            "Pomeranian",
            "chow, chow chow",
            "keeshond",
            "Brabancon griffon",
            "Pembroke, Pembroke Welsh corgi",
            "Cardigan, Cardigan Welsh corgi",
            "toy poodle",
            "miniature poodle",
            "standard poodle",
            "Mexican hairless",
            "timber wolf, grey wolf, gray wolf, Canis lupus",
            "white wolf, Arctic wolf, Canis lupus tundrarum",
            "red wolf, maned wolf, Canis rufus, Canis niger",
            "coyote, prairie wolf, brush wolf, Canis latrans",
            "dingo, warrigal, warragal, Canis dingo",
            "dhole, Cuon alpinus",
            "African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",
            "hyena, hyaena",
            "red fox, Vulpes vulpes",
            "kit fox, Vulpes macrotis",
            "Arctic fox, white fox, Alopex lagopus",
            "grey fox, gray fox, Urocyon cinereoargenteus",
            "tabby, tabby cat",
            "tiger cat",
            "Persian cat",
            "Siamese cat, Siamese",
            "Egyptian cat",
            "cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",
            "lynx, catamount",
            "leopard, Panthera pardus",
            "snow leopard, ounce, Panthera uncia",
            "jaguar, panther, Panthera onca, Felis onca",
            "lion, king of beasts, Panthera leo",
            "tiger, Panthera tigris",
            "cheetah, chetah, Acinonyx jubatus",
            "brown bear, bruin, Ursus arctos",
            "American black bear, black bear, Ursus americanus, Euarctos americanus",
            "ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",
            "sloth bear, Melursus ursinus, Ursus ursinus",
            "mongoose",
            "meerkat, mierkat",
            "tiger beetle",
            "ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",
            "ground beetle, carabid beetle",
            "long-horned beetle, longicorn, longicorn beetle",
            "leaf beetle, chrysomelid",
            "dung beetle",
            "rhinoceros beetle",
            "weevil",
            "fly",
            "bee",
            "ant, emmet, pismire",
            "grasshopper, hopper",
            "cricket",
            "walking stick, walkingstick, stick insect",
            "cockroach, roach",
            "mantis, mantid",
            "cicada, cicala",
            "leafhopper",
            "lacewing, lacewing fly",
            "dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",
            "damselfly",
            "admiral",
            "ringlet, ringlet butterfly",
            "monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",
            "cabbage butterfly",
            "sulphur butterfly, sulfur butterfly",
            "lycaenid, lycaenid butterfly",
            "starfish, sea star",
            "sea urchin",
            "sea cucumber, holothurian",
            "wood rabbit, cottontail, cottontail rabbit",
            "hare",
            "Angora, Angora rabbit",
            "hamster",
            "porcupine, hedgehog",
            "fox squirrel, eastern fox squirrel, Sciurus niger",
            "marmot",
            "beaver",
            "guinea pig, Cavia cobaya",
            "sorrel",
            "zebra",
            "hog, pig, grunter, squealer, Sus scrofa",
            "wild boar, boar, Sus scrofa",
            "warthog",
            "hippopotamus, hippo, river horse, Hippopotamus amphibius",
            "ox",
            "water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",
            "bison",
            "ram, tup",
            "bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",
            "ibex, Capra ibex",
            "hartebeest",
            "impala, Aepyceros melampus",
            "gazelle",
            "Arabian camel, dromedary, Camelus dromedarius",
            "llama",
            "weasel",
            "mink",
            "polecat, fitch, foulmart, foumart, Mustela putorius",
            "black-footed ferret, ferret, Mustela nigripes",
            "otter",
            "skunk, polecat, wood pussy",
            "badger",
            "armadillo",
            "three-toed sloth, ai, Bradypus tridactylus",
            "orangutan, orang, orangutang, Pongo pygmaeus",
            "gorilla, Gorilla gorilla",
            "chimpanzee, chimp, Pan troglodytes",
            "gibbon, Hylobates lar",
            "siamang, Hylobates syndactylus, Symphalangus syndactylus",
            "guenon, guenon monkey",
            "patas, hussar monkey, Erythrocebus patas",
            "baboon",
            "macaque",
            "langur",
            "colobus, colobus monkey",
            "proboscis monkey, Nasalis larvatus",
            "marmoset",
            "capuchin, ringtail, Cebus capucinus",
            "howler monkey, howler",
            "titi, titi monkey",
            "spider monkey, Ateles geoffroyi",
            "squirrel monkey, Saimiri sciureus",
            "Madagascar cat, ring-tailed lemur, Lemur catta",
            "indri, indris, Indri indri, Indri brevicaudatus",
            "Indian elephant, Elephas maximus",
            "African elephant, Loxodonta africana",
            "lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",
            "giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",
            "barracouta, snoek",
            "eel",
            "coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",
            "rock beauty, Holocanthus tricolor",
            "anemone fish",
            "sturgeon",
            "gar, garfish, garpike, billfish, Lepisosteus osseus",
            "lionfish",
            "puffer, pufferfish, blowfish, globefish",
            "abacus",
            "abaya",
            "academic gown, academic robe, judge's robe",
            "accordion, piano accordion, squeeze box",
            "acoustic guitar",
            "aircraft carrier, carrier, flattop, attack aircraft carrier",
            "airliner",
            "airship, dirigible",
            "altar",
            "ambulance",
            "amphibian, amphibious vehicle",
            "analog clock",
            "apiary, bee house",
            "apron",
            "ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",
            "assault rifle, assault gun",
            "backpack, back pack, knapsack, packsack, rucksack, haversack",
            "bakery, bakeshop, bakehouse",
            "balance beam, beam",
            "balloon",
            "ballpoint, ballpoint pen, ballpen, Biro",
            "Band Aid",
            "banjo",
            "bannister, banister, balustrade, balusters, handrail",
            "barbell",
            "barber chair",
            "barbershop",
            "barn",
            "barometer",
            "barrel, cask",
            "barrow, garden cart, lawn cart, wheelbarrow",
            "baseball",
            "basketball",
            "bassinet",
            "bassoon",
            "bathing cap, swimming cap",
            "bath towel",
            "bathtub, bathing tub, bath, tub",
            "beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",
            "beacon, lighthouse, beacon light, pharos",
            "beaker",
            "bearskin, busby, shako",
            "beer bottle",
            "beer glass",
            "bell cote, bell cot",
            "bib",
            "bicycle-built-for-two, tandem bicycle, tandem",
            "bikini, two-piece",
            "binder, ring-binder",
            "binoculars, field glasses, opera glasses",
            "birdhouse",
            "boathouse",
            "bobsled, bobsleigh, bob",
            "bolo tie, bolo, bola tie, bola",
            "bonnet, poke bonnet",
            "bookcase",
            "bookshop, bookstore, bookstall",
            "bottlecap",
            "bow",
            "bow tie, bow-tie, bowtie",
            "brass, memorial tablet, plaque",
            "brassiere, bra, bandeau",
            "breakwater, groin, groyne, mole, bulwark, seawall, jetty",
            "breastplate, aegis, egis",
            "broom",
            "bucket, pail",
            "buckle",
            "bulletproof vest",
            "bullet train, bullet",
            "butcher shop, meat market",
            "cab, hack, taxi, taxicab",
            "caldron, cauldron",
            "candle, taper, wax light",
            "cannon",
            "canoe",
            "can opener, tin opener",
            "cardigan",
            "car mirror",
            "carousel, carrousel, merry-go-round, roundabout, whirligig",
            "carpenter's kit, tool kit",
            "carton",
            "car wheel",
            "cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",
            "cassette",
            "cassette player",
            "castle",
            "catamaran",
            "CD player",
            "cello, violoncello",
            "cellular telephone, cellular phone, cellphone, cell, mobile phone",
            "chain",
            "chainlink fence",
            "chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",
            "chain saw, chainsaw",
            "chest",
            "chiffonier, commode",
            "chime, bell, gong",
            "china cabinet, china closet",
            "Christmas stocking",
            "church, church building",
            "cinema, movie theater, movie theatre, movie house, picture palace",
            "cleaver, meat cleaver, chopper",
            "cliff dwelling",
            "cloak",
            "clog, geta, patten, sabot",
            "cocktail shaker",
            "coffee mug",
            "coffeepot",
            "coil, spiral, volute, whorl, helix",
            "combination lock",
            "computer keyboard, keypad",
            "confectionery, confectionary, candy store",
            "container ship, containership, container vessel",
            "convertible",
            "corkscrew, bottle screw",
            "cornet, horn, trumpet, trump",
            "cowboy boot",
            "cowboy hat, ten-gallon hat",
            "cradle",
            "crane",
            "crash helmet",
            "crate",
            "crib, cot",
            "Crock Pot",
            "croquet ball",
            "crutch",
            "cuirass",
            "dam, dike, dyke",
            "desk",
            "desktop computer",
            "dial telephone, dial phone",
            "diaper, nappy, napkin",
            "digital clock",
            "digital watch",
            "dining table, board",
            "dishrag, dishcloth",
            "dishwasher, dish washer, dishwashing machine",
            "disk brake, disc brake",
            "dock, dockage, docking facility",
            "dogsled, dog sled, dog sleigh",
            "dome",
            "doormat, welcome mat",
            "drilling platform, offshore rig",
            "drum, membranophone, tympan",
            "drumstick",
            "dumbbell",
            "Dutch oven",
            "electric fan, blower",
            "electric guitar",
            "electric locomotive",
            "entertainment center",
            "envelope",
            "espresso maker",
            "face powder",
            "feather boa, boa",
            "file, file cabinet, filing cabinet",
            "fireboat",
            "fire engine, fire truck",
            "fire screen, fireguard",
            "flagpole, flagstaff",
            "flute, transverse flute",
            "folding chair",
            "football helmet",
            "forklift",
            "fountain",
            "fountain pen",
            "four-poster",
            "freight car",
            "French horn, horn",
            "frying pan, frypan, skillet",
            "fur coat",
            "garbage truck, dustcart",
            "gasmask, respirator, gas helmet",
            "gas pump, gasoline pump, petrol pump, island dispenser",
            "goblet",
            "go-kart",
            "golf ball",
            "golfcart, golf cart",
            "gondola",
            "gong, tam-tam",
            "gown",
            "grand piano, grand",
            "greenhouse, nursery, glasshouse",
            "grille, radiator grille",
            "grocery store, grocery, food market, market",
            "guillotine",
            "hair slide",
            "hair spray",
            "half track",
            "hammer",
            "hamper",
            "hand blower, blow dryer, blow drier, hair dryer, hair drier",
            "hand-held computer, hand-held microcomputer",
            "handkerchief, hankie, hanky, hankey",
            "hard disc, hard disk, fixed disk",
            "harmonica, mouth organ, harp, mouth harp",
            "harp",
            "harvester, reaper",
            "hatchet",
            "holster",
            "home theater, home theatre",
            "honeycomb",
            "hook, claw",
            "hoopskirt, crinoline",
            "horizontal bar, high bar",
            "horse cart, horse-cart",
            "hourglass",
            "iPod",
            "iron, smoothing iron",
            "jack-o'-lantern",
            "jean, blue jean, denim",
            "jeep, landrover",
            "jersey, T-shirt, tee shirt",
            "jigsaw puzzle",
            "jinrikisha, ricksha, rickshaw",
            "joystick",
            "kimono",
            "knee pad",
            "knot",
            "lab coat, laboratory coat",
            "ladle",
            "lampshade, lamp shade",
            "laptop, laptop computer",
            "lawn mower, mower",
            "lens cap, lens cover",
            "letter opener, paper knife, paperknife",
            "library",
            "lifeboat",
            "lighter, light, igniter, ignitor",
            "limousine, limo",
            "liner, ocean liner",
            "lipstick, lip rouge",
            "Loafer",
            "lotion",
            "loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",
            "loupe, jeweler's loupe",
            "lumbermill, sawmill",
            "magnetic compass",
            "mailbag, postbag",
            "mailbox, letter box",
            "maillot",
            "maillot, tank suit",
            "manhole cover",
            "maraca",
            "marimba, xylophone",
            "mask",
            "matchstick",
            "maypole",
            "maze, labyrinth",
            "measuring cup",
            "medicine chest, medicine cabinet",
            "megalith, megalithic structure",
            "microphone, mike",
            "microwave, microwave oven",
            "military uniform",
            "milk can",
            "minibus",
            "miniskirt, mini",
            "minivan",
            "missile",
            "mitten",
            "mixing bowl",
            "mobile home, manufactured home",
            "Model T",
            "modem",
            "monastery",
            "monitor",
            "moped",
            "mortar",
            "mortarboard",
            "mosque",
            "mosquito net",
            "motor scooter, scooter",
            "mountain bike, all-terrain bike, off-roader",
            "mountain tent",
            "mouse, computer mouse",
            "mousetrap",
            "moving van",
            "muzzle",
            "nail",
            "neck brace",
            "necklace",
            "nipple",
            "notebook, notebook computer",
            "obelisk",
            "oboe, hautboy, hautbois",
            "ocarina, sweet potato",
            "odometer, hodometer, mileometer, milometer",
            "oil filter",
            "organ, pipe organ",
            "oscilloscope, scope, cathode-ray oscilloscope, CRO",
            "overskirt",
            "oxcart",
            "oxygen mask",
            "packet",
            "paddle, boat paddle",
            "paddlewheel, paddle wheel",
            "padlock",
            "paintbrush",
            "pajama, pyjama, pj's, jammies",
            "palace",
            "panpipe, pandean pipe, syrinx",
            "paper towel",
            "parachute, chute",
            "parallel bars, bars",
            "park bench",
            "parking meter",
            "passenger car, coach, carriage",
            "patio, terrace",
            "pay-phone, pay-station",
            "pedestal, plinth, footstall",
            "pencil box, pencil case",
            "pencil sharpener",
            "perfume, essence",
            "Petri dish",
            "photocopier",
            "pick, plectrum, plectron",
            "pickelhaube",
            "picket fence, paling",
            "pickup, pickup truck",
            "pier",
            "piggy bank, penny bank",
            "pill bottle",
            "pillow",
            "ping-pong ball",
            "pinwheel",
            "pirate, pirate ship",
            "pitcher, ewer",
            "plane, carpenter's plane, woodworking plane",
            "planetarium",
            "plastic bag",
            "plate rack",
            "plow, plough",
            "plunger, plumber's helper",
            "Polaroid camera, Polaroid Land camera",
            "pole",
            "police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",
            "poncho",
            "pool table, billiard table, snooker table",
            "pop bottle, soda bottle",
            "pot, flowerpot",
            "potter's wheel",
            "power drill",
            "prayer rug, prayer mat",
            "printer",
            "prison, prison house",
            "projectile, missile",
            "projector",
            "puck, hockey puck",
            "punching bag, punch bag, punching ball, punchball",
            "purse",
            "quill, quill pen",
            "quilt, comforter, comfort, puff",
            "racer, race car, racing car",
            "racket, racquet",
            "radiator",
            "radio, wireless",
            "radio telescope, radio reflector",
            "rain barrel",
            "recreational vehicle, RV, R.V.",
            "reel",
            "reflex camera",
            "refrigerator, icebox",
            "remote control, remote",
            "restaurant, eating house, eating place, eatery",
            "revolver, six-gun, six-shooter",
            "rifle",
            "rocking chair, rocker",
            "rotisserie",
            "rubber eraser, rubber, pencil eraser",
            "rugby ball",
            "rule, ruler",
            "running shoe",
            "safe",
            "safety pin",
            "saltshaker, salt shaker",
            "sandal",
            "sarong",
            "sax, saxophone",
            "scabbard",
            "scale, weighing machine",
            "school bus",
            "schooner",
            "scoreboard",
            "screen, CRT screen",
            "screw",
            "screwdriver",
            "seat belt, seatbelt",
            "sewing machine",
            "shield, buckler",
            "shoe shop, shoe-shop, shoe store",
            "shoji",
            "shopping basket",
            "shopping cart",
            "shovel",
            "shower cap",
            "shower curtain",
            "ski",
            "ski mask",
            "sleeping bag",
            "slide rule, slipstick",
            "sliding door",
            "slot, one-armed bandit",
            "snorkel",
            "snowmobile",
            "snowplow, snowplough",
            "soap dispenser",
            "soccer ball",
            "sock",
            "solar dish, solar collector, solar furnace",
            "sombrero",
            "soup bowl",
            "space bar",
            "space heater",
            "space shuttle",
            "spatula",
            "speedboat",
            "spider web, spider's web",
            "spindle",
            "sports car, sport car",
            "spotlight, spot",
            "stage",
            "steam locomotive",
            "steel arch bridge",
            "steel drum",
            "stethoscope",
            "stole",
            "stone wall",
            "stopwatch, stop watch",
            "stove",
            "strainer",
            "streetcar, tram, tramcar, trolley, trolley car",
            "stretcher",
            "studio couch, day bed",
            "stupa, tope",
            "submarine, pigboat, sub, U-boat",
            "suit, suit of clothes",
            "sundial",
            "sunglass",
            "sunglasses, dark glasses, shades",
            "sunscreen, sunblock, sun blocker",
            "suspension bridge",
            "swab, swob, mop",
            "sweatshirt",
            "swimming trunks, bathing trunks",
            "swing",
            "switch, electric switch, electrical switch",
            "syringe",
            "table lamp",
            "tank, army tank, armored combat vehicle, armoured combat vehicle",
            "tape player",
            "teapot",
            "teddy, teddy bear",
            "television, television system",
            "tennis ball",
            "thatch, thatched roof",
            "theater curtain, theatre curtain",
            "thimble",
            "thresher, thrasher, threshing machine",
            "throne",
            "tile roof",
            "toaster",
            "tobacco shop, tobacconist shop, tobacconist",
            "toilet seat",
            "torch",
            "totem pole",
            "tow truck, tow car, wrecker",
            "toyshop",
            "tractor",
            "trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",
            "tray",
            "trench coat",
            "tricycle, trike, velocipede",
            "trimaran",
            "tripod",
            "triumphal arch",
            "trolleybus, trolley coach, trackless trolley",
            "trombone",
            "tub, vat",
            "turnstile",
            "typewriter keyboard",
            "umbrella",
            "unicycle, monocycle",
            "upright, upright piano",
            "vacuum, vacuum cleaner",
            "vase",
            "vault",
            "velvet",
            "vending machine",
            "vestment",
            "viaduct",
            "violin, fiddle",
            "volleyball",
            "waffle iron",
            "wall clock",
            "wallet, billfold, notecase, pocketbook",
            "wardrobe, closet, press",
            "warplane, military plane",
            "washbasin, handbasin, washbowl, lavabo, wash-hand basin",
            "washer, automatic washer, washing machine",
            "water bottle",
            "water jug",
            "water tower",
            "whiskey jug",
            "whistle",
            "wig",
            "window screen",
            "window shade",
            "Windsor tie",
            "wine bottle",
            "wing",
            "wok",
            "wooden spoon",
            "wool, woolen, woollen",
            "worm fence, snake fence, snake-rail fence, Virginia fence",
            "wreck",
            "yawl",
            "yurt",
            "web site, website, internet site, site",
            "comic book",
            "crossword puzzle, crossword",
            "street sign",
            "traffic light, traffic signal, stoplight",
            "book jacket, dust cover, dust jacket, dust wrapper",
            "menu",
            "plate",
            "guacamole",
            "consomme",
            "hot pot, hotpot",
            "trifle",
            "ice cream, icecream",
            "ice lolly, lolly, lollipop, popsicle",
            "French loaf",
            "bagel, beigel",
            "pretzel",
            "cheeseburger",
            "hotdog, hot dog, red hot",
            "mashed potato",
            "head cabbage",
            "broccoli",
            "cauliflower",
            "zucchini, courgette",
            "spaghetti squash",
            "acorn squash",
            "butternut squash",
            "cucumber, cuke",
            "artichoke, globe artichoke",
            "bell pepper",
            "cardoon",
            "mushroom",
            "Granny Smith",
            "strawberry",
            "orange",
            "lemon",
            "fig",
            "pineapple, ananas",
            "banana",
            "jackfruit, jak, jack",
            "custard apple",
            "pomegranate",
            "hay",
            "carbonara",
            "chocolate sauce, chocolate syrup",
            "dough",
            "meat loaf, meatloaf",
            "pizza, pizza pie",
            "potpie",
            "burrito",
            "red wine",
            "espresso",
            "cup",
            "eggnog",
            "alp",
            "bubble",
            "cliff, drop, drop-off",
            "coral reef",
            "geyser",
            "lakeside, lakeshore",
            "promontory, headland, head, foreland",
            "sandbar, sand bar",
            "seashore, coast, seacoast, sea-coast",
            "valley, vale",
            "volcano",
            "ballplayer, baseball player",
            "groom, bridegroom",
            "scuba diver",
            "rapeseed",
            "daisy",
            "yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",
            "corn",
            "acorn",
            "hip, rose hip, rosehip",
            "buckeye, horse chestnut, conker",
            "coral fungus",
            "agaric",
            "gyromitra",
            "stinkhorn, carrion fungus",
            "earthstar",
            "hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",
            "bolete",
            "ear, spike, capitulum",
            "toilet tissue, toilet paper, bathroom tissue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "label_name"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "class"
    ],
    "name": "DiTCondLabelSelect",
    "display_name": "DiTCondLabelSelect",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/DiT",
    "output_node": false
  },
  "DiTCondLabelEmpty": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "empty"
    ],
    "name": "DiTCondLabelEmpty",
    "display_name": "DiTCondLabelEmpty",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/DiT",
    "output_node": false
  },
  "PixArtCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "model": [
          [
            "PixArtMS_XL_2",
            "PixArtMS_Sigma_XL_2",
            "PixArtMS_Sigma_XL_2_900M",
            "PixArtMS_Sigma_XL_2_2K",
            "PixArt_XL_2",
            "ControlPixArtHalf",
            "ControlPixArtMSHalf"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "PixArtCheckpointLoader",
    "display_name": "PixArt Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/PixArt",
    "output_node": false
  },
  "PixArtCheckpointLoaderSimple": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "PixArtCheckpointLoaderSimple",
    "display_name": "PixArt Checkpoint Loader (auto)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/PixArt",
    "output_node": false
  },
  "PixArtResolutionSelect": {
    "input": {
      "required": {
        "model": [
          [
            "PixArtMS_XL_2",
            "PixArt_XL_2",
            "PixArtMS_Sigma_XL_2_2K",
            "PixArtMS_Sigma_XL_2",
            "PixArtMS_Sigma_XL_2_512"
          ]
        ],
        "ratio": [
          [
            "0.25",
            "0.26",
            "0.27",
            "0.28",
            "0.32",
            "0.33",
            "0.35",
            "0.40",
            "0.42",
            "0.48",
            "0.50",
            "0.52",
            "0.57",
            "0.60",
            "0.68",
            "0.72",
            "0.78",
            "0.82",
            "0.88",
            "0.94",
            "1.00",
            "1.07",
            "1.13",
            "1.21",
            "1.29",
            "1.38",
            "1.46",
            "1.67",
            "1.75",
            "2.00",
            "2.09",
            "2.40",
            "2.50",
            "2.89",
            "3.00",
            "3.11",
            "3.62",
            "3.75",
            "3.88",
            "4.00"
          ],
          {
            "default": "1.00"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ratio"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "PixArtResolutionSelect",
    "display_name": "PixArt Resolution Select",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/PixArt",
    "output_node": false
  },
  "PixArtLoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          [
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1,
            "min": -20,
            "max": 20,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "PixArtLoraLoader",
    "display_name": "PixArt Load LoRA",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/PixArt",
    "output_node": false
  },
  "PixArtT5TextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "T5": [
          "T5"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "T5"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "PixArtT5TextEncode",
    "display_name": "PixArt T5 Text Encode [Reference]",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/PixArt",
    "output_node": false
  },
  "PixArtResolutionCond": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 8192
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "width",
        "height"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "cond"
    ],
    "name": "PixArtResolutionCond",
    "display_name": "PixArt Resolution Conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/PixArt",
    "output_node": false
  },
  "PixArtControlNetCond": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "latent"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "cond"
    ],
    "name": "PixArtControlNetCond",
    "display_name": "PixArt ControlNet Conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/PixArt",
    "output_node": false
  },
  "PixArtT5FromSD3CLIP": {
    "input": {
      "required": {
        "sd3_clip": [
          "CLIP"
        ],
        "padding": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 300
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sd3_clip",
        "padding"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "t5"
    ],
    "name": "PixArtT5FromSD3CLIP",
    "display_name": "PixArt T5 from SD3 CLIP",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/PixArt",
    "output_node": false
  },
  "T5v11Loader": {
    "input": {
      "required": {
        "t5v11_name": [
          []
        ],
        "t5v11_ver": [
          [
            "xxl"
          ]
        ],
        "path_type": [
          [
            "folder",
            "file"
          ]
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ],
          {
            "default": "cpu"
          }
        ],
        "dtype": [
          [
            "default",
            "auto (comfy)",
            "FP32",
            "FP16",
            "bnb8bit",
            "bnb4bit",
            "FP8 E4M3",
            "FP8 E5M2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "t5v11_name",
        "t5v11_ver",
        "path_type",
        "device",
        "dtype"
      ]
    },
    "output": [
      "T5"
    ],
    "output_is_list": [false],
    "output_name": [
      "T5"
    ],
    "name": "T5v11Loader",
    "display_name": "T5v1.1 Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/T5",
    "output_node": false
  },
  "T5TextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "T5": [
          "T5"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "T5"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "T5TextEncode",
    "display_name": "T5 Text Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/T5",
    "output_node": false
  },
  "HYDiTCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "model": [
          [
            "G/2",
            "G/2-1.2",
            "XL/2",
            "L/2",
            "B/2"
          ],
          {
            "default": "G/2"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "HYDiTCheckpointLoader",
    "display_name": "Hunyuan DiT Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/HunyuanDiT",
    "output_node": false
  },
  "HYDiTTextEncoderLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ],
        "mt5_name": [
          []
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ],
          {
            "default": "cpu"
          }
        ],
        "dtype": [
          [
            "default",
            "auto (comfy)",
            "FP32",
            "FP16",
            "BF16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name",
        "mt5_name",
        "device",
        "dtype"
      ]
    },
    "output": [
      "CLIP",
      "T5"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CLIP",
      "T5"
    ],
    "name": "HYDiTTextEncoderLoader",
    "display_name": "Hunyuan DiT Text Encoder Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/HunyuanDiT",
    "output_node": false
  },
  "HYDiTTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "text_t5": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "CLIP": [
          "CLIP"
        ],
        "T5": [
          "T5"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "text_t5",
        "CLIP",
        "T5"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "HYDiTTextEncode",
    "display_name": "Hunyuan DiT Text Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/HunyuanDiT",
    "output_node": false
  },
  "HYDiTTextEncodeSimple": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "CLIP": [
          "CLIP"
        ],
        "T5": [
          "T5"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "CLIP",
        "T5"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "HYDiTTextEncodeSimple",
    "display_name": "Hunyuan DiT Text Encode (simple)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/HunyuanDiT",
    "output_node": false
  },
  "HYDiTSrcSizeCond": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 8192,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 8192,
            "step": 16
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "width",
        "height"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "cond"
    ],
    "name": "HYDiTSrcSizeCond",
    "display_name": "Hunyuan DiT Size Conditioning (advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/HunyuanDiT",
    "output_node": false
  },
  "ExtraVAELoader": {
    "input": {
      "required": {
        "vae_name": [
          [
            "FLUX.1\\AE.safetensors",
            "FLUX.1\\AE_BF16.safetensors",
            "Wan2.1\\Wan2.1_VAE.safetensors"
          ]
        ],
        "vae_type": [
          [
            "kl-f4",
            "kl-f8",
            "kl-f8-d16",
            "kl-f16",
            "kl-f32",
            "vq-f4",
            "vq-f8",
            "vq-f16",
            "Consistency-Decoder",
            "SDV-VideoDecoder",
            "MoVQ3",
            "dcae-f32c32-sana-1.0"
          ],
          {
            "default": "kl-f8"
          }
        ],
        "dtype": [
          [
            "auto",
            "FP32",
            "FP16",
            "BF16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name",
        "vae_type",
        "dtype"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "VAE"
    ],
    "name": "ExtraVAELoader",
    "display_name": "ExtraVAELoader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels",
    "output_node": false
  },
  "EmptyDCAELatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The width of the latent images in pixels."
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The height of the latent images in pixels."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyDCAELatentImage",
    "display_name": "Empty DCAE Latent Image",
    "description": "Create a new batch of empty latent images to be denoised via sampling.",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The empty latent image batch."
    ]
  },
  "MiaoBiCLIPLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "CLIP_G.safetensors",
            "CLIP_G_HiDream.safetensors",
            "CLIP_L.safetensors",
            "CLIP_L_HiDream.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "MiaoBiCLIPLoader",
    "display_name": "MiaoBi CLIP Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/MiaoBi",
    "output_node": false
  },
  "MiaoBiDiffusersLoader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "MiaoBiDiffusersLoader",
    "display_name": "MiaoBi Checkpoint Loader (Diffusers)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/MiaoBi",
    "output_node": false
  },
  "OverrideCLIPDevice": {
    "input": {
      "required": {
        "device": [
          [
            "cpu",
            "cuda:0"
          ],
          {
            "default": "cpu"
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "device",
        "clip"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "OverrideCLIPDevice",
    "display_name": "Force/Set CLIP Device",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/other",
    "output_node": false
  },
  "OverrideVAEDevice": {
    "input": {
      "required": {
        "device": [
          [
            "cpu",
            "cuda:0"
          ],
          {
            "default": "cpu"
          }
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "device",
        "vae"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "VAE"
    ],
    "name": "OverrideVAEDevice",
    "display_name": "Force/Set VAE Device",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/other",
    "output_node": false
  },
  "SanaCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ],
        "model": [
          [
            "SanaMS_600M_P1_D28",
            "SanaMS_1600M_P1_D20"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "model"
    ],
    "name": "SanaCheckpointLoader",
    "display_name": "Sana Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/Sana",
    "output_node": false
  },
  "SanaResolutionSelect": {
    "input": {
      "required": {
        "model": [
          [
            "1024px",
            "512px",
            "2K",
            "SanaMS_600M_P1_D28",
            "SanaMS_1600M_P1_D20"
          ]
        ],
        "ratio": [
          [
            "0.25",
            "0.26",
            "0.27",
            "0.28",
            "0.32",
            "0.33",
            "0.35",
            "0.40",
            "0.42",
            "0.48",
            "0.50",
            "0.52",
            "0.57",
            "0.60",
            "0.68",
            "0.72",
            "0.78",
            "0.82",
            "0.88",
            "0.94",
            "1.00",
            "1.07",
            "1.13",
            "1.21",
            "1.29",
            "1.38",
            "1.46",
            "1.67",
            "1.75",
            "2.00",
            "2.09",
            "2.40",
            "2.50",
            "2.89",
            "3.00",
            "3.11",
            "3.62",
            "3.75",
            "3.88",
            "4.00"
          ],
          {
            "default": "1.00"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ratio"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "width",
      "height"
    ],
    "name": "SanaResolutionSelect",
    "display_name": "Sana Resolution Select",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/Sana",
    "output_node": false
  },
  "SanaTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "GEMMA": [
          "GEMMA"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "GEMMA"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "SanaTextEncode",
    "display_name": "Sana Text Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/Sana",
    "output_node": false
  },
  "SanaResolutionCond": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 8192
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "width",
        "height"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "cond"
    ],
    "name": "SanaResolutionCond",
    "display_name": "Sana Resolution Conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/Sana",
    "output_node": false
  },
  "EmptySanaLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The width of the latent images in pixels."
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The height of the latent images in pixels."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptySanaLatentImage",
    "display_name": "Empty Sana Latent Image",
    "description": "Create a new batch of empty latent images to be denoised via sampling.",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/Sana",
    "output_node": false,
    "output_tooltips": [
      "The empty latent image batch."
    ]
  },
  "GemmaLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "Efficient-Large-Model/gemma-2-2b-it",
            "google/gemma-2-2b-it",
            "unsloth/gemma-2-2b-it-bnb-4bit"
          ]
        ],
        "device": [
          [
            "auto",
            "cpu",
            "cuda"
          ],
          {
            "default": "cpu"
          }
        ],
        "dtype": [
          [
            "default",
            "auto (comfy)",
            "BF16",
            "FP32",
            "FP16",
            "FP8 E4M3",
            "FP8 E5M2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "device",
        "dtype"
      ]
    },
    "output": [
      "GEMMA"
    ],
    "output_is_list": [false],
    "output_name": [
      "GEMMA"
    ],
    "name": "GemmaLoader",
    "display_name": "Gemma Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/Gemma",
    "output_node": false
  },
  "GemmaTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "GEMMA": [
          "GEMMA"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "GEMMA"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "GemmaTextEncode",
    "display_name": "Gemma Text Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ExtraModels",
    "category": "ExtraModels/Gemma",
    "output_node": false
  },
  "Context Big (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "steps": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "step_refiner": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ],
          {
            "forceInput": true
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "forceInput": true
          }
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "forceInput": true
          }
        ],
        "clip_width": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "clip_height": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "text_pos_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_pos_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ]
      },
      "hidden": {

      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed",
        "steps",
        "step_refiner",
        "cfg",
        "ckpt_name",
        "sampler",
        "scheduler",
        "clip_width",
        "clip_height",
        "text_pos_g",
        "text_pos_l",
        "text_neg_g",
        "text_neg_l",
        "mask",
        "control_net"
      ],
      "hidden": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "gradient_estimation_cfg_pp",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "sa_solver",
        "sa_solver_pece",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "simple",
        "sgm_uniform",
        "karras",
        "exponential",
        "ddim_uniform",
        "beta",
        "normal",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Big (rgthree)",
    "display_name": "Context Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "version": "FLOAT"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed"
      ],
      "hidden": [
        "version"
      ]
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context (rgthree)",
    "display_name": "Context (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {

      }
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Switch (rgthree)",
    "display_name": "Context Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch Big (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {

      }
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "gradient_estimation_cfg_pp",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "sa_solver",
        "sa_solver_pece",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "simple",
        "sgm_uniform",
        "karras",
        "exponential",
        "ddim_uniform",
        "beta",
        "normal",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Switch Big (rgthree)",
    "display_name": "Context Switch Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {

      }
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Merge (rgthree)",
    "display_name": "Context Merge (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge Big (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {

      }
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "gradient_estimation_cfg_pp",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "sa_solver",
        "sa_solver_pece",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "simple",
        "sgm_uniform",
        "karras",
        "exponential",
        "ddim_uniform",
        "beta",
        "normal",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Merge Big (rgthree)",
    "display_name": "Context Merge Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Display Int (rgthree)": {
    "input": {
      "required": {
        "input": [
          "INT",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Int (rgthree)",
    "display_name": "Display Int (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Display Any (rgthree)": {
    "input": {
      "required": {
        "source": [
          "*",
          {

          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "source"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Any (rgthree)",
    "display_name": "Display Any (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Lora Loader Stack (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_01": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_01": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_02": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_02": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_03": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_03": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "lora_04": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_04": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_01",
        "strength_01",
        "lora_02",
        "strength_02",
        "lora_03",
        "strength_03",
        "lora_04",
        "strength_04"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Loader Stack (rgthree)",
    "display_name": "Lora Loader Stack (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Seed (rgthree)": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": -1125899906842624,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "SEED"
    ],
    "name": "Seed (rgthree)",
    "display_name": "Seed (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Inset Crop (rgthree)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "measurement": [
          [
            "Pixels",
            "Percentage"
          ]
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "measurement",
        "left",
        "right",
        "top",
        "bottom"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Inset Crop (rgthree)",
    "display_name": "Image Inset Crop (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS",
            "FLUX.1\\80s_comedy_ita",
            "FLUX.1\\Amateurphoto_v6",
            "FLUX.1\\Classic_Painting_v1",
            "FLUX.1\\DarkFantasy_Movie_v1",
            "FLUX.1\\Darkfantasy_Illustration_v2",
            "FLUX.1\\Ghibli",
            "FLUX.1\\Graffiti_Logo_Style",
            "FLUX.1\\Provvisoria\\assexpose",
            "FLUX.1\\Provvisoria\\cellulite_flux",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX",
            "FLUX.1\\Renaissance_Art_Style",
            "FLUX.1\\Tarot_v1.0",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp",
            "Wan2.1\\Lightning\\DetailEnhancerV1",
            "Wan2.1\\Lightning\\High_Speed",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219",
            "Wan2.1\\Provvisoria\\wan_cumshot"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "insert_lora",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT"
    ],
    "name": "Power Prompt (rgthree)",
    "display_name": "Power Prompt (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt - Simple (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_clip",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "CONDITIONING",
      "TEXT"
    ],
    "name": "Power Prompt - Simple (rgthree)",
    "display_name": "Power Prompt - Simple (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "KSampler Config (rgthree)": {
    "input": {
      "required": {
        "steps_total": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "refiner_step": [
          "INT",
          {
            "default": 24,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100,
            "step": 0.5
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "steps_total",
        "refiner_step",
        "cfg",
        "sampler_name",
        "scheduler"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "gradient_estimation_cfg_pp",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "sa_solver",
        "sa_solver_pece",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "simple",
        "sgm_uniform",
        "karras",
        "exponential",
        "ddim_uniform",
        "beta",
        "normal",
        "linear_quadratic",
        "kl_optimal"
      ]
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "STEPS",
      "REFINER_STEP",
      "CFG",
      "SAMPLER",
      "SCHEDULER"
    ],
    "name": "KSampler Config (rgthree)",
    "display_name": "KSampler Config (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Empty Latent Image (rgthree)": {
    "input": {
      "required": {
        "dimensions": [
          [
            "1536 x 640   (landscape)",
            "1344 x 768   (landscape)",
            "1216 x 832   (landscape)",
            "1152 x 896   (landscape)",
            "1024 x 1024  (square)",
            " 896 x 1152  (portrait)",
            " 832 x 1216  (portrait)",
            " 768 x 1344  (portrait)",
            " 640 x 1536  (portrait)"
          ],
          {
            "default": "1024 x 1024  (square)"
          }
        ],
        "clip_scale": [
          "FLOAT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 0.5
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "clip_scale",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "LATENT",
      "CLIP_WIDTH",
      "CLIP_HEIGHT"
    ],
    "name": "SDXL Empty Latent Image (rgthree)",
    "display_name": "SDXL Empty Latent Image (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Positive (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS",
            "FLUX.1\\80s_comedy_ita",
            "FLUX.1\\Amateurphoto_v6",
            "FLUX.1\\Classic_Painting_v1",
            "FLUX.1\\DarkFantasy_Movie_v1",
            "FLUX.1\\Darkfantasy_Illustration_v2",
            "FLUX.1\\Ghibli",
            "FLUX.1\\Graffiti_Logo_Style",
            "FLUX.1\\Provvisoria\\assexpose",
            "FLUX.1\\Provvisoria\\cellulite_flux",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX",
            "FLUX.1\\Renaissance_Art_Style",
            "FLUX.1\\Tarot_v1.0",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp",
            "Wan2.1\\Lightning\\DetailEnhancerV1",
            "Wan2.1\\Lightning\\High_Speed",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219",
            "Wan2.1\\Provvisoria\\wan_cumshot"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_lora",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Positive (rgthree)",
    "display_name": "SDXL Power Prompt - Positive (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Simple / Negative (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "CONDITIONING",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "display_name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Any Switch (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {

      }
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "Any Switch (rgthree)",
    "display_name": "Any Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Comparer (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_a",
        "image_b"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Comparer (rgthree)",
    "display_name": "Image Comparer (rgthree)",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Power Lora Loader (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ]
      },
      "hidden": {

      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "model",
        "clip"
      ],
      "hidden": []
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Power Lora Loader (rgthree)",
    "display_name": "Power Lora Loader (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Primitive (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {

      }
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "Power Primitive (rgthree)",
    "display_name": "Power Primitive (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image or Latent Size (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {

      }
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "WIDTH",
      "HEIGHT"
    ],
    "name": "Image or Latent Size (rgthree)",
    "display_name": "Image or Latent Size (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Resize (rgthree)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "measurement": [
          [
            "pixels",
            "percentage"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1,
            "tooltip": "The width of the desired resize. A pixel value if measurement is 'pixels' or a 100% scale percentage value if measurement is 'percentage'. Passing '0' will calculate the dimension based on the height."
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "fit": [
          [
            "crop",
            "pad",
            "contain"
          ],
          {
            "tooltip": "'crop' resizes so the image covers the desired width and height, and center-crops the excess, returning exactly the desired width and height.\n'pad' resizes so the image fits inside the desired width and height, and fills the empty space returning exactly the desired width and height.\n'contain' resizes so the image fits inside the desired width and height, and returns the image with it's new size, with one side liekly smaller than the desired.\n\nNote, if either width or height is '0', the effective fit is 'contain'."
          }
        ],
        "method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "measurement",
        "width",
        "height",
        "fit",
        "method"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE",
      "WIDTH",
      "HEIGHT"
    ],
    "name": "Image Resize (rgthree)",
    "display_name": "Image Resize (rgthree)",
    "description": "Resize the image.",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Puter (rgthree)": {
    "input": {
      "required": {

      },
      "optional": {

      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo",
        "prompt"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [false],
    "output_name": [
      "*"
    ],
    "name": "Power Puter (rgthree)",
    "display_name": "Power Puter (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "RecommendedResCalc": {
    "input": {
      "required": {
        "desiredXSIZE": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 8192,
            "step": 2
          }
        ],
        "desiredYSIZE": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 8192,
            "step": 2
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "desiredXSIZE",
        "desiredYSIZE"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "recomm width",
      "recomm height",
      "upscale factor",
      "reverse upscale for 4x",
      "reverse upscale for 2x"
    ],
    "name": "RecommendedResCalc",
    "display_name": "Recommended Resolution Calculator",
    "description": "",
    "python_module": "custom_nodes.sdxl-recommended-res-calc",
    "category": "utils",
    "output_node": false
  },
  "BLIP Model Loader": {
    "input": {
      "required": {
        "blip_model": [
          "STRING",
          {
            "default": "Salesforce/blip-image-captioning-base"
          }
        ],
        "vqa_model_id": [
          "STRING",
          {
            "default": "Salesforce/blip-vqa-base"
          }
        ],
        "device": [
          [
            "cuda",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "blip_model",
        "vqa_model_id",
        "device"
      ]
    },
    "output": [
      "BLIP_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "BLIP_MODEL"
    ],
    "name": "BLIP Model Loader",
    "display_name": "BLIP Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Blend Latents": {
    "input": {
      "required": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "operation": [
          [
            "add",
            "multiply",
            "divide",
            "subtract",
            "overlay",
            "hard_light",
            "soft_light",
            "screen",
            "linear_dodge",
            "difference",
            "exclusion",
            "random"
          ]
        ],
        "blend": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.01,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_a",
        "latent_b",
        "operation",
        "blend"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "Blend Latents",
    "display_name": "Blend Latents",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent",
    "output_node": false
  },
  "Bus Node": {
    "input": {
      "required": {

      },
      "optional": {
        "bus": [
          "BUS"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "bus",
        "model",
        "clip",
        "vae",
        "positive",
        "negative"
      ]
    },
    "output": [
      "BUS",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, false, false, false, false],
    "output_name": [
      "bus",
      "model",
      "clip",
      "vae",
      "positive",
      "negative"
    ],
    "name": "Bus Node",
    "display_name": "Bus Node",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "Cache Node": {
    "input": {
      "required": {
        "latent_suffix": [
          "STRING",
          {
            "default": "93474135_cache",
            "multiline": false
          }
        ],
        "image_suffix": [
          "STRING",
          {
            "default": "72834746_cache",
            "multiline": false
          }
        ],
        "conditioning_suffix": [
          "STRING",
          {
            "default": "94439909_cache",
            "multiline": false
          }
        ]
      },
      "optional": {
        "output_path": [
          "STRING",
          {
            "default": "D:\\AI\\ComfyUI\\ComfyUI\\custom_nodes\\was-node-suite-comfyui\\cache",
            "multiline": false
          }
        ],
        "latent": [
          "LATENT"
        ],
        "image": [
          "IMAGE"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_suffix",
        "image_suffix",
        "conditioning_suffix"
      ],
      "optional": [
        "output_path",
        "latent",
        "image",
        "conditioning"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "latent_filename",
      "image_filename",
      "conditioning_filename"
    ],
    "name": "Cache Node",
    "display_name": "Cache Node",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Checkpoint Loader": {
    "input": {
      "required": {
        "config_name": [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ]
        ],
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Checkpoint Loader",
    "display_name": "Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Checkpoint Loader (Simple)": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Checkpoint Loader (Simple)",
    "display_name": "Checkpoint Loader (Simple)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "CLIPTextEncode (NSP)": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "conditioning",
      "parsed_text",
      "raw_text"
    ],
    "name": "CLIPTextEncode (NSP)",
    "display_name": "CLIPTextEncode (NSP)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Conditioning",
    "output_node": true
  },
  "CLIP Input Switch": {
    "input": {
      "required": {
        "clip_a": [
          "CLIP"
        ],
        "clip_b": [
          "CLIP"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_a",
        "clip_b",
        "boolean"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIP Input Switch",
    "display_name": "CLIP Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "CLIP Vision Input Switch": {
    "input": {
      "required": {
        "clip_vision_a": [
          "CLIP_VISION"
        ],
        "clip_vision_b": [
          "CLIP_VISION"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision_a",
        "clip_vision_b",
        "boolean"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [false],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIP Vision Input Switch",
    "display_name": "CLIP Vision Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Conditioning Input Switch": {
    "input": {
      "required": {
        "conditioning_a": [
          "CONDITIONING"
        ],
        "conditioning_b": [
          "CONDITIONING"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_a",
        "conditioning_b",
        "boolean"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Conditioning Input Switch",
    "display_name": "Conditioning Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Constant Number": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float",
            "bool"
          ]
        ],
        "number": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "number_as_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "number"
      ],
      "optional": [
        "number_as_text"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Constant Number",
    "display_name": "Constant Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Create Grid Image": {
    "input": {
      "required": {
        "images_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/",
            "multiline": false
          }
        ],
        "pattern_glob": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "include_subfolders": [
          [
            "false",
            "true"
          ]
        ],
        "border_width": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "number_of_columns": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ],
        "max_cell_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 1280,
            "step": 1
          }
        ],
        "border_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_path",
        "pattern_glob",
        "include_subfolders",
        "border_width",
        "number_of_columns",
        "max_cell_size",
        "border_red",
        "border_green",
        "border_blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Grid Image",
    "display_name": "Create Grid Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Create Grid Image from Batch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "border_width": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "number_of_columns": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ],
        "max_cell_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 2048,
            "step": 1
          }
        ],
        "border_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "border_width",
        "number_of_columns",
        "max_cell_size",
        "border_red",
        "border_green",
        "border_blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Grid Image from Batch",
    "display_name": "Create Grid Image from Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Create Morph Image": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "still_image_delay_ms": [
          "FLOAT",
          {
            "default": 2500,
            "min": 0.1,
            "max": 60000,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph",
            "multiline": false
          }
        ],
        "filetype": [
          [
            "GIF",
            "APNG"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "transition_frames",
        "still_image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "output_path",
        "filename",
        "filetype"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "image_a_pass",
      "image_b_pass",
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Morph Image",
    "display_name": "Create Morph Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "Create Morph Image from Path": {
    "input": {
      "required": {
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "still_image_delay_ms": [
          "FLOAT",
          {
            "default": 2500,
            "min": 0.1,
            "max": 60000,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "input_path": [
          "STRING",
          {
            "default": "./ComfyUI",
            "multiline": false
          }
        ],
        "input_pattern": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph",
            "multiline": false
          }
        ],
        "filetype": [
          [
            "GIF",
            "APNG"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "transition_frames",
        "still_image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "input_path",
        "input_pattern",
        "output_path",
        "filename",
        "filetype"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Morph Image from Path",
    "display_name": "Create Morph Image from Path",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "Create Video from Path": {
    "input": {
      "required": {
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "image_delay_sec": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0.01,
            "max": 60000,
            "step": 0.01
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 60,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1920,
            "step": 1
          }
        ],
        "input_path": [
          "STRING",
          {
            "default": "./ComfyUI/input",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "comfy_video",
            "multiline": false
          }
        ],
        "codec": [
          [
            "AVC1",
            "FFV1",
            "H264",
            "MP4V"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "transition_frames",
        "image_delay_sec",
        "fps",
        "max_size",
        "input_path",
        "output_path",
        "filename",
        "codec"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Video from Path",
    "display_name": "Create Video from Path",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "CLIPSeg Masking": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "clipseg_model": [
          "CLIPSEG_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ],
      "optional": [
        "clipseg_model"
      ]
    },
    "output": [
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MASK",
      "MASK_IMAGE"
    ],
    "name": "CLIPSeg Masking",
    "display_name": "CLIPSeg Masking",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "CLIPSeg Model Loader": {
    "input": {
      "required": {
        "model": [
          "STRING",
          {
            "default": "CIDAS/clipseg-rd64-refined",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "CLIPSEG_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "clipseg_model"
    ],
    "name": "CLIPSeg Model Loader",
    "display_name": "CLIPSeg Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "CLIPSeg Batch Masking": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "text_a": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_b": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "image_c": [
          "IMAGE"
        ],
        "image_d": [
          "IMAGE"
        ],
        "image_e": [
          "IMAGE"
        ],
        "image_f": [
          "IMAGE"
        ],
        "text_c": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_d": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_e": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_f": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "text_a",
        "text_b"
      ],
      "optional": [
        "image_c",
        "image_d",
        "image_e",
        "image_f",
        "text_c",
        "text_d",
        "text_e",
        "text_f"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGES_BATCH",
      "MASKS_BATCH",
      "MASK_IMAGES_BATCH"
    ],
    "name": "CLIPSeg Batch Masking",
    "display_name": "CLIPSeg Batch Masking",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Convert Masks to Images": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGES"
    ],
    "name": "Convert Masks to Images",
    "display_name": "Convert Masks to Images",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Control Net Model Input Switch": {
    "input": {
      "required": {
        "control_net_a": [
          "CONTROL_NET"
        ],
        "control_net_b": [
          "CONTROL_NET"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_a",
        "control_net_b",
        "boolean"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "Control Net Model Input Switch",
    "display_name": "Control Net Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Debug Number to Console": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ],
        "label": [
          "STRING",
          {
            "default": "Debug to Console",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "label"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [false],
    "output_name": [
      "NUMBER"
    ],
    "name": "Debug Number to Console",
    "display_name": "Debug Number to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Dictionary to Console": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ],
        "label": [
          "STRING",
          {
            "default": "Dictionary Output",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary",
        "label"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [false],
    "output_name": [
      "DICT"
    ],
    "name": "Dictionary to Console",
    "display_name": "Dictionary to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Diffusers Model Loader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Diffusers Model Loader",
    "display_name": "Diffusers Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Diffusers Hub Model Down-Loader": {
    "input": {
      "required": {
        "repo_id": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "revision": [
          "STRING",
          {
            "default": "None",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "repo_id",
        "revision"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Diffusers Hub Model Down-Loader",
    "display_name": "Diffusers Hub Model Down-Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Export API": {
    "input": {
      "required": {
        "save_prompt_api": [
          [
            "true",
            "true"
          ]
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output/",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI_Prompt"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 2,
            "max": 9,
            "step": 1
          }
        ],
        "parse_text_tokens": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "save_prompt_api",
        "output_path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding",
        "parse_text_tokens"
      ],
      "hidden": [
        "prompt"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Export API",
    "display_name": "Export API",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Latent Input Switch": {
    "input": {
      "required": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_a",
        "latent_b",
        "boolean"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Input Switch",
    "display_name": "Latent Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Load Cache": {
    "input": {
      "required": {
        "latent_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "image_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "conditioning_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_path",
        "image_path",
        "conditioning_path"
      ]
    },
    "output": [
      "LATENT",
      "IMAGE",
      "CONDITIONING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "LATENT",
      "IMAGE",
      "CONDITIONING"
    ],
    "name": "Load Cache",
    "display_name": "Load Cache",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Logic Boolean": {
    "input": {
      "required": {
        "boolean": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN",
      "NUMBER",
      "INT",
      "FLOAT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "BOOLEAN",
      "NUMBER",
      "INT",
      "FLOAT"
    ],
    "name": "Logic Boolean",
    "display_name": "Logic Boolean",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Boolean Primitive": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Boolean Primitive",
    "display_name": "Logic Boolean Primitive",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison OR": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison OR",
    "display_name": "Logic Comparison OR",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison AND": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison AND",
    "display_name": "Logic Comparison AND",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison XOR": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison XOR",
    "display_name": "Logic Comparison XOR",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic NOT": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic NOT",
    "display_name": "Logic NOT",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Lora Loader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "NAME_STRING"
    ],
    "name": "Lora Loader",
    "display_name": "Lora Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Hex to HSL": {
    "input": {
      "required": {
        "hex_color": [
          "STRING",
          {
            "default": "#FF0000"
          }
        ]
      },
      "optional": {
        "include_alpha": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hex_color"
      ],
      "optional": [
        "include_alpha"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "hue",
      "saturation",
      "lightness",
      "alpha",
      "hsl"
    ],
    "name": "Hex to HSL",
    "display_name": "Hex to HSL",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "HSL to Hex": {
    "input": {
      "required": {
        "hsl_color": [
          "STRING",
          {
            "default": "hsl(0, 100%, 50%)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hsl_color"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "hex_color"
    ],
    "name": "HSL to Hex",
    "display_name": "HSL to Hex",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "Image SSAO (Ambient Occlusion)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "depth_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "min": 0,
            "max": 5,
            "default": 1,
            "step": 0.01
          }
        ],
        "radius": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 30,
            "step": 0.01
          }
        ],
        "ao_blur": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 2.5,
            "step": 0.01
          }
        ],
        "specular_threshold": [
          "INT",
          {
            "min": 0,
            "max": 255,
            "default": 25,
            "step": 1
          }
        ],
        "enable_specular_masking": [
          [
            "True",
            "False"
          ]
        ],
        "tile_size": [
          "INT",
          {
            "min": 1,
            "max": 512,
            "default": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "depth_images",
        "strength",
        "radius",
        "ao_blur",
        "specular_threshold",
        "enable_specular_masking",
        "tile_size"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "composited_images",
      "ssao_images",
      "specular_mask_images"
    ],
    "name": "Image SSAO (Ambient Occlusion)",
    "display_name": "Image SSAO (Ambient Occlusion)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image SSDO (Direct Occlusion)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "depth_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "min": 0,
            "max": 5,
            "default": 1,
            "step": 0.01
          }
        ],
        "radius": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 30,
            "step": 0.01
          }
        ],
        "specular_threshold": [
          "INT",
          {
            "min": 0,
            "max": 255,
            "default": 128,
            "step": 1
          }
        ],
        "colored_occlusion": [
          [
            "True",
            "False"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "depth_images",
        "strength",
        "radius",
        "specular_threshold",
        "colored_occlusion"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "composited_images",
      "ssdo_images",
      "ssdo_image_masks",
      "light_source_image_masks"
    ],
    "name": "Image SSDO (Direct Occlusion)",
    "display_name": "Image SSDO (Direct Occlusion)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Analyze": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Black White Levels",
            "RGB Levels"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Analyze",
    "display_name": "Image Analyze",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Image Aspect Ratio": {
    "input": {
      "required": {

      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "NUMBER"
        ],
        "height": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "NUMBER",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "aspect_number",
      "aspect_float",
      "is_landscape_bool",
      "aspect_ratio_common",
      "aspect_type"
    ],
    "name": "Image Aspect Ratio",
    "display_name": "Image Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Image Batch": {
    "input": {
      "required": {

      },
      "optional": {
        "images_a": [
          "IMAGE"
        ],
        "images_b": [
          "IMAGE"
        ],
        "images_c": [
          "IMAGE"
        ],
        "images_d": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "images_a",
        "images_b",
        "images_c",
        "images_d"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image Batch",
    "display_name": "Image Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blank": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "red",
        "green",
        "blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Blank",
    "display_name": "Image Blank",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blend by Mask": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "mask",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Blend by Mask",
    "display_name": "Image Blend by Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blend": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image Blend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blending Mode": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "mode": [
          [
            "add",
            "color",
            "color_burn",
            "color_dodge",
            "darken",
            "difference",
            "exclusion",
            "hard_light",
            "hue",
            "lighten",
            "multiply",
            "overlay",
            "screen",
            "soft_light"
          ]
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "mode",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image Blending Mode",
    "display_name": "Image Blending Mode",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Bloom Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 10,
            "min": 0,
            "max": 1024,
            "step": 0.1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "radius",
        "intensity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Bloom Filter",
    "display_name": "Image Bloom Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Canny Filter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "enable_threshold": [
          [
            "false",
            "true"
          ]
        ],
        "threshold_low": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_high": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "enable_threshold",
        "threshold_low",
        "threshold_high"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image Canny Filter",
    "display_name": "Image Canny Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Chromatic Aberration": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red_offset": [
          "INT",
          {
            "default": 2,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "green_offset": [
          "INT",
          {
            "default": -1,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "blue_offset": [
          "INT",
          {
            "default": 1,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "fade_radius": [
          "INT",
          {
            "default": 12,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red_offset",
        "green_offset",
        "blue_offset",
        "intensity",
        "fade_radius"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Chromatic Aberration",
    "display_name": "Image Chromatic Aberration",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Color Palette": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 16,
            "min": 8,
            "max": 256,
            "step": 1
          }
        ],
        "mode": [
          [
            "Chart",
            "back_to_back"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "LIST"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "color_palettes"
    ],
    "name": "Image Color Palette",
    "display_name": "Image Color Palette",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Image Crop Face": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_padding_factor": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 2,
            "step": 0.01
          }
        ],
        "cascade_xml": [
          [
            "lbpcascade_animeface.xml",
            "haarcascade_frontalface_default.xml",
            "haarcascade_frontalface_alt.xml",
            "haarcascade_frontalface_alt2.xml",
            "haarcascade_frontalface_alt_tree.xml",
            "haarcascade_profileface.xml",
            "haarcascade_upperbody.xml",
            "haarcascade_eye.xml"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_padding_factor",
        "cascade_xml"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Face",
    "display_name": "Image Crop Face",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Crop Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "top",
        "left",
        "right",
        "bottom"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Location",
    "display_name": "Image Crop Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Crop Square Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "max": 24576,
            "min": 0,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "max": 24576,
            "min": 0,
            "step": 1
          }
        ],
        "size": [
          "INT",
          {
            "default": 256,
            "max": 4096,
            "min": 5,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "x",
        "y",
        "size"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Square Location",
    "display_name": "Image Crop Square Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Displacement Warp": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "displacement_maps": [
          "IMAGE"
        ],
        "amplitude": [
          "FLOAT",
          {
            "default": 25,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "displacement_maps",
        "amplitude"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image Displacement Warp",
    "display_name": "Image Displacement Warp",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Lucy Sharpen": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "iterations": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "iterations",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Lucy Sharpen",
    "display_name": "Image Lucy Sharpen",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Paste Face": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK_IMAGE"
    ],
    "name": "Image Paste Face",
    "display_name": "Image Paste Face",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Paste Crop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Paste Crop",
    "display_name": "Image Paste Crop",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Paste Crop by Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "top",
        "left",
        "right",
        "bottom",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Paste Crop by Location",
    "display_name": "Image Paste Crop by Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Pixelate": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "pixelation_size": [
          "FLOAT",
          {
            "default": 164,
            "min": 16,
            "max": 480,
            "step": 1
          }
        ],
        "num_colors": [
          "FLOAT",
          {
            "default": 16,
            "min": 2,
            "max": 256,
            "step": 1
          }
        ],
        "init_mode": [
          [
            "k-means++",
            "random",
            "none"
          ]
        ],
        "max_iterations": [
          "FLOAT",
          {
            "default": 100,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "False",
            "True"
          ]
        ],
        "dither_mode": [
          [
            "FloydSteinberg",
            "Ordered"
          ]
        ]
      },
      "optional": {
        "color_palettes": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "color_palette_mode": [
          [
            "Brightness",
            "BrightnessAndTonal",
            "Linear",
            "Tonal"
          ]
        ],
        "reverse_palette": [
          [
            "False",
            "True"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "pixelation_size",
        "num_colors",
        "init_mode",
        "max_iterations",
        "dither",
        "dither_mode"
      ],
      "optional": [
        "color_palettes",
        "color_palette_mode",
        "reverse_palette"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image Pixelate",
    "display_name": "Image Pixelate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Power Noise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 10,
            "min": 0,
            "step": 0.01
          }
        ],
        "attenuation": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 10,
            "min": 0,
            "step": 0.01
          }
        ],
        "noise_type": [
          [
            "grey",
            "white",
            "pink",
            "blue",
            "green",
            "mix"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frequency",
        "attenuation",
        "noise_type",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image Power Noise",
    "display_name": "Image Power Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Dragan Photography Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 16,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 16,
            "step": 0.01
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 16,
            "step": 0.01
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 6,
            "step": 0.01
          }
        ],
        "highpass_radius": [
          "FLOAT",
          {
            "default": 6,
            "min": 0,
            "max": 255,
            "step": 0.01
          }
        ],
        "highpass_samples": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 6,
            "step": 1
          }
        ],
        "highpass_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 3,
            "step": 0.01
          }
        ],
        "colorize": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "saturation",
        "contrast",
        "brightness",
        "sharpness",
        "highpass_radius",
        "highpass_samples",
        "highpass_strength",
        "colorize"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Dragan Photography Filter",
    "display_name": "Image Dragan Photography Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Edge Detection Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "normal",
            "laplacian"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Edge Detection Filter",
    "display_name": "Image Edge Detection Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Film Grain": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "density": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 1,
            "step": 0.01
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 1,
            "step": 0.01
          }
        ],
        "highlights": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 255,
            "step": 0.01
          }
        ],
        "supersample_factor": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 8,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "density",
        "intensity",
        "highlights",
        "supersample_factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Film Grain",
    "display_name": "Image Film Grain",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Filter Adjustments": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 0,
            "min": -1,
            "max": 1,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1,
            "min": -1,
            "max": 2,
            "step": 0.01
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 0.01
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 1,
            "min": -5,
            "max": 5,
            "step": 0.01
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "gaussian_blur": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1024,
            "step": 0.1
          }
        ],
        "edge_enhance": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "detail_enhance": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "brightness",
        "contrast",
        "saturation",
        "sharpness",
        "blur",
        "gaussian_blur",
        "edge_enhance",
        "detail_enhance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Filter Adjustments",
    "display_name": "Image Filter Adjustments",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Flip": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "horizontal",
            "vertical"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image Flip",
    "display_name": "Image Flip",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Gradient Map": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "gradient_image": [
          "IMAGE"
        ],
        "flip_left_right": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "gradient_image",
        "flip_left_right"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Gradient Map",
    "display_name": "Image Gradient Map",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Generate Gradient": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "direction": [
          [
            "horizontal",
            "vertical"
          ]
        ],
        "tolerance": [
          "INT",
          {
            "default": 0,
            "max": 255,
            "min": 0,
            "step": 1
          }
        ],
        "gradient_stops": [
          "STRING",
          {
            "default": "0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "direction",
        "tolerance",
        "gradient_stops"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Generate Gradient",
    "display_name": "Image Generate Gradient",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate",
    "output_node": false
  },
  "Image High Pass Filter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "radius": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 500,
            "step": 1
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ],
        "color_output": [
          [
            "true",
            "false"
          ]
        ],
        "neutral_background": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "radius",
        "strength",
        "color_output",
        "neutral_background"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image High Pass Filter",
    "display_name": "Image High Pass Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image History Loader": {
    "input": {
      "required": {
        "image": [
          [
            "No History"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "filename_text"
    ],
    "name": "Image History Loader",
    "display_name": "Image History Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/History",
    "output_node": false
  },
  "Image Input Switch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "boolean"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Input Switch",
    "display_name": "Image Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Image Levels Adjustment": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "black_level": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ],
        "mid_level": [
          "FLOAT",
          {
            "default": 127.5,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ],
        "white_level": [
          "FLOAT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "black_level",
        "mid_level",
        "white_level"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Levels Adjustment",
    "display_name": "Image Levels Adjustment",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Load": {
    "input": {
      "required": {
        "image_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/example.png",
            "multiline": false
          }
        ],
        "RGBA": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "filename_text_extension": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_path",
        "RGBA"
      ],
      "optional": [
        "filename_text_extension"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "image",
      "mask",
      "filename_text"
    ],
    "name": "Image Load",
    "display_name": "Image Load",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Image Median Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "diameter": [
          "INT",
          {
            "default": 2,
            "min": 0.1,
            "max": 255,
            "step": 1
          }
        ],
        "sigma_color": [
          "FLOAT",
          {
            "default": 10,
            "min": -255,
            "max": 255,
            "step": 0.1
          }
        ],
        "sigma_space": [
          "FLOAT",
          {
            "default": 10,
            "min": -255,
            "max": 255,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "diameter",
        "sigma_color",
        "sigma_space"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Median Filter",
    "display_name": "Image Median Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Mix RGB Channels": {
    "input": {
      "required": {
        "red_channel": [
          "IMAGE"
        ],
        "green_channel": [
          "IMAGE"
        ],
        "blue_channel": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "red_channel",
        "green_channel",
        "blue_channel"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Mix RGB Channels",
    "display_name": "Image Mix RGB Channels",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Monitor Effects Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Digital Distortion",
            "Signal Distortion",
            "TV Distortion"
          ]
        ],
        "amplitude": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "offset": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "amplitude",
        "offset"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image Monitor Effects Filter",
    "display_name": "Image Monitor Effects Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Nova Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amplitude": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 3.14,
            "min": 0,
            "max": 100,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amplitude",
        "frequency"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Nova Filter",
    "display_name": "Image Nova Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Padding": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "feathering": [
          "INT",
          {
            "default": 120,
            "min": 0,
            "max": 2048,
            "step": 1
          }
        ],
        "feather_second_pass": [
          [
            "true",
            "false"
          ]
        ],
        "left_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "right_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "top_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "bottom_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "feathering",
        "feather_second_pass",
        "left_padding",
        "right_padding",
        "top_padding",
        "bottom_padding"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Padding",
    "display_name": "Image Padding",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Perlin Noise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 2048,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 2048,
            "min": 64,
            "step": 1
          }
        ],
        "scale": [
          "INT",
          {
            "default": 100,
            "max": 2048,
            "min": 2,
            "step": 1
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 4,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "persistence": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 100,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "scale",
        "octaves",
        "persistence",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image Perlin Noise",
    "display_name": "Image Perlin Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Rembg (Remove Background)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "transparency": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model": [
          [
            "u2net",
            "u2netp",
            "u2net_human_seg",
            "silueta",
            "isnet-general-use",
            "isnet-anime"
          ]
        ],
        "post_processing": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "only_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting_foreground_threshold": [
          "INT",
          {
            "default": 240,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_background_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_erode_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "background_color": [
          [
            "none",
            "black",
            "white",
            "magenta",
            "chroma green",
            "chroma blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "transparency",
        "model",
        "post_processing",
        "only_mask",
        "alpha_matting",
        "alpha_matting_foreground_threshold",
        "alpha_matting_background_threshold",
        "alpha_matting_erode_size",
        "background_color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image Rembg (Remove Background)",
    "display_name": "Image Rembg (Remove Background)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "Image Perlin Power Fractal": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 8192,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 8192,
            "min": 64,
            "step": 1
          }
        ],
        "scale": [
          "INT",
          {
            "default": 100,
            "max": 2048,
            "min": 2,
            "step": 1
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 4,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "persistence": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 100,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "lacunarity": [
          "FLOAT",
          {
            "default": 2,
            "max": 100,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 2,
            "max": 100,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "scale",
        "octaves",
        "persistence",
        "lacunarity",
        "exponent",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image Perlin Power Fractal",
    "display_name": "Image Perlin Power Fractal",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Remove Background (Alpha)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "background",
            "foreground"
          ]
        ],
        "threshold": [
          "INT",
          {
            "default": 127,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_tolerance": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "threshold",
        "threshold_tolerance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image Remove Background (Alpha)",
    "display_name": "Image Remove Background (Alpha)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Remove Color": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "target_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "target_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "target_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "clip_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "target_red",
        "target_green",
        "target_blue",
        "replace_red",
        "replace_green",
        "replace_blue",
        "clip_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Remove Color",
    "display_name": "Image Remove Color",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Resize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "rescale",
            "resize"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "resampling": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16,
            "step": 0.01
          }
        ],
        "resize_width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ],
        "resize_height": [
          "INT",
          {
            "default": 1536,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "supersample",
        "resampling",
        "rescale_factor",
        "resize_width",
        "resize_height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Resize",
    "display_name": "Image Resize",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Rotate": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "transpose",
            "internal"
          ]
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 360,
            "step": 90
          }
        ],
        "sampler": [
          [
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "rotation",
        "sampler"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image Rotate",
    "display_name": "Image Rotate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Rotate Hue": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "hue_shift": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "hue_shift"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Rotate Hue",
    "display_name": "Image Rotate Hue",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Send HTTP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "url": [
          "STRING",
          {
            "default": "example.com"
          }
        ],
        "method_type": [
          [
            "post",
            "put",
            "patch"
          ],
          {
            "default": "post"
          }
        ],
        "request_field_name": [
          "STRING",
          {
            "default": "image"
          }
        ]
      },
      "optional": {
        "additional_request_headers": [
          "DICT"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "url",
        "method_type",
        "request_field_name"
      ],
      "optional": [
        "additional_request_headers"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "status_code",
      "result_text"
    ],
    "name": "Image Send HTTP",
    "display_name": "Image Send HTTP",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Image Save": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "output_path": [
          "STRING",
          {
            "default": "[time(%Y-%m-%d)]",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 9,
            "step": 1
          }
        ],
        "filename_number_start": [
          [
            "false",
            "true"
          ]
        ],
        "extension": [
          [
            "png",
            "jpg",
            "jpeg",
            "gif",
            "tiff",
            "webp",
            "bmp"
          ]
        ],
        "dpi": [
          "INT",
          {
            "default": 300,
            "min": 1,
            "max": 2400,
            "step": 1
          }
        ],
        "quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "optimize_image": [
          [
            "true",
            "false"
          ]
        ],
        "lossless_webp": [
          [
            "false",
            "true"
          ]
        ],
        "overwrite_mode": [
          [
            "false",
            "prefix_as_filename"
          ]
        ],
        "show_history": [
          [
            "false",
            "true"
          ]
        ],
        "show_history_by_prefix": [
          [
            "true",
            "false"
          ]
        ],
        "embed_workflow": [
          [
            "true",
            "false"
          ]
        ],
        "show_previews": [
          [
            "true",
            "false"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "output_path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding",
        "filename_number_start",
        "extension",
        "dpi",
        "quality",
        "optimize_image",
        "lossless_webp",
        "overwrite_mode",
        "show_history",
        "show_history_by_prefix",
        "embed_workflow",
        "show_previews"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "images",
      "files"
    ],
    "name": "Image Save",
    "display_name": "Image Save",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Image Seamless Texture": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "blending": [
          "FLOAT",
          {
            "default": 0.4,
            "max": 1,
            "min": 0,
            "step": 0.01
          }
        ],
        "tiled": [
          [
            "true",
            "false"
          ]
        ],
        "tiles": [
          "INT",
          {
            "default": 2,
            "max": 6,
            "min": 2,
            "step": 2
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "blending",
        "tiled",
        "tiles"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "Image Seamless Texture",
    "display_name": "Image Seamless Texture",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Select Channel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Select Channel",
    "display_name": "Image Select Channel",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Select Color": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ],
        "variance": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red",
        "green",
        "blue",
        "variance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Select Color",
    "display_name": "Image Select Color",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Shadows and Highlights": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "shadow_threshold": [
          "FLOAT",
          {
            "default": 75,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ],
        "shadow_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": -12,
            "max": 12,
            "step": 0.1
          }
        ],
        "shadow_smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": -255,
            "max": 255,
            "step": 0.1
          }
        ],
        "highlight_threshold": [
          "FLOAT",
          {
            "default": 175,
            "min": 0,
            "max": 255,
            "step": 0.1
          }
        ],
        "highlight_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -12,
            "max": 12,
            "step": 0.1
          }
        ],
        "highlight_smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": -255,
            "max": 255,
            "step": 0.1
          }
        ],
        "simplify_isolation": [
          "FLOAT",
          {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "shadow_threshold",
        "shadow_factor",
        "shadow_smoothing",
        "highlight_threshold",
        "highlight_factor",
        "highlight_smoothing",
        "simplify_isolation"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "image",
      "shadow_map",
      "highlight_map"
    ],
    "name": "Image Shadows and Highlights",
    "display_name": "Image Shadows and Highlights",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Size to Number": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "NUMBER",
      "NUMBER",
      "FLOAT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false],
    "output_name": [
      "width_num",
      "height_num",
      "width_float",
      "height_float",
      "width_int",
      "height_int"
    ],
    "name": "Image Size to Number",
    "display_name": "Image Size to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Image Stitch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "stitch": [
          [
            "top",
            "left",
            "bottom",
            "right"
          ]
        ],
        "feathering": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 2048,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "stitch",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Stitch",
    "display_name": "Image Stitch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Style Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "style": [
          [
            "1977",
            "aden",
            "brannan",
            "brooklyn",
            "clarendon",
            "earlybird",
            "fairy tale",
            "gingham",
            "hudson",
            "inkwell",
            "kelvin",
            "lark",
            "lofi",
            "maven",
            "mayfair",
            "moon",
            "nashville",
            "perpetua",
            "reyes",
            "rise",
            "slumber",
            "stinson",
            "toaster",
            "valencia",
            "walden",
            "willow",
            "xpro2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "style"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Style Filter",
    "display_name": "Image Style Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Threshold": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Threshold",
    "display_name": "Image Threshold",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Tiled": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "num_tiles": [
          "INT",
          {
            "default": 4,
            "max": 64,
            "min": 2,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "num_tiles"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGES"
    ],
    "name": "Image Tiled",
    "display_name": "Image Tiled",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Transpose": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_overlay": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "X": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "Y": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_overlay",
        "width",
        "height",
        "X",
        "Y",
        "rotation",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Transpose",
    "display_name": "Image Transpose",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image fDOF Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "depth": [
          "IMAGE"
        ],
        "mode": [
          [
            "mock",
            "gaussian",
            "box"
          ]
        ],
        "radius": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 128,
            "step": 1
          }
        ],
        "samples": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "depth",
        "mode",
        "radius",
        "samples"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image fDOF Filter",
    "display_name": "Image fDOF Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image to Latent Mask": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Image to Latent Mask",
    "display_name": "Image to Latent Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Image to Noise": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "num_colors": [
          "INT",
          {
            "default": 16,
            "max": 256,
            "min": 2,
            "step": 2
          }
        ],
        "black_mix": [
          "INT",
          {
            "default": 0,
            "max": 20,
            "min": 0,
            "step": 1
          }
        ],
        "gaussian_mix": [
          "FLOAT",
          {
            "default": 0,
            "max": 1024,
            "min": 0,
            "step": 0.1
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 1,
            "max": 2,
            "min": 0,
            "step": 0.01
          }
        ],
        "output_mode": [
          [
            "batch",
            "list"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "num_colors",
        "black_mix",
        "gaussian_mix",
        "brightness",
        "output_mode",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image to Noise",
    "display_name": "Image to Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image to Seed": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [true],
    "output_name": [
      "INT"
    ],
    "name": "Image to Seed",
    "display_name": "Image to Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Images to RGB": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Images to RGB",
    "display_name": "Images to RGB",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Images to Linear": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Images to Linear",
    "display_name": "Images to Linear",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Integer place counter": {
    "input": {
      "required": {
        "int_input": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int_input"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT_PLACES"
    ],
    "name": "Integer place counter",
    "display_name": "Integer place counter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Integer",
    "output_node": false
  },
  "Image Voronoi Noise Filter": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "density": [
          "INT",
          {
            "default": 50,
            "max": 256,
            "min": 10,
            "step": 2
          }
        ],
        "modulator": [
          "INT",
          {
            "default": 0,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      },
      "optional": {
        "flat": [
          [
            "False",
            "True"
          ]
        ],
        "RGB_output": [
          [
            "True",
            "False"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "density",
        "modulator",
        "seed"
      ],
      "optional": [
        "flat",
        "RGB_output"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "image"
    ],
    "name": "Image Voronoi Noise Filter",
    "display_name": "Image Voronoi Noise Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "KSampler (WAS)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "SEED"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler (WAS)",
    "display_name": "KSampler (WAS)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Sampling",
    "output_node": false
  },
  "KSampler Cycle": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0,
            "max": 100
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "sa_solver",
            "sa_solver_pece",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "tiled_vae": [
          [
            "disable",
            "enable"
          ]
        ],
        "latent_upscale": [
          [
            "disable",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.1,
            "max": 8,
            "step": 0.1
          }
        ],
        "upscale_cycles": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 12,
            "step": 1
          }
        ],
        "starting_denoise": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "cycle_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "scale_denoise": [
          [
            "enable",
            "disable"
          ]
        ],
        "scale_sampling": [
          [
            "bilinear",
            "bicubic",
            "nearest",
            "lanczos"
          ]
        ],
        "vae": [
          "VAE"
        ]
      },
      "optional": {
        "secondary_model": [
          "MODEL"
        ],
        "secondary_start_cycle": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 16,
            "step": 1
          }
        ],
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "processor_model": [
          "UPSCALE_MODEL"
        ],
        "pos_additive": [
          "CONDITIONING"
        ],
        "neg_additive": [
          "CONDITIONING"
        ],
        "pos_add_mode": [
          [
            "increment",
            "decrement"
          ]
        ],
        "pos_add_strength": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1,
            "step": 0.01
          }
        ],
        "pos_add_strength_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "pos_add_strength_cutoff": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 10,
            "step": 0.01
          }
        ],
        "neg_add_mode": [
          [
            "increment",
            "decrement"
          ]
        ],
        "neg_add_strength": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1,
            "step": 0.01
          }
        ],
        "neg_add_strength_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "neg_add_strength_cutoff": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 10,
            "step": 0.01
          }
        ],
        "sharpen_strength": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 0.01
          }
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "steps_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "steps_control": [
          [
            "decrement",
            "increment"
          ]
        ],
        "steps_scaling_value": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "steps_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 4,
            "max": 1000,
            "step": 1
          }
        ],
        "denoise_cutoff": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "tiled_vae",
        "latent_upscale",
        "upscale_factor",
        "upscale_cycles",
        "starting_denoise",
        "cycle_denoise",
        "scale_denoise",
        "scale_sampling",
        "vae"
      ],
      "optional": [
        "secondary_model",
        "secondary_start_cycle",
        "upscale_model",
        "processor_model",
        "pos_additive",
        "neg_additive",
        "pos_add_mode",
        "pos_add_strength",
        "pos_add_strength_scaling",
        "pos_add_strength_cutoff",
        "neg_add_mode",
        "neg_add_strength",
        "neg_add_strength_scaling",
        "neg_add_strength_cutoff",
        "sharpen_strength",
        "sharpen_radius",
        "steps_scaling",
        "steps_control",
        "steps_scaling_value",
        "steps_cutoff",
        "denoise_cutoff"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "latent(s)"
    ],
    "name": "KSampler Cycle",
    "display_name": "KSampler Cycle",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Sampling",
    "output_node": false
  },
  "Latent Batch": {
    "input": {
      "required": {

      },
      "optional": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "latent_c": [
          "LATENT"
        ],
        "latent_d": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "latent_a",
        "latent_b",
        "latent_c",
        "latent_d"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "latent"
    ],
    "name": "Latent Batch",
    "display_name": "Latent Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent",
    "output_node": false
  },
  "Latent Noise Injection": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "noise_std": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "noise_std"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Noise Injection",
    "display_name": "Latent Noise Injection",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Generate",
    "output_node": false
  },
  "Latent Size to Number": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "NUMBER",
      "NUMBER",
      "FLOAT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false],
    "output_name": [
      "tensor_w_num",
      "tensor_h_num",
      "tensor_w_float",
      "tensor_h_float",
      "tensor_w_int",
      "tensor_h_int"
    ],
    "name": "Latent Size to Number",
    "display_name": "Latent Size to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Latent Upscale by Factor (WAS)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mode": [
          [
            "area",
            "bicubic",
            "bilinear",
            "nearest"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.1,
            "max": 8,
            "step": 0.01
          }
        ],
        "align": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mode",
        "factor",
        "align"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Upscale by Factor (WAS)",
    "display_name": "Latent Upscale by Factor (WAS)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Transform",
    "output_node": false
  },
  "Load Image Batch": {
    "input": {
      "required": {
        "mode": [
          [
            "single_image",
            "incremental_image",
            "random"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 150000,
            "step": 1
          }
        ],
        "label": [
          "STRING",
          {
            "default": "Batch 001",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "allow_RGBA_output": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "filename_text_extension": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "seed",
        "index",
        "label",
        "path",
        "pattern",
        "allow_RGBA_output"
      ],
      "optional": [
        "filename_text_extension"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "image",
      "filename_text"
    ],
    "name": "Load Image Batch",
    "display_name": "Load Image Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Load Text File": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path",
        "dictionary_name"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "STRING",
      "DICT"
    ],
    "name": "Load Text File",
    "display_name": "Load Text File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Load Lora": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "None",
            "FLUX.1\\80s_comedy_ita.safetensors",
            "FLUX.1\\Amateurphoto_v6.safetensors",
            "FLUX.1\\Classic_Painting_v1.safetensors",
            "FLUX.1\\DarkFantasy_Movie_v1.safetensors",
            "FLUX.1\\Darkfantasy_Illustration_v2.safetensors",
            "FLUX.1\\Ghibli.safetensors",
            "FLUX.1\\Graffiti_Logo_Style.safetensors",
            "FLUX.1\\Provvisoria\\assexpose.safetensors",
            "FLUX.1\\Provvisoria\\cellulite_flux.safetensors",
            "FLUX.1\\Provvisoria\\microbikiniv12_FLUX.safetensors",
            "FLUX.1\\Provvisoria\\roundassv16_FLUX.safetensors",
            "FLUX.1\\Renaissance_Art_Style.safetensors",
            "FLUX.1\\Tarot_v1.0.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Legacy.safetensors",
            "FLUX.1\\Wiz_Vintage_Comic_Pulp.safetensors",
            "Wan2.1\\Lightning\\DetailEnhancerV1.safetensors",
            "Wan2.1\\Lightning\\High_Speed.safetensors",
            "Wan2.1\\Lightning\\Wan14B_RealismBoost.safetensors",
            "Wan2.1\\Lightning\\Wan2.1-Fun-14B-InP-MPS.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_MoviiGen_lora_rank32_fp16.safetensors",
            "Wan2.1\\Lightning\\Wan21_T2V_14B_lightx2v_cfg_step_distill_lora_rank32.safetensors",
            "Wan2.1\\Provvisoria\\genitals_helper_v1.0_e219.safetensors",
            "Wan2.1\\Provvisoria\\wan_cumshot.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1,
            "min": -10,
            "max": 10,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "NAME_STRING"
    ],
    "name": "Load Lora",
    "display_name": "Load Lora",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Lora Input Switch": {
    "input": {
      "required": {
        "model_a": [
          "MODEL"
        ],
        "clip_a": [
          "CLIP"
        ],
        "model_b": [
          "MODEL"
        ],
        "clip_b": [
          "CLIP"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_a",
        "clip_a",
        "model_b",
        "clip_b",
        "boolean"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Input Switch",
    "display_name": "Lora Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Masks Add": {
    "input": {
      "required": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks_a",
        "masks_b"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Masks Add",
    "display_name": "Masks Add",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Subtract": {
    "input": {
      "required": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks_a",
        "masks_b"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Masks Subtract",
    "display_name": "Masks Subtract",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Arbitrary Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "size",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Arbitrary Region",
    "display_name": "Mask Arbitrary Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Batch to Mask": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "batch_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "batch_number"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "Mask Batch to Mask",
    "display_name": "Mask Batch to Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Batch": {
    "input": {
      "optional": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ],
        "masks_c": [
          "MASK"
        ],
        "masks_d": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "optional": [
        "masks_a",
        "masks_b",
        "masks_c",
        "masks_d"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "masks"
    ],
    "name": "Mask Batch",
    "display_name": "Mask Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Ceiling Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Ceiling Region",
    "display_name": "Mask Ceiling Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Dominant Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "padding"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Crop Dominant Region",
    "display_name": "Mask Crop Dominant Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Minority Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "padding"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Crop Minority Region",
    "display_name": "Mask Crop Minority Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Region": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "region_type": [
          [
            "dominant",
            "minority"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "region_type"
      ]
    },
    "output": [
      "MASK",
      "CROP_DATA",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [false, false, false, false, false, false, false, false],
    "output_name": [
      "cropped_mask",
      "crop_data",
      "top_int",
      "left_int",
      "right_int",
      "bottom_int",
      "width_int",
      "height_int"
    ],
    "name": "Mask Crop Region",
    "display_name": "Mask Crop Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Paste Region": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "crop_mask": [
          "MASK"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "crop_mask",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "RESULT_MASK",
      "CROP_MASK"
    ],
    "name": "Mask Paste Region",
    "display_name": "Mask Paste Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Dilate Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "iterations"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Dilate Region",
    "display_name": "Mask Dilate Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Dominant Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Dominant Region",
    "display_name": "Mask Dominant Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Erode Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "iterations"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Erode Region",
    "display_name": "Mask Erode Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Fill Holes": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Fill Holes",
    "display_name": "Mask Fill Holes",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Floor Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Floor Region",
    "display_name": "Mask Floor Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Gaussian Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 1024,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "radius"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Gaussian Region",
    "display_name": "Mask Gaussian Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Invert": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Invert",
    "display_name": "Mask Invert",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Minority Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Minority Region",
    "display_name": "Mask Minority Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Rect Area": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "blur_radius"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Rect Area",
    "display_name": "Mask Rect Area",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Rect Area (Advanced)": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "image_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "image_width",
        "image_height",
        "blur_radius"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Rect Area (Advanced)",
    "display_name": "Mask Rect Area (Advanced)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Smooth Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 128,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "sigma"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Smooth Region",
    "display_name": "Mask Smooth Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Threshold Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "black_threshold": [
          "INT",
          {
            "default": 75,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "white_threshold": [
          "INT",
          {
            "default": 175,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "black_threshold",
        "white_threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Threshold Region",
    "display_name": "Mask Threshold Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Combine Regions": {
    "input": {
      "required": {
        "mask_a": [
          "MASK"
        ],
        "mask_b": [
          "MASK"
        ]
      },
      "optional": {
        "mask_c": [
          "MASK"
        ],
        "mask_d": [
          "MASK"
        ],
        "mask_e": [
          "MASK"
        ],
        "mask_f": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask_a",
        "mask_b"
      ],
      "optional": [
        "mask_c",
        "mask_d",
        "mask_e",
        "mask_f"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "Masks Combine Regions",
    "display_name": "Masks Combine Regions",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Combine Batch": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [false],
    "output_name": [
      "MASK"
    ],
    "name": "Masks Combine Batch",
    "display_name": "Masks Combine Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "MiDaS Model Loader": {
    "input": {
      "required": {
        "midas_model": [
          [
            "DPT_Large",
            "DPT_Hybrid"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "midas_model"
      ]
    },
    "output": [
      "MIDAS_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "midas_model"
    ],
    "name": "MiDaS Model Loader",
    "display_name": "MiDaS Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "MiDaS Depth Approximation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "use_cpu": [
          [
            "false",
            "true"
          ]
        ],
        "midas_type": [
          [
            "DPT_Large",
            "DPT_Hybrid"
          ]
        ],
        "invert_depth": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "midas_model": [
          "MIDAS_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "use_cpu",
        "midas_type",
        "invert_depth"
      ],
      "optional": [
        "midas_model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "images"
    ],
    "name": "MiDaS Depth Approximation",
    "display_name": "MiDaS Depth Approximation",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "MiDaS Mask Image": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "use_cpu": [
          [
            "false",
            "true"
          ]
        ],
        "midas_model": [
          [
            "DPT_Large",
            "DPT_Hybrid",
            "DPT_Small"
          ]
        ],
        "remove": [
          [
            "background",
            "foregroud"
          ]
        ],
        "threshold": [
          [
            "false",
            "true"
          ]
        ],
        "threshold_low": [
          "FLOAT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_mid": [
          "FLOAT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_high": [
          "FLOAT",
          {
            "default": 210,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0,
            "max": 16,
            "step": 0.01
          }
        ],
        "background_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "use_cpu",
        "midas_model",
        "remove",
        "threshold",
        "threshold_low",
        "threshold_mid",
        "threshold_high",
        "smoothing",
        "background_red",
        "background_green",
        "background_blue"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "RESULT",
      "DEPTH"
    ],
    "name": "MiDaS Mask Image",
    "display_name": "MiDaS Mask Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "Model Input Switch": {
    "input": {
      "required": {
        "model_a": [
          "MODEL"
        ],
        "model_b": [
          "MODEL"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_a",
        "model_b",
        "boolean"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "MODEL"
    ],
    "name": "Model Input Switch",
    "display_name": "Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Counter": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float"
          ]
        ],
        "mode": [
          [
            "increment",
            "decrement",
            "increment_to_stop",
            "decrement_to_stop",
            "reset_after_stop"
          ]
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.01
          }
        ],
        "stop": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19,
            "step": 0.01
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 99999,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "reset_bool": [
          "NUMBER"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "mode",
        "start",
        "stop",
        "step"
      ],
      "optional": [
        "reset_bool"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "number",
      "float",
      "int"
    ],
    "name": "Number Counter",
    "display_name": "Number Counter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Number Operation": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "operation": [
          [
            "addition",
            "subtraction",
            "division",
            "floor division",
            "multiplication",
            "exponentiation",
            "modulus",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "operation"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Operation",
    "display_name": "Number Operation",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Float": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [false],
    "output_name": [
      "FLOAT"
    ],
    "name": "Number to Float",
    "display_name": "Number to Float",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number Input Switch": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "boolean"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Input Switch",
    "display_name": "Number Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Input Condition": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "return_boolean": [
          [
            "false",
            "true"
          ]
        ],
        "comparison": [
          [
            "and",
            "or",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal",
            "divisible by",
            "if A odd",
            "if A even",
            "if A prime",
            "factor of"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "return_boolean",
        "comparison"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Input Condition",
    "display_name": "Number Input Condition",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Multiple Of": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ],
        "multiple": [
          "INT",
          {
            "default": 8,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "multiple"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Multiple Of",
    "display_name": "Number Multiple Of",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Functions",
    "output_node": false
  },
  "Number PI": {
    "input": {
      "required": {

      }
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NUMBER",
      "FLOAT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "NUMBER",
      "FLOAT"
    ],
    "name": "Number PI",
    "display_name": "Number PI",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Number to Int": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [false],
    "output_name": [
      "INT"
    ],
    "name": "Number to Int",
    "display_name": "Number to Int",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Seed": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "SEED"
    ],
    "output_is_list": [false],
    "output_name": [
      "SEED"
    ],
    "name": "Number to Seed",
    "display_name": "Number to Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to String": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Number to String",
    "display_name": "Number to String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Text": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Number to Text",
    "display_name": "Number to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Boolean To Text": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Boolean To Text",
    "display_name": "Boolean To Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Prompt Styles Selector": {
    "input": {
      "required": {
        "style": [
          [
            "None"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive_string",
      "negative_string"
    ],
    "name": "Prompt Styles Selector",
    "display_name": "Prompt Styles Selector",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Prompt Multiple Styles Selector": {
    "input": {
      "required": {
        "style1": [
          [
            "None"
          ]
        ],
        "style2": [
          [
            "None"
          ]
        ],
        "style3": [
          [
            "None"
          ]
        ],
        "style4": [
          [
            "None"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style1",
        "style2",
        "style3",
        "style4"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "positive_string",
      "negative_string"
    ],
    "name": "Prompt Multiple Styles Selector",
    "display_name": "Prompt Multiple Styles Selector",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Random Number": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float",
            "bool"
          ]
        ],
        "minimum": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "maximum": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "minimum",
        "maximum",
        "seed"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Random Number",
    "display_name": "Random Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Save Text File": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "path": [
          "STRING",
          {
            "default": "./ComfyUI/output/[time(%Y-%m-%d)]",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "file_extension": [
          "STRING",
          {
            "default": ".txt"
          }
        ],
        "encoding": [
          "STRING",
          {
            "default": "utf-8"
          }
        ],
        "filename_suffix": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding"
      ],
      "optional": [
        "file_extension",
        "encoding",
        "filename_suffix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Text File",
    "display_name": "Save Text File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "SEED",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "seed",
      "number",
      "float",
      "int"
    ],
    "name": "Seed",
    "display_name": "Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Tensor Batch to Image": {
    "input": {
      "required": {
        "images_batch": [
          "IMAGE"
        ],
        "batch_image_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_batch",
        "batch_image_number"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Tensor Batch to Image",
    "display_name": "Tensor Batch to Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Transform",
    "output_node": false
  },
  "BLIP Analyze Image": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "caption",
            "interrogate"
          ]
        ],
        "question": [
          "STRING",
          {
            "default": "What does the background consist of?",
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "blip_model": [
          "BLIP_MODEL"
        ]
      },
      "optional": {
        "min_length": [
          "INT",
          {
            "min": 1,
            "max": 1024,
            "default": 24
          }
        ],
        "max_length": [
          "INT",
          {
            "min": 2,
            "max": 1024,
            "default": 64
          }
        ],
        "num_beams": [
          "INT",
          {
            "min": 1,
            "max": 12,
            "default": 5
          }
        ],
        "no_repeat_ngram_size": [
          "INT",
          {
            "min": 1,
            "max": 12,
            "default": 3
          }
        ],
        "early_stopping": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "question",
        "blip_model"
      ],
      "optional": [
        "min_length",
        "max_length",
        "num_beams",
        "no_repeat_ngram_size",
        "early_stopping"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, true],
    "output_name": [
      "FULL_CAPTIONS",
      "CAPTIONS"
    ],
    "name": "BLIP Analyze Image",
    "display_name": "BLIP Analyze Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/AI",
    "output_node": false
  },
  "SAM Model Loader": {
    "input": {
      "required": {
        "model_size": [
          [
            "ViT-H",
            "ViT-L",
            "ViT-B"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_size"
      ]
    },
    "output": [
      "SAM_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAM_MODEL"
    ],
    "name": "SAM Model Loader",
    "display_name": "SAM Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Parameters": {
    "input": {
      "required": {
        "points": [
          "STRING",
          {
            "default": "[128, 128]; [0, 0]",
            "multiline": false
          }
        ],
        "labels": [
          "STRING",
          {
            "default": "[1, 0]",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "points",
        "labels"
      ]
    },
    "output": [
      "SAM_PARAMETERS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAM_PARAMETERS"
    ],
    "name": "SAM Parameters",
    "display_name": "SAM Parameters",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Parameters Combine": {
    "input": {
      "required": {
        "sam_parameters_a": [
          "SAM_PARAMETERS"
        ],
        "sam_parameters_b": [
          "SAM_PARAMETERS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_parameters_a",
        "sam_parameters_b"
      ]
    },
    "output": [
      "SAM_PARAMETERS"
    ],
    "output_is_list": [false],
    "output_name": [
      "SAM_PARAMETERS"
    ],
    "name": "SAM Parameters Combine",
    "display_name": "SAM Parameters Combine",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Image Mask": {
    "input": {
      "required": {
        "sam_model": [
          "SAM_MODEL"
        ],
        "sam_parameters": [
          "SAM_PARAMETERS"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_model",
        "sam_parameters",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SAM Image Mask",
    "display_name": "SAM Image Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Samples Passthrough (Stat System)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [false],
    "output_name": [
      "samples"
    ],
    "name": "Samples Passthrough (Stat System)",
    "display_name": "Samples Passthrough (Stat System)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": false
  },
  "String to Text": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {

          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "String to Text",
    "display_name": "String to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Image Bounds": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Image Bounds",
    "display_name": "Image Bounds",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Inset Image Bounds": {
    "input": {
      "required": {
        "image_bounds": [
          "IMAGE_BOUNDS"
        ],
        "inset_left": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "inset_right": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "inset_top": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "inset_bottom": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_bounds",
        "inset_left",
        "inset_right",
        "inset_top",
        "inset_bottom"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Inset Image Bounds",
    "display_name": "Inset Image Bounds",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Blend": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "target_bounds": [
          "IMAGE_BOUNDS"
        ],
        "source": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "target_bounds",
        "source",
        "blend_factor",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Blend",
    "display_name": "Bounded Image Blend",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Blend with Mask": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "target_mask": [
          "MASK"
        ],
        "target_bounds": [
          "IMAGE_BOUNDS"
        ],
        "source": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "target_mask",
        "target_bounds",
        "source",
        "blend_factor",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Blend with Mask",
    "display_name": "Bounded Image Blend with Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Crop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_bounds": [
          "IMAGE_BOUNDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_bounds"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Crop",
    "display_name": "Bounded Image Crop",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Crop with Mask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "padding_left": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "padding_right": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "padding_top": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "padding_bottom": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      },
      "optional": {
        "return_list": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "padding_left",
        "padding_right",
        "padding_top",
        "padding_bottom"
      ],
      "optional": [
        "return_list"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "IMAGE",
      "IMAGE_BOUNDS"
    ],
    "name": "Bounded Image Crop with Mask",
    "display_name": "Bounded Image Crop with Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Image Bounds to Console": {
    "input": {
      "required": {
        "image_bounds": [
          "IMAGE_BOUNDS"
        ],
        "label": [
          "STRING",
          {
            "default": "Debug to Console",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_bounds",
        "label"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Image Bounds to Console",
    "display_name": "Image Bounds to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Text Dictionary Update": {
    "input": {
      "required": {
        "dictionary_a": [
          "DICT"
        ],
        "dictionary_b": [
          "DICT"
        ]
      },
      "optional": {
        "dictionary_c": [
          "DICT"
        ],
        "dictionary_d": [
          "DICT"
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary_a",
        "dictionary_b"
      ],
      "optional": [
        "dictionary_c",
        "dictionary_d"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [false],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary Update",
    "display_name": "Text Dictionary Update",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Get": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ],
        "key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "default_value": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary",
        "key"
      ],
      "optional": [
        "default_value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Dictionary Get",
    "display_name": "Text Dictionary Get",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Convert": {
    "input": {
      "required": {
        "dictionary_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary_text"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [false],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary Convert",
    "display_name": "Text Dictionary Convert",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary New": {
    "input": {
      "required": {
        "key_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "key_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "key_1",
        "value_1"
      ],
      "optional": [
        "key_2",
        "value_2",
        "key_3",
        "value_3",
        "key_4",
        "value_4",
        "key_5",
        "value_5"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [false],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary New",
    "display_name": "Text Dictionary New",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Keys": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "dictionary"
      ],
      "optional": []
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [false],
    "output_name": [
      "LIST"
    ],
    "name": "Text Dictionary Keys",
    "display_name": "Text Dictionary Keys",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary To Text": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ]
      },
      "optional": {

      }
    },
    "input_order": {
      "required": [
        "dictionary"
      ],
      "optional": []
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Dictionary To Text",
    "display_name": "Text Dictionary To Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Add Tokens": {
    "input": {
      "required": {
        "tokens": [
          "STRING",
          {
            "default": "[hello]: world",
            "multiline": true
          }
        ],
        "print_current_tokens": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "tokens",
        "print_current_tokens"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Text Add Tokens",
    "display_name": "Text Add Tokens",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": true
  },
  "Text Add Token by Input": {
    "input": {
      "required": {
        "token_name": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "token_value": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "print_current_tokens": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "token_name",
        "token_value",
        "print_current_tokens"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Text Add Token by Input",
    "display_name": "Text Add Token by Input",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": true
  },
  "Text Compare": {
    "input": {
      "required": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mode": [
          [
            "similarity",
            "difference"
          ]
        ],
        "tolerance": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_a",
        "text_b",
        "mode",
        "tolerance"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "BOOLEAN",
      "NUMBER",
      "STRING"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "TEXT_A_PASS",
      "TEXT_B_PASS",
      "BOOLEAN",
      "SCORE_NUMBER",
      "COMPARISON_TEXT"
    ],
    "name": "Text Compare",
    "display_name": "Text Compare",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Concatenate": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": ", "
          }
        ],
        "clean_whitespace": [
          [
            "true",
            "false"
          ]
        ]
      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter",
        "clean_whitespace"
      ],
      "optional": [
        "text_a",
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Concatenate",
    "display_name": "Text Concatenate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text File History Loader": {
    "input": {
      "required": {
        "file": [
          [
            "No History"
          ]
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file",
        "dictionary_name"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "STRING",
      "DICT"
    ],
    "name": "Text File History Loader",
    "display_name": "Text File History Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/History",
    "output_node": false
  },
  "Text Find and Replace by Dictionary": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "dictionary": [
          "DICT"
        ],
        "replacement_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "dictionary",
        "replacement_key",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Find and Replace by Dictionary",
    "display_name": "Text Find and Replace by Dictionary",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find and Replace Input": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "find": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "replace": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int"
    ],
    "name": "Text Find and Replace Input",
    "display_name": "Text Find and Replace Input",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find and Replace": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "find": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int"
    ],
    "name": "Text Find and Replace",
    "display_name": "Text Find and Replace",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "substring": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "substring",
        "pattern"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "found"
    ],
    "name": "Text Find",
    "display_name": "Text Find",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Input Switch": {
    "input": {
      "required": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_a",
        "text_b",
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Input Switch",
    "display_name": "Text Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Text List": {
    "input": {
      "required": {

      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_e": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_f": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_g": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text_a",
        "text_b",
        "text_c",
        "text_d",
        "text_e",
        "text_f",
        "text_g"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [false],
    "output_name": [
      "LIST"
    ],
    "name": "Text List",
    "display_name": "Text List",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text List Concatenate": {
    "input": {
      "required": {

      },
      "optional": {
        "list_a": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_b": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_c": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_d": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "list_a",
        "list_b",
        "list_c",
        "list_d"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [false],
    "output_name": [
      "LIST"
    ],
    "name": "Text List Concatenate",
    "display_name": "Text List Concatenate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text List to Text": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": ", "
          }
        ],
        "text_list": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter",
        "text_list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text List to Text",
    "display_name": "Text List to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Load Line From File": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": false
          }
        ],
        "label": [
          "STRING",
          {
            "default": "TextBatch",
            "multiline": false
          }
        ],
        "mode": [
          [
            "automatic",
            "index"
          ]
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ]
      },
      "optional": {
        "multiline_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path",
        "dictionary_name",
        "label",
        "mode",
        "index"
      ],
      "optional": [
        "multiline_text"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "line_text",
      "dictionary"
    ],
    "name": "Text Load Line From File",
    "display_name": "Text Load Line From File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Multiline": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Multiline",
    "display_name": "Text Multiline",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Multiline (Code Compatible)": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Multiline (Code Compatible)",
    "display_name": "Text Multiline (Code Compatible)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Parse A1111 Embeddings": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse A1111 Embeddings",
    "display_name": "Text Parse A1111 Embeddings",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Parse",
    "output_node": false
  },
  "Text Parse Noodle Soup Prompts": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ],
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse Noodle Soup Prompts",
    "display_name": "Text Parse Noodle Soup Prompts",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Parse",
    "output_node": true
  },
  "Text Parse Tokens": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse Tokens",
    "display_name": "Text Parse Tokens",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": false
  },
  "Text Random Line": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Random Line",
    "display_name": "Text Random Line",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Random Prompt": {
    "input": {
      "required": {
        "search_seed": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "search_seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Random Prompt",
    "display_name": "Text Random Prompt",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "text_b": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_c": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_d": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "TEXT",
      "TEXT_B",
      "TEXT_C",
      "TEXT_D"
    ],
    "name": "Text String",
    "display_name": "Text String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Contains": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "sub_text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "case_insensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "sub_text"
      ],
      "optional": [
        "case_insensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [false],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Text Contains",
    "display_name": "Text Contains",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Text Shuffle": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1.8446744073709552e+19
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Shuffle",
    "display_name": "Text Shuffle",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text Sort": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ", ",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "separator"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text Sort",
    "display_name": "Text Sort",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to Conditioning": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [false],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Text to Conditioning",
    "display_name": "Text to Conditioning",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to Console": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "label": [
          "STRING",
          {
            "default": "Text Output",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "label"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text to Console",
    "display_name": "Text to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Text to Number": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [false],
    "output_name": [
      "NUMBER"
    ],
    "name": "Text to Number",
    "display_name": "Text to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [false],
    "output_name": [
      "STRING"
    ],
    "name": "Text to String",
    "display_name": "Text to String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text String Truncate": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "truncate_by": [
          [
            "characters",
            "words"
          ]
        ],
        "truncate_from": [
          [
            "end",
            "beginning"
          ]
        ],
        "truncate_to": [
          "INT",
          {
            "default": 10,
            "min": -99999999,
            "max": 99999999,
            "step": 1
          }
        ]
      },
      "optional": {
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "truncate_by",
        "truncate_from",
        "truncate_to"
      ],
      "optional": [
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false, false],
    "output_name": [
      "TEXT",
      "TEXT_B",
      "TEXT_C",
      "TEXT_D"
    ],
    "name": "Text String Truncate",
    "display_name": "Text String Truncate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "True Random.org Number Generator": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "default": "00000000-0000-0000-0000-000000000000",
            "multiline": false
          }
        ],
        "minimum": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "maximum": [
          "FLOAT",
          {
            "default": 10000000,
            "min": -1.8446744073709552e+19,
            "max": 1.8446744073709552e+19
          }
        ],
        "mode": [
          [
            "random",
            "fixed"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "minimum",
        "maximum",
        "mode"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "True Random.org Number Generator",
    "display_name": "True Random.org Number Generator",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "unCLIP Checkpoint Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "ACE_Step\\ACE_Step_v1_3.5B.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION",
      "STRING"
    ],
    "output_is_list": [false, false, false, false, false],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION",
      "NAME_STRING"
    ],
    "name": "unCLIP Checkpoint Loader",
    "display_name": "unCLIP Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Upscale Model Loader": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x_Nomos_2_HQ_DRCT-L.pth",
            "4x_Nomos_8k_SCHAT-L.pth",
            "realSR_BSRGAN_DFO_s64w8_SwinIR-M_x2_GAN.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL",
      "STRING"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "UPSCALE_MODEL",
      "MODEL_NAME_TEXT"
    ],
    "name": "Upscale Model Loader",
    "display_name": "Upscale Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Upscale Model Switch": {
    "input": {
      "required": {
        "upscale_model_a": [
          "UPSCALE_MODEL"
        ],
        "upscale_model_b": [
          "UPSCALE_MODEL"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model_a",
        "upscale_model_b",
        "boolean"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [false],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "Upscale Model Switch",
    "display_name": "Upscale Model Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Write to GIF": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "image_delay_ms": [
          "FLOAT",
          {
            "default": 2500,
            "min": 0.1,
            "max": 60000,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "D:\\AI\\ComfyUI\\ComfyUI\\output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph_writer",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "transition_frames",
        "image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "output_path",
        "filename"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "image_pass",
      "filepath_text",
      "filename_text"
    ],
    "name": "Write to GIF",
    "display_name": "Write to GIF",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation/Writer",
    "output_node": false
  },
  "Write to Video": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "image_delay_sec": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0.1,
            "max": 60000,
            "step": 0.1
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 60,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1920,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "comfy_writer",
            "multiline": false
          }
        ],
        "codec": [
          [
            "AVC1",
            "FFV1",
            "H264",
            "MP4V"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "transition_frames",
        "image_delay_sec",
        "fps",
        "max_size",
        "output_path",
        "filename",
        "codec"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [false, false, false],
    "output_name": [
      "IMAGE_PASS",
      "filepath_text",
      "filename_text"
    ],
    "name": "Write to Video",
    "display_name": "Write to Video",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation/Writer",
    "output_node": false
  },
  "VAE Input Switch": {
    "input": {
      "required": {
        "vae_a": [
          "VAE"
        ],
        "vae_b": [
          "VAE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_a",
        "vae_b",
        "boolean"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [false],
    "output_name": [
      "VAE"
    ],
    "name": "VAE Input Switch",
    "display_name": "VAE Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Video Dump Frames": {
    "input": {
      "required": {
        "video_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/MyVideo.mp4",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/MyVideo",
            "multiline": false
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "frame_",
            "multiline": false
          }
        ],
        "filenumber_digits": [
          "INT",
          {
            "default": 4,
            "min": -1,
            "max": 8,
            "step": 1
          }
        ],
        "extension": [
          [
            "png",
            "jpg",
            "gif",
            "tiff"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "video_path",
        "output_path",
        "prefix",
        "filenumber_digits",
        "extension"
      ]
    },
    "output": [
      "STRING",
      "NUMBER"
    ],
    "output_is_list": [false, false],
    "output_name": [
      "output_path",
      "processed_count"
    ],
    "name": "Video Dump Frames",
    "display_name": "Video Dump Frames",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "CLIPSEG2": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "use_cuda": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "clipseg_model": [
          "CLIPSEG_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "use_cuda"
      ],
      "optional": [
        "clipseg_model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [false],
    "output_name": [
      "IMAGE"
    ],
    "name": "CLIPSEG2",
    "display_name": "CLIPSEG2",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "image/transformation",
    "output_node": false
  },
  "SaveImageWebsocket": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWebsocket",
    "display_name": "SaveImageWebsocket",
    "description": "",
    "python_module": "custom_nodes.websocket_image_save",
    "category": "api/image",
    "output_node": true
  }
}